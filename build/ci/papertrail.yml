variables:
  - &go_linux_version
    go_root: "/opt/golang/go1.24"
    go_bin: "/opt/golang/go1.24/bin"
    go_base_path: ""
  - &go_windows_version
    go_root: "c:\\golang\\go1.24"
    go_bin: "c:\\golang\\go1.24\\bin"
    go_base_path: "c:"
  - &go_env
    XDG_CONFIG_HOME: ${go_base_path}${workdir}
    GO111MODULE: "on"
    GOROOT: ${go_root}
    GOPATH: ${go_base_path}${workdir}
    ADD_PATH: "${go_bin}:${go_base_path}${workdir}/bin:${go_base_path}${workdir}/src/github.com/mongodb/terraform-provider-mongodbatlas/bin"
  - &go_options
    add_to_path:
      - ${go_bin}
      - ${go_base_path}${workdir}/bin
      - ${go_base_path}${workdir}/src/github.com/mongodb/terraform-provider-mongodbatlas/bin
    include_expansions_in_env:
      - go_base_path
      - workdir
    working_dir: src/github.com/mongodb/terraform-provider-mongodbatlas
    env:
      <<: *go_env

functions:
  "install gh cli":
    - command: shell.exec
      params:
        working_dir: "n/a"
        script: |
          sudo dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
          sudo dnf install -y gh

  "trace release artifacts":
    - command: shell.exec        
      params:
        working_dir: /tmp          
        script: |
          sudo dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
          sudo dnf install -y gh

    - command: git.get_project
      params:
        directory: src/github.com/mongodb/terraform-provider-mongodbatlas
    
    - command: shell.exec
      params:
        working_dir: "src/github.com/mongodb/terraform-provider-mongodbatlas"
        script: |
          export GH_TOKEN="${github_token}"

          # Clean the release_tag first
          release_tag=$(gh release list --limit 1 --json tagName --jq -r '.[0].tagName' | tr -d '\n\r\t ')
          echo "DEBUG: cleaned release_tag: '$release_tag'"

          if [ -z "${release_tag}" ]; then
            echo "ERROR: release_tag must be provided for production releases"
            exit 1
          fi

          first_char="${release_tag:0:1}"
          echo "DEBUG: first character: '$first_char'"
          
          if [[ ${release_tag} == v* ]]; then
              # version=$(echo "${release_tag}" | cut -c 2-)
              version="${release_tag:1}"
          else
              version="${release_tag}"
          fi
          
          echo "Tracing artifacts for release version: $version"
          
          mkdir -p release_artifacts
          
          # TODO: uncomment:
          # echo "Waiting 20 minutes before checking for release artifacts..."
          # sleep 1200  # 20 minutes initial wait

          echo "Checking for terraform-provider .zip artifacts in GitHub release..."

          max_attempts=5
          attempt=1
          artifact_found=false

          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt: checking for artifacts..."
            gh release view "${release_tag}" --json assets --jq '.assets[].name' | grep -q 'terraform-provider-mongodbatlas.*\.zip'
            if [ $? -eq 0 ]; then
              echo "Artifacts found. Proceeding to download..."
              artifact_found=true
              break
            fi

            echo "Artifacts not available yet. Sleeping for 2 minutes before retry..."
            sleep 120
            attempt=$((attempt + 1))
          done

          if [ "$artifact_found" != true ]; then
            echo "ERROR: No terraform-provider .zip artifacts found after waiting. Exiting..."
            gh release view "${release_tag}" --json assets --jq '.assets[].name'
            exit 1
          fi

          mkdir -p release_artifacts
          gh release download "${release_tag}" -p "terraform-provider-mongodbatlas*.zip" -D ./release_artifacts/

          echo "Downloaded artifacts:"
          ls -la release_artifacts/
          
          echo "Removing any source code archives..."
          rm -f release_artifacts/Source* release_artifacts/source* 2>/dev/null || true
          
          echo "Final artifacts to trace:"
          ls -la release_artifacts/
          
          artifact_count=$(ls -1 release_artifacts/*.zip 2>/dev/null | wc -l)
          if [ $artifact_count -eq 0 ]; then
            echo "ERROR: No terraform-provider .zip artifacts found for release ${release_tag}"
            echo "Available files in release:"
            gh release view "${release_tag}" --json assets --jq '.assets[].name'
            exit 1
          fi
          
          echo "Found $artifact_count terraform-provider artifacts to trace"
          
          cat <<EOT > trace-expansions.yml
          release_version: "$version"
          EOT
    
    - command: expansions.update
      params:
        file: src/github.com/mongodb/terraform-provider-mongodbatlas/trace-expansions.yml
    
    - command: papertrail.trace
      params:
        key_id: ${papertrail_key_id}
        secret_key: ${papertrail_secret_key}
        product: "test-tf-provider-mongodbatlas-2"
        version: ${release_version}
        filenames:
          - "src/github.com/mongodb/terraform-provider-mongodbatlas/release_artifacts/*.zip"

 
tasks:
  - name: trace_release_artifacts
    tags: ["release"]
    commands:
      - func: "trace release artifacts"

            
buildvariants:
  - name: papertrail_github_release
    display_name: "Papertrail - GitHub Release Artifacts"
    # git_tag_only: true
    tags: ["release"]
    run_on:
      - rhel90-small
    expansions:
      <<: *go_linux_version
    tasks:
      - name: trace_release_artifacts