variables:
  - &go_linux_version
    go_root: "/opt/golang/go1.24"
    go_bin: "/opt/golang/go1.24/bin"
    go_base_path: ""
  - &go_windows_version
    go_root: "c:\\golang\\go1.24"
    go_bin: "c:\\golang\\go1.24\\bin"
    go_base_path: "c:"
  - &go_env
    XDG_CONFIG_HOME: ${go_base_path}${workdir}
    GO111MODULE: "on"
    GOROOT: ${go_root}
    GOPATH: ${go_base_path}${workdir}
    ADD_PATH: "${go_bin}:${go_base_path}${workdir}/bin:${go_base_path}${workdir}/src/github.com/mongodb/terraform-provider-mongodbatlas/bin"
  - &go_options
    add_to_path:
      - ${go_bin}
      - ${go_base_path}${workdir}/bin
      - ${go_base_path}${workdir}/src/github.com/mongodb/terraform-provider-mongodbatlas/bin
    include_expansions_in_env:
      - go_base_path
      - workdir
    working_dir: src/github.com/mongodb/terraform-provider-mongodbatlas
    env:
      <<: *go_env

functions:
  # Production function - traces artifacts from GitHub releases
  "trace release artifacts":
    - command: git.get_project
      params:
        directory: src/github.com/mongodb/terraform-provider-mongodbatlas
    
    - command: shell.exec
      params:
        working_dir: "src/github.com/mongodb/terraform-provider-mongodbatlas"
        script: |
          # Get the release version - this should be passed as a parameter or environment variable
          if [ -z "${release_tag}" ]; then
            echo "ERROR: release_tag must be provided for production releases"
            exit 1
          fi
          
          # Clean version (remove 'v' prefix if present)
          if [[ ${release_tag} == v* ]]; then
              version=$(echo "${release_tag}" | cut -c 2-)
          else
              version="${release_tag}"
          fi
          
          echo "Tracing artifacts for release version: $version (tag: ${release_tag})"
          
          # Create directory for downloaded artifacts
          mkdir -p release_artifacts
          
          # Get release info from GitHub API
          echo "Fetching release information from GitHub API..."
          REPO="mongodb/terraform-provider-mongodbatlas"
          API_URL="https://api.github.com/repos/${REPO}/releases/tags/${release_tag}"
          
          # Download release info
          curl -s -H "Accept: application/vnd.github.v3+json" "$API_URL" > release_info.json
          
          # Check if release exists
          if [ ! -s release_info.json ] || grep -q '"message": "Not Found"' release_info.json; then
            echo "ERROR: Release ${release_tag} not found"
            echo "API Response:"
            cat release_info.json
            exit 1
          fi
          
          echo "Release found. Available assets:"
          cat release_info.json | grep -o '"name": "[^"]*"' | sed 's/"name": "//;s/"//' | sort
          
          # Extract download URLs for terraform-provider zip files
          echo "Extracting terraform-provider artifact URLs..."
          cat release_info.json | \
            grep -A1 '"name": "terraform-provider-mongodbatlas.*\.zip"' | \
            grep '"browser_download_url"' | \
            sed 's/.*"browser_download_url": "//;s/".*//' > artifact_urls.txt
          
          # Check if we found any artifacts
          if [ ! -s artifact_urls.txt ]; then
            echo "ERROR: No terraform-provider .zip artifacts found for release ${release_tag}"
            echo "Available assets in release:"
            cat release_info.json | grep -o '"name": "[^"]*"' | sed 's/"name": "//;s/"//'
            exit 1
          fi
          
          echo "Found terraform-provider artifacts:"
          cat artifact_urls.txt
          
          # Download each artifact
          echo "Downloading terraform-provider artifacts..."
          while read -r url; do
            filename=$(basename "$url")
            echo "Downloading: $filename"
            curl -L -o "release_artifacts/$filename" "$url"
            if [ $? -eq 0 ]; then
              echo "✓ Downloaded: $filename"
            else
              echo "✗ Failed to download: $filename"
              exit 1
            fi
          done < artifact_urls.txt
          
          # Verify artifacts were downloaded
          echo "Downloaded artifacts:"
          ls -la release_artifacts/
          
          # Count artifacts
          artifact_count=$(ls -1 release_artifacts/*.zip 2>/dev/null | wc -l)
          if [ $artifact_count -eq 0 ]; then
            echo "ERROR: No artifacts were successfully downloaded"
            exit 1
          fi
          
          echo "Successfully downloaded $artifact_count terraform-provider artifacts to trace"
          
          cat <<EOT > trace-expansions.yml
          release_version: "$version"
          EOT
    
    - command: expansions.update
      params:
        file: src/github.com/mongodb/terraform-provider-mongodbatlas/trace-expansions.yml
    
    - command: papertrail.trace
      params:
        key_id: ${papertrail_key_id}
        secret_key: ${papertrail_secret_key}
        product: "terraform-provider-mongodbatlas"
        version: ${release_version}
        filenames:
          - "src/github.com/mongodb/terraform-provider-mongodbatlas/release_artifacts/*.zip"


tasks:
  # Production task for tracing GitHub release artifacts
  - name: trace_release_artifacts
    commands:
      - func: "trace release artifacts"
  
            
buildvariants:
  # Production variant for GitHub releases
  - name: papertrail_github_release
    display_name: "Papertrail - GitHub Release Artifacts"
    run_on:
      - rhel90-small
    expansions:
      <<: *go_linux_version
      release_tag: "v1.36.0"  # Set the specific release tag here
    tasks:
      - name: trace_release_artifacts
