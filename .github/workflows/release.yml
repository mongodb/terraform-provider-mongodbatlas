name: release
on:
  push:
    tags:
      - 'v*'
jobs:
  # Check that the last run of the acceptance tests was successful
  # We run the acceptance tests only if the last run of the sceduled workflow failed 
  check-acceptance-tests-status:
    runs-on: ubuntu-latest
    outputs:
      acceptance_tests_status: ${{ steps.lastJobStatus.outputs.test }}
    steps:
      - name: Check last job status
        id: lastJobStatus
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LAST_JOB_STATUS=$(gh run list --workflow acceptance-tests.yml |grep -oh "completed.*" | grep -h "schedule.*" | head -1 | awk '{print $2}')
          echo "acceptanceTestsStatus=${LAST_JOB_STATUS}" >> $GITHUB_OUTPUT
  # We run the acceptance tests only if the last run of the sceduled workflow failed 
  run-accettance-tests-workflow:
    needs: [ check-acceptance-tests-status ]
    if: ${{ needs.check-acceptance-tests-status.outputs.acceptance_tests_status != 'success'}}
    secrets: inherit
    permissions:
      contents: write
      pull-requests: read
      repository-projects: read
    uses: ./.github/workflows/acceptance-tests.yml
    with:
      parent-event-name: 'release'   
  # Release the provider
  goreleaser:
    runs-on: ubuntu-latest
    needs: [ check-acceptance-tests-status, run-accettance-tests-workflow ]
    if: always() && !cancelled() && !failure()
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Unshallow
        run: git fetch --prune --unshallow
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - name: Import GPG key
        id: import_gpg
        uses: paultyng/ghaction-import-gpg@v2.1.0
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.PASSPHRASE }}
      - name: Set the user terminal
        run: export GPG_TTY=$(tty)
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: latest
          args: release --rm-dist
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
