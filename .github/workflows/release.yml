name: 'New Release'
run-name: 'Release ${{ inputs.version_number }}'

# Used for creating a new release. This workflow will run qa acceptance tests, create a new tag, and generate the release with GoReleaser.
on:
  workflow_dispatch:
    inputs:
      version_number:
        description: 'Version number (e.g., v1.0.0, v1.0.0-pre, v1.0.0-pre1)'
        required: true
      skip_tests:
        description: 'Skip QA acceptance tests, define value to `true` to explicitly skip'
      use_existing_tag:
        description: 'Set value to `true` to use an existing tag for this release version, default is `false`'

jobs:

  validate-version-input:
    runs-on: ubuntu-latest
    steps:
      - name: Validation of version format
        run: |
          echo "${{ inputs.version_number }}" | grep -P '^v\d+\.\d+\.\d+(-pre[A-Za-z0-9-]*)?$'  

  run-qa-acceptance-tests:
    needs: [ validate-version-input ]
    # QA acceptance tests are skipped when explicit input parameter is used
    # As this job may be skipped following jobs require using 'always()' to make sure they are still run
    if: needs.validate-version-input.result == 'success' && inputs.skip_tests != 'true'
    secrets: inherit
    uses: ./.github/workflows/acceptance-tests.yml
    with:
      atlas_cloud_env: "qa"
      ref: ${{ inputs.use_existing_tag == 'true' && inputs.version_number  || github.ref }}

  update-changelog-header:
    runs-on: ubuntu-latest
    needs: [ validate-version-input, run-qa-acceptance-tests ]
    # Skipped if use_existing_tag is defined, is a pre-release, or previous jobs failed.
    if: >-
      always() 
      && inputs.use_existing_tag != 'true' 
      && !contains(inputs.version_number, 'pre') 
      && needs.validate-version-input.result == 'success' 
      && (needs.run-qa-acceptance-tests.result == 'skipped' || needs.run-qa-acceptance-tests.result == 'success')
    steps:
      - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
        with:
          fetch-depth: 0
      - run: ./scripts/update-changelog-header-for-release.sh ${{inputs.version_number}}
      - run: |
          if [[ $(git status --porcelain) ]]; then
            MSG="Update CHANGELOG.md header for ${{inputs.version_number}} release"
            git config --local user.email changelogbot@mongodb.com
            git config --local user.name changelogbot
            git add CHANGELOG.md
            git commit -m "$MSG"
            git push
          fi
    
  release:
    runs-on: ubuntu-latest
    needs: [ validate-version-input, run-qa-acceptance-tests, update-changelog-header ]
    # Release is skipped if there are failures in previous steps
    if: >- 
      always() 
      && needs.validate-version-input.result == 'success' 
      && (needs.run-qa-acceptance-tests.result == 'skipped' || needs.run-qa-acceptance-tests.result == 'success') 
      && (needs.update-changelog-header.result == 'skipped' || needs.update-changelog-header.result == 'success')
    steps:
      - name: Checkout
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
        with:
          ref: ${{ inputs.use_existing_tag == 'true' && inputs.version_number || 'master' }}
      - name: Unshallow
        run: git fetch --prune --unshallow
      - name: Get the latest commit SHA
        id: get-sha
        run: echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
      - name: Create release tag
        uses: rickstaa/action-create-tag@a1c7777fcb2fee4f19b0f283ba888afa11678b72
        with:
          tag: ${{ inputs.version_number }}
          commit_sha: ${{ steps.get-sha.outputs.sha }}
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_passphrase: ${{ secrets.PASSPHRASE }}
          tag_exists_error: ${{ inputs.use_existing_tag != 'true' }}
      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491
        with:
          go-version-file: 'go.mod'
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@01dd5d3ca463c7f10f7f4f7b4f177225ac661ee4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@7ec5c2b0c6cdda6e8bbb49444bc797dd33d74dd8
        with:
          version: latest
          args: release --rm-dist
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
