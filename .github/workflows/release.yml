name: 'New Release'
run-name: 'Release ${{ inputs.version_number }}'

# Used for creating a new release. This workflow will run qa acceptance tests, create a new tag, and generate the release with GoReleaser.
on:
  workflow_dispatch:
    inputs:
      version_number:
        description: 'Version number (e.g., v1.0.0, v1.0.0-pre, v1.0.0-pre1)'
        required: true
      skip_tests:
        description: 'Skip QA acceptance tests, define value to `true` to explicitly skip'

jobs:

  validate-version-input:
    runs-on: ubuntu-latest
    steps:
      - name: Validation of version format
        run: |
          echo "${{ inputs.version_number }}" | grep -P '^v\d+\.\d+\.\d+(-pre[A-Za-z0-9-]*)?$'  

    # QA acceptance tests are skipped when explicit input parameter is used
  run-qa-acceptance-tests:
    needs: [ validate-version-input ]
    if: needs.validate-version-input.result == 'success' && inputs.skip_tests != 'true'
    secrets: inherit
    uses: ./.github/workflows/acceptance-tests.yml
    with:
      atlas_cloud_env: "qa"

  release:
    runs-on: ubuntu-latest
    needs: [ validate-version-input, run-qa-acceptance-tests ]
    if: ${{ always() && needs.validate-version-input.result == 'success' && (needs.run-qa-acceptance-tests.result == 'skipped' || needs.run-qa-acceptance-tests.result == 'success') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Unshallow
        run: git fetch --prune --unshallow
      - name: Create release tag
        uses: rickstaa/action-create-tag@v1.7.2 # will fail if existing tag is present
        with:
          tag: ${{ inputs.version_number }}
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Import GPG key
        id: import_gpg
        uses: paultyng/ghaction-import-gpg@v2.1.0
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.PASSPHRASE }}
      - name: Set the user terminal
        run: export GPG_TTY=$(tty)
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --rm-dist
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
