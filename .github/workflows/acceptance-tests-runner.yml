name: 'Acceptance Tests Execution'
run-name: 'Acceptance Tests Execution ${{ inputs.test_group }}'

# Called by acceptance-tests.yml workflow to run acceptance tests. Input and secret variables are defined by the caller depending if `dev` or `qa` cloud env is used.
on:
  workflow_call:
    inputs:
      terraform_version:
        description: 'Terraform version to use, e.g. 1.6.x, empty for latest'     
        type: string
        required: true
      provider_version:
        description: 'Previous MongoDB Atlas Provider version to use in Migration tests, e.g. 1.14.0, empty for latest'     
        type: string
        required: false    
      test_group:
        description: 'Test group to run, e.g. advanced_cluster, empty for all'
        type: string
        required: false
      test_name:
        description: 'Name of the test to run, e.g. TestAccNetworkRSNetworkPeering_basicAzure, empty for all (this is regex & requires Test group to be specified as well)'
        type: string
        required: false
      ref:
        description: 'The branch, tag or SHA where tests will run, e.g. v1.14.0, empty for default branch'
        type: string
        required: false
      
      mongodb_atlas_org_id:
        type: string
        required: true
      mongodb_atlas_base_url:
        type: string
        required: true
      mongodb_atlas_project_owner_id:
        type: string
        required: true
      mongodb_atlas_teams_ids:
        type: string
        required: true  
      mongodb_atlas_username:
        type: string
        required: true 
      azure_atlas_app_id:
        type: string
        required: true
      azure_service_principal_id:
        type: string
        required: true
      azure_tenant_id:
        type: string
        required: true
      aws_secret_name:
        type: string
        required: true
      aws_region_federation:
          type: string
          required: true
      mongodb_atlas_federation_settings_id:
        type: string
        required: true
      mongodb_atlas_federated_okta_idp_id:
        type: string
        required: true
      mongodb_atlas_federated_idp_id:
        type: string
        required: true
      mongodb_atlas_federated_sso_url:
        type: string
        required: true
      mongodb_atlas_federated_issuer_uri:
        type: string
        required: true
      mongodb_atlas_federated_org_id:
        type: string
        required: true
      mongodb_atlas_gov_org_id:
        type: string
        required: true
      mongodb_atlas_gov_base_url:
        type: string
        required: true
      mongodb_atlas_gov_project_owner_id:
        type: string
        required: true
      mongodb_atlas_federated_settings_associated_domain:
        type: string
        required: true
      mongodb_atlas_project_ear_pe_id:
        type: string
        required: true
      mongodb_atlas_enable_preview:
        type: string
        required: true
      azure_private_endpoint_region:
        type: string
        required: true
    secrets: # all secrets are passed explicitly in this workflow
      mongodb_atlas_public_key:
        required: true
      mongodb_atlas_private_key:
        required: true
      ca_cert: 
        required: true
      aws_account_id:
        required: true
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
      aws_s3_bucket_federation:
        required: true
      aws_s3_bucket_backup:
        required: true
      azure_service_url_backup:
        required: true
      azure_blob_storage_container_backup:
        required: true
      mongodb_atlas_ldap_hostname:
        required: true
      mongodb_atlas_ldap_username:
        required: true
      mongodb_atlas_ldap_password:
        required: true
      mongodb_atlas_ldap_port:
        required: true
      mongodb_atlas_ldap_ca_certificate:
        required: true
      mongodb_atlas_private_endpoint_id:
        required: true
      mongodb_atlas_private_endpoint_dns_name:
        required: true
      mongodb_atlas_gov_private_key:
        required: true
      mongodb_atlas_gov_public_key:
        required: true
      azure_directory_id:
        required: true
      azure_resource_group_name:
        required: true
      azure_subscription_id:
        required: true
      azure_vnet_name:
        required: true
      azure_vnet_name_updated:
        required: true
      azure_client_id:
        required: true
      azure_key_vault_name:
        required: true
      azure_key_identifier:
        required: true
      azure_key_vault_name_updated:
        required: true
      azure_key_identifier_updated:
        required: true
      azure_app_secret:
        required: true
          
env:
  TF_ACC: 1
  TF_LOG: ${{ vars.LOG_LEVEL }}
  ACCTEST_TIMEOUT: ${{ vars.ACCTEST_TIMEOUT }}
  # Only Migration tests are run when a specific previous provider version is set
  # If the name (regex) of the test is set, only that test is run
  ACCTEST_REGEX_RUN: ${{ inputs.test_name || inputs.provider_version == '' && '^Test(Acc|Mig)' || '^TestMig' }}
  MONGODB_ATLAS_BASE_URL: ${{ inputs.mongodb_atlas_base_url }}
  MONGODB_ATLAS_ORG_ID: ${{ inputs.mongodb_atlas_org_id }}
  MONGODB_ATLAS_PUBLIC_KEY: ${{ secrets.mongodb_atlas_public_key }}
  MONGODB_ATLAS_PRIVATE_KEY: ${{ secrets.mongodb_atlas_private_key }}
  MONGODB_ATLAS_GOV_PUBLIC_KEY: ${{ secrets.mongodb_atlas_gov_public_key }}
  MONGODB_ATLAS_GOV_PRIVATE_KEY: ${{ secrets.mongodb_atlas_gov_private_key }}
  MONGODB_ATLAS_GOV_BASE_URL:  ${{ inputs.mongodb_atlas_gov_base_url }}
  MONGODB_ATLAS_GOV_ORG_ID:  ${{ inputs.mongodb_atlas_gov_org_id }}


jobs:  

  get-provider-version:
    runs-on: ubuntu-latest
    permissions: {}
    outputs:
      provider_version: ${{ inputs.provider_version || steps.get_last_release.outputs.last_provider_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      - name: Get Last Release
        id: get_last_release
        shell: bash
        run: |
          LAST_RELEASE=$(curl -sSfL -X GET https://api.github.com/repos/mongodb/terraform-provider-mongodbatlas/releases/latest | jq -r '.tag_name | ltrimstr("v")')
          echo "Last release: $LAST_RELEASE"
          echo "last_provider_version=${LAST_RELEASE}" >> "${GITHUB_OUTPUT}"

  change-detection:
    runs-on: ubuntu-latest
    permissions: {}
    env:
      mustTrigger: ${{ github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.test_group == '' )  }}
    outputs: # ensure resources are sorted alphabetically
      advanced_cluster: ${{ steps.filter.outputs.advanced_cluster == 'true' || env.mustTrigger == 'true' }}
      assume_role: ${{ steps.filter.outputs.assume_role == 'true' || env.mustTrigger == 'true' }}
      backup: ${{ steps.filter.outputs.backup == 'true' || env.mustTrigger == 'true' }}
      control_plane_ip_addresses: ${{ steps.filter.outputs.control_plane_ip_addresses == 'true' || env.mustTrigger == 'true' }}
      cluster: ${{ steps.filter.outputs.cluster == 'true' || env.mustTrigger == 'true' }}
      cluster_outage_simulation: ${{ steps.filter.outputs.cluster_outage_simulation == 'true' || env.mustTrigger == 'true' }}
      config: ${{ steps.filter.outputs.config == 'true' || env.mustTrigger == 'true' }}
      encryption: ${{ steps.filter.outputs.encryption == 'true' || env.mustTrigger == 'true' }}
      event_trigger: ${{ steps.filter.outputs.event_trigger == 'true' || env.mustTrigger == 'true' }}
      federated: ${{ steps.filter.outputs.federated == 'true' || env.mustTrigger == 'true' }}
      generic: ${{ steps.filter.outputs.generic == 'true' || env.mustTrigger == 'true' }}
      global_cluster_config: ${{ steps.filter.outputs.global_cluster_config == 'true' || env.mustTrigger == 'true' }}
      ldap: ${{ steps.filter.outputs.ldap == 'true' || env.mustTrigger == 'true' }}
      mongodb_employee_access_grant: ${{ steps.filter.outputs.mongodb_employee_access_grant == 'true' || env.mustTrigger == 'true' }}
      network: ${{ steps.filter.outputs.network == 'true' || env.mustTrigger == 'true' }}
      project: ${{ steps.filter.outputs.project == 'true' || env.mustTrigger == 'true' }}
      push_based_log_export: ${{ steps.filter.outputs.push_based_log_export == 'true' || env.mustTrigger == 'true' }}
      search_deployment: ${{ steps.filter.outputs.search_deployment == 'true' || env.mustTrigger == 'true' }}
      search_index: ${{ steps.filter.outputs.search_index == 'true' || env.mustTrigger == 'true' }}
      serverless: ${{ steps.filter.outputs.serverless == 'true' || env.mustTrigger == 'true' }}
      stream: ${{ steps.filter.outputs.stream == 'true' || env.mustTrigger == 'true' }}
    steps:
    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
    - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36
      id: filter
      if: ${{ inputs.test_group == ''  && env.mustTrigger == 'false' }}
      with:
        filters: |
          advanced_cluster:
            - 'internal/service/advancedcluster/*.go'
          assume_role:
            - 'internal/provider/*.go'
          backup:
            - 'internal/service/cloudbackupschedule/*.go'
            - 'internal/service/cloudbackupsnapshot/*.go'
            - 'internal/service/cloudbackupsnapshotexportbucket/*.go'
            - 'internal/service/cloudbackupsnapshotexportjob/*.go'
            - 'internal/service/cloudbackupsnapshotrestorejob/*.go'  
            - 'internal/service/onlinearchive/*.go'
          control_plane_ip_addresses:
            - 'internal/service/controlplaneipaddresses/*.go'
          cluster:
            - 'internal/service/cluster/*.go'
          cluster_outage_simulation:
            - 'internal/service/clusteroutagesimulation/*.go'  
          config:
            - 'internal/service/alertconfiguration/*.go'
            - 'internal/service/apikey/*.go'
            - 'internal/service/atlasuser/*.go'
            - 'internal/service/cloudprovideraccess/*.go'
            - 'internal/service/customdbrole/*.go'
            - 'internal/service/customdnsconfigurationclusteraws/*.go'
            - 'internal/service/databaseuser/*.go'
            - 'internal/service/maintenancewindow/*.go'
            - 'internal/service/organization/*.go'
            - 'internal/service/orginvitation/*.go'
            - 'internal/service/projectapikey/*.go'
            - 'internal/service/rolesorgid/*.go'
            - 'internal/service/team/*.go'
            - 'internal/service/thirdpartyintegration/*.go'
          encryption:
            - 'internal/service/encryptionatrest/*.go' 
            - 'internal/service/encryptionatrestprivateendpoint/*.go'
          event_trigger:
            - 'internal/service/eventtrigger/*.go'  
          federated:
            - 'internal/service/federateddatabaseinstance/*.go'
            - 'internal/service/federatedquerylimit/*.go'  
            - 'internal/service/federatedsettingsidentityprovider/*.go'
            - 'internal/service/federatedsettingsorgconfig/*.go'
            - 'internal/service/federatedsettingsorgrolemapping/*.go'
          generic:
            - 'internal/service/auditing/*.go'
            - 'internal/service/backupcompliancepolicy/*.go'
            - 'internal/service/x509authenticationdatabaseuser/*.go'  
          global_cluster_config:
            - 'internal/service/globalclusterconfig/*.go'
          ldap:
            - 'internal/service/ldapconfiguration/*.go'
            - 'internal/service/ldapverify/*.go'  
          mongodb_employee_access_grant:
            - 'internal/service/mongodbemployeeaccessgrant/*.go'
          network:
            - 'internal/service/networkcontainer/*.go'
            - 'internal/service/networkpeering/*.go'
            - 'internal/service/privateendpointregionalmode/*.go'
            - 'internal/service/privatelinkendpoint/*.go'
            - 'internal/service/privatelinkendpointservice/*.go'
            - 'internal/service/privatelinkendpointservicedatafederationonlinearchive/*.go' 
          project:
            - 'internal/service/accesslistapikey/*.go'
            - 'internal/service/project/*.go'
            - 'internal/service/projectinvitation/*.go'  
            - 'internal/service/projectipaccesslist/*.go'
            - 'internal/service/projectipaddresses/*.go'
          push_based_log_export:
            - 'internal/service/pushbasedlogexport/*.go'
          search_deployment:
            - 'internal/service/searchdeployment/*.go'
          search_index:
            - 'internal/service/searchindex/*.go'
          serverless:
            - 'internal/service/privatelinkendpointserverless/*.go'
            - 'internal/service/privatelinkendpointserviceserverless/*.go'
            - 'internal/service/serverlessinstance/*.go'
          stream:
            - 'internal/service/streamconnection/*.go'
            - 'internal/service/streaminstance/*.go'
            - 'internal/service/streamprocessor/*.go'

  advanced_cluster:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.advanced_cluster == 'true' || inputs.test_group == 'advanced_cluster' }}
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          ref: ${{ inputs.ref || github.ref }}
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false  
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: ./internal/service/advancedcluster
        run: make testacc

  assume_role:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.assume_role == 'true' || inputs.test_group == 'assume_role' }}
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          ref: ${{ inputs.ref || github.ref }}
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false    
      - id: sts-assume-role
        name: Generate STS Temporary credential for acceptance testing
        shell: bash
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
          AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
          ASSUME_ROLE_ARN: ${{ vars.ASSUME_ROLE_ARN }}
        run: bash ./scripts/generate-credentials-with-sts-assume-role.sh
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_PUBLIC_KEY: ""
          MONGODB_ATLAS_PRIVATE_KEY: ""
          ASSUME_ROLE_ARN: ${{ vars.ASSUME_ROLE_ARN }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          STS_ENDPOINT: ${{ vars.STS_ENDPOINT }}
          SECRET_NAME: ${{ inputs.aws_secret_name }}
          AWS_ACCESS_KEY_ID: ${{ steps.sts-assume-role.outputs.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.sts-assume-role.outputs.aws_secret_access_key }}
          AWS_SESSION_TOKEN: ${{ steps.sts-assume-role.outputs.AWS_SESSION_TOKEN }}
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: ./internal/provider
        run: make testacc

  backup:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.backup == 'true' || inputs.test_group == 'backup' }}
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          ref: ${{ inputs.ref || github.ref }}
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false  
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_PROJECT_OWNER_ID: ${{ inputs.mongodb_atlas_project_owner_id }}
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          AWS_REGION: ${{ vars.AWS_REGION_LOWERCASE }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
          AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
          AWS_S3_BUCKET: ${{ secrets.aws_s3_bucket_backup }}
          AZURE_BLOB_STORAGE_CONTAINER_NAME: ${{ secrets.azure_blob_storage_container_backup }}
          AZURE_SERVICE_URL: ${{ secrets.azure_service_url_backup }}
          AZURE_ATLAS_APP_ID: ${{ inputs.azure_atlas_app_id }}
          AZURE_SERVICE_PRINCIPAL_ID: ${{ inputs.azure_service_principal_id }}
          AZURE_TENANT_ID: ${{ inputs.azure_tenant_id }}
          ACCTEST_PACKAGES: |
            ./internal/service/cloudbackupschedule
            ./internal/service/cloudbackupsnapshot
            ./internal/service/cloudbackupsnapshotexportbucket
            ./internal/service/cloudbackupsnapshotexportjob
            ./internal/service/cloudbackupsnapshotrestorejob
            ./internal/service/onlinearchive
        run: make testacc

  control_plane_ip_addresses:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.control_plane_ip_addresses == 'true' || inputs.test_group == 'control_plane_ip_addresses' }}
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          ref: ${{ inputs.ref || github.ref }}
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false  
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: ./internal/service/controlplaneipaddresses
        run: make testacc
      
  cluster:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.cluster == 'true' || inputs.test_group == 'cluster' }}
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          ref: ${{ inputs.ref || github.ref }}
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false  
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: ./internal/service/cluster
        run: make testacc

  cluster_outage_simulation:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.cluster_outage_simulation == 'true' || inputs.test_group == 'cluster_outage_simulation' }}
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          ref: ${{ inputs.ref || github.ref }}
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false  
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: ./internal/service/clusteroutagesimulation
        run: make testacc
      
  config:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.config == 'true' || inputs.test_group == 'config' }}
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          ref: ${{ inputs.ref || github.ref }}
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false  
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_PROJECT_OWNER_ID: ${{ inputs.mongodb_atlas_project_owner_id }}
          MONGODB_ATLAS_USERNAME: ${{ inputs.mongodb_atlas_username }}
          AZURE_ATLAS_APP_ID: ${{ inputs.azure_atlas_app_id }}
          AZURE_SERVICE_PRINCIPAL_ID: ${{ inputs.azure_service_principal_id }}
          AZURE_TENANT_ID: ${{ inputs.azure_tenant_id }}
          AWS_REGION: ${{ vars.AWS_REGION_LOWERCASE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
          AWS_S3_BUCKET: ${{ secrets.aws_s3_bucket_federation }}
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: |
            ./internal/service/alertconfiguration
            ./internal/service/atlasuser
            ./internal/service/cloudprovideraccess
            ./internal/service/customdbrole
            ./internal/service/customdnsconfigurationclusteraws
            ./internal/service/databaseuser
            ./internal/service/maintenancewindow
            ./internal/service/organization
            ./internal/service/orginvitation
            ./internal/service/projectapikey
            ./internal/service/apikey
            ./internal/service/rolesorgid
            ./internal/service/team
            ./internal/service/thirdpartyintegration
        run: make testacc

  encryption:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.encryption == 'true' || inputs.test_group == 'encryption' }}
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          ref: ${{ inputs.ref || github.ref }}
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false  
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: |
           ./internal/service/encryptionatrest
           ./internal/service/encryptionatrestprivateendpoint
          MONGODB_ATLAS_PROJECT_EAR_PE_ID: ${{ inputs.mongodb_atlas_project_ear_pe_id }}
          AZURE_PRIVATE_ENDPOINT_REGION: ${{ inputs.azure_private_endpoint_region }}
          AZURE_CLIENT_ID: ${{ secrets.azure_client_id }}
          AZURE_RESOURCE_GROUP_NAME: ${{ secrets.azure_resource_group_name }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.azure_subscription_id }}
          AZURE_TENANT_ID: ${{ vars.azure_tenant_id }}
          AZURE_APP_SECRET: ${{ secrets.azure_app_secret }}
          AZURE_KEY_VAULT_NAME: ${{ secrets.azure_key_vault_name }}
          AZURE_KEY_IDENTIFIER: ${{ secrets.azure_key_identifier }}
          AZURE_KEY_VAULT_NAME_UPDATED: ${{ secrets.azure_key_vault_name_updated }}
          AZURE_KEY_IDENTIFIER_UPDATED: ${{ secrets.azure_key_identifier_updated }}
          MONGODB_ATLAS_ENABLE_PREVIEW: ${{ inputs.mongodb_atlas_enable_preview }}
        run: make testacc

  event_trigger:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.event_trigger == 'true' || inputs.test_group == 'event_trigger' }}
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          ref: ${{ inputs.ref || github.ref }}
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false  
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: ./internal/service/eventtrigger
        run: make testacc

  federated:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.federated == 'true' || inputs.test_group == 'federated' }}
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          ref: ${{ inputs.ref || github.ref }}
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false    
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_FEDERATION_SETTINGS_ID: ${{ inputs.mongodb_atlas_federation_settings_id }}
          MONGODB_ATLAS_FEDERATED_OKTA_IDP_ID: ${{ inputs.mongodb_atlas_federated_okta_idp_id }}
          MONGODB_ATLAS_FEDERATED_IDP_ID: ${{ inputs.mongodb_atlas_federated_idp_id }}
          MONGODB_ATLAS_FEDERATED_SSO_URL: ${{ inputs.mongodb_atlas_federated_sso_url }}
          MONGODB_ATLAS_FEDERATED_ISSUER_URI: ${{ inputs.mongodb_atlas_federated_issuer_uri }}
          MONGODB_ATLAS_FEDERATED_ORG_ID: ${{ inputs.mongodb_atlas_federated_org_id }}
          MONGODB_ATLAS_FEDERATED_SETTINGS_ASSOCIATED_DOMAIN: ${{ inputs.mongodb_atlas_federated_settings_associated_domain }}
          AWS_S3_BUCKET: ${{ secrets.aws_s3_bucket_federation }}
          AWS_REGION: ${{ vars.aws_region_federation }}
          AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: |
            ./internal/service/federateddatabaseinstance
            ./internal/service/federatedquerylimit
            ./internal/service/federatedsettingsidentityprovider
            ./internal/service/federatedsettingsorgconfig
            ./internal/service/federatedsettingsorgrolemapping
        run: make testacc

  generic:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.generic == 'true' || inputs.test_group == 'generic' }}
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          ref: ${{ inputs.ref || github.ref }}
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false  
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_PROJECT_OWNER_ID: ${{ inputs.mongodb_atlas_project_owner_id }}
          CA_CERT: ${{ secrets.ca_cert }}
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: |
            ./internal/service/auditing
            ./internal/service/backupcompliancepolicy
            ./internal/service/x509authenticationdatabaseuser
        run: make testacc

  global_cluster_config:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.global_cluster_config == 'true' || inputs.test_group == 'global_cluster_config' }}
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          ref: ${{ inputs.ref || github.ref }}
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false  
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: ./internal/service/globalclusterconfig
        run: make testacc

  ldap:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.ldap == 'true' || inputs.test_group == 'ldap' }}
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          ref: ${{ inputs.ref || github.ref }}
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false  
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_LDAP_HOSTNAME: ${{ secrets.mongodb_atlas_ldap_hostname }}
          MONGODB_ATLAS_LDAP_USERNAME: ${{ secrets.mongodb_atlas_ldap_username }}
          MONGODB_ATLAS_LDAP_PASSWORD: ${{ secrets.mongodb_atlas_ldap_password }}
          MONGODB_ATLAS_LDAP_PORT: ${{ secrets.mongodb_atlas_ldap_port }}
          MONGODB_ATLAS_LDAP_CA_CERTIFICATE: ${{ secrets.mongodb_atlas_ldap_ca_certificate }}
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: |
            ./internal/service/ldapconfiguration
            ./internal/service/ldapverify
        run: make testacc

  mongodb_employee_access_grant:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.mongodb_employee_access_grant == 'true' || inputs.test_group == 'mongodb_employee_access_grant' }}
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          ref: ${{ inputs.ref || github.ref }}
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false  
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: ./internal/service/mongodbemployeeaccessgrant
        run: make testacc
        
  network:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.network == 'true' || inputs.test_group == 'network' }}
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          ref: ${{ inputs.ref || github.ref }}
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false  
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_PRIVATE_ENDPOINT_ID: ${{ secrets.mongodb_atlas_private_endpoint_id }}
          MONGODB_ATLAS_PRIVATE_ENDPOINT_DNS_NAME: ${{ secrets.mongodb_atlas_private_endpoint_dns_name }}      
          AWS_ACCOUNT_ID: ${{ secrets.aws_account_id }}
          AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_REGION_UPPERCASE: ${{ vars.AWS_REGION_UPPERCASE }}
          AWS_REGION_LOWERCASE: ${{ vars.AWS_REGION_LOWERCASE }}
          AWS_SECURITY_GROUP_1: ${{ vars.AWS_SECURITY_GROUP_1 }}
          AWS_SECURITY_GROUP_2: ${{ vars.AWS_SECURITY_GROUP_2 }}
          AWS_VPC_CIDR_BLOCK: ${{ vars.AWS_VPC_CIDR_BLOCK }}
          AWS_VPC_ID: ${{ vars.AWS_VPC_ID }}
          AZURE_DIRECTORY_ID: ${{ secrets.azure_directory_id }}
          AZURE_RESOURCE_GROUP_NAME: ${{ secrets.azure_resource_group_name }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.azure_subscription_id }}
          AZURE_VNET_NAME: ${{ secrets.azure_vnet_name }}
          AZURE_VNET_NAME_UPDATED: ${{ secrets.azure_vnet_name_updated }}
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: |
            ./internal/service/networkcontainer
            ./internal/service/networkpeering
            ./internal/service/privateendpointregionalmode
            ./internal/service/privatelinkendpoint
            ./internal/service/privatelinkendpointservice
            ./internal/service/privatelinkendpointservicedatafederationonlinearchive
        run: make testacc
      
  project: 
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.project == 'true' || inputs.test_group == 'project' }}
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          ref: ${{ inputs.ref || github.ref }}
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false  
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_PROJECT_OWNER_ID: ${{ inputs.mongodb_atlas_project_owner_id }}
          MONGODB_ATLAS_GOV_PROJECT_OWNER_ID: ${{ inputs.mongodb_atlas_gov_project_owner_id }}
          MONGODB_ATLAS_TEAMS_IDS: ${{ inputs.mongodb_atlas_teams_ids }}
          AWS_ACCOUNT_ID: ${{ secrets.aws_account_id }}
          AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_SECURITY_GROUP_1: ${{ vars.AWS_SECURITY_GROUP_1 }}
          AWS_SECURITY_GROUP_2: ${{ vars.AWS_SECURITY_GROUP_2 }}
          AWS_VPC_CIDR_BLOCK: ${{ vars.AWS_VPC_CIDR_BLOCK }}
          AWS_VPC_ID: ${{ vars.AWS_VPC_ID }}
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: |
            ./internal/service/accesslistapikey
            ./internal/service/project
            ./internal/service/projectinvitation
            ./internal/service/projectipaccesslist
            ./internal/service/projectipaddresses
        run: make testacc

  push_based_log_export:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.push_based_log_export == 'true' || inputs.test_group == 'push_based_log_export' }}
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          ref: ${{ inputs.ref || github.ref }}
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false  
      - name: Acceptance Tests
        env:
          AWS_REGION: ${{ vars.AWS_REGION_LOWERCASE }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
          AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: ./internal/service/pushbasedlogexport
        run: make testacc

  search_deployment:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.search_deployment == 'true' || inputs.test_group == 'search_deployment' }}
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          ref: ${{ inputs.ref || github.ref }}
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false  
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: ./internal/service/searchdeployment
        run: make testacc

  search_index:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.search_index == 'true' || inputs.test_group == 'search_index' }}
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          ref: ${{ inputs.ref || github.ref }}
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false    
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: ./internal/service/searchindex
        run: make testacc
  
  serverless:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.serverless == 'true' || inputs.test_group == 'serverless' }}
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          ref: ${{ inputs.ref || github.ref }}
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false    
      - name: Acceptance Tests
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: |
            ./internal/service/privatelinkendpointserverless
            ./internal/service/privatelinkendpointserviceserverless
            ./internal/service/serverlessinstance
        run: make testacc
  
  stream:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.stream == 'true' || inputs.test_group == 'stream' }}
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        with:
          ref: ${{ inputs.ref || github.ref }}
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false  
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: |
            ./internal/service/streamconnection
            ./internal/service/streaminstance
            ./internal/service/streamprocessor
        run: make testacc
