name: 'Acceptance Tests Execution'
run-name: 'Acceptance Tests Execution ${{ inputs.test_group }}'

# Called by acceptance-tests.yml workflow to run acceptance tests. Input and secret variables are defined by the caller depending if `dev` or `qa` cloud env is used.
on:
  workflow_call:
    inputs:
      terraform_version:
        description: 'Terraform version to use, e.g. 1.6.x'     
        type: string
        required: true
      provider_version:
        description: 'Previous MongoDB Atlas Provider version to use in Migration tests, e.g. 1.14.0, empty for latest'     
        type: string
        required: false    
      test_group:
        description: 'Test group to run, e.g. advanced_cluster, empty for all'
        type: string
        required: false
      test_name:
        description: 'Name of the test to run, e.g. TestAccNetworkRSNetworkPeering_basicAzure, empty for all (this is regex & requires Test group to be specified as well)'
        type: string
        required: false
      ref:
        description: 'The branch, tag or SHA where tests will run, e.g. v1.14.0, empty for default branch'
        type: string
        required: false
      reduced_tests:
        description: 'If run only minimum tests for advanced_cluster, e.g. in PRs'
        type: boolean
        required: false
        default: false
        
      mongodb_atlas_org_id:
        type: string
        required: true
      mongodb_atlas_base_url:
        type: string
        required: true
      mongodb_realm_base_url:
        type: string
        required: true
      mongodb_atlas_project_owner_id:
        type: string
        required: true
      mongodb_atlas_teams_ids:
        type: string
        required: true  
      azure_atlas_app_id:
        type: string
        required: true
      azure_service_principal_id:
        type: string
        required: true
      azure_tenant_id:
        type: string
        required: true
      aws_secret_name:
        type: string
        required: true
      aws_region_federation:
          type: string
          required: true
      mongodb_atlas_federation_settings_id:
        type: string
        required: true
      mongodb_atlas_federated_okta_idp_id:
        type: string
        required: true
      mongodb_atlas_federated_idp_id:
        type: string
        required: true
      mongodb_atlas_federated_sso_url:
        type: string
        required: true
      mongodb_atlas_federated_issuer_uri:
        type: string
        required: true
      mongodb_atlas_federated_org_id:
        type: string
        required: true
      mongodb_atlas_gov_org_id:
        type: string
        required: true
      mongodb_atlas_gov_base_url:
        type: string
        required: true
      mongodb_atlas_rp_org_id:
        type: string
        required: true
      mongodb_atlas_gov_project_owner_id:
        type: string
        required: true
      mongodb_atlas_federated_settings_associated_domain:
        type: string
        required: true
      mongodb_atlas_project_ear_pe_id:
        type: string
        required: true
      azure_private_endpoint_region:
        type: string
        required: true
      confluent_cloud_network_id:
        type: string
        required: true
      confluent_cloud_privatelink_access_id:
        type: string
        required: true
      aws_ear_role_id:
        type: string
        required: true
      mongodb_atlas_project_ear_pe_aws_id:
        type: string
        required: true
      mongodb_atlas_asp_project_ear_pe_id:
        type: string
        required: true
      mongodb_atlas_asp_project_aws_role_arn:
        type: string
        required: true
    secrets: # all secrets are passed explicitly in this workflow
      mongodb_atlas_public_key:
        required: true
      mongodb_atlas_private_key:
        required: true
      mongodb_atlas_public_key_read_only:
        required: true
      mongodb_atlas_private_key_read_only:
        required: true
      ca_cert: 
        required: true
      aws_account_id:
        required: true
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
      aws_s3_bucket_federation:
        required: true
      aws_s3_bucket_backup:
        required: true
      azure_service_url_backup:
        required: true
      azure_blob_storage_container_backup:
        required: true
      mongodb_atlas_ldap_hostname:
        required: true
      mongodb_atlas_ldap_username:
        required: true
      mongodb_atlas_ldap_password:
        required: true
      mongodb_atlas_ldap_port:
        required: true
      mongodb_atlas_ldap_ca_certificate:
        required: true
      mongodb_atlas_private_endpoint_id:
        required: true
      mongodb_atlas_private_endpoint_dns_name:
        required: true
      mongodb_atlas_gov_private_key:
        required: true
      mongodb_atlas_gov_public_key:
        required: true
      mongodb_atlas_rp_private_key:
        required: true
      mongodb_atlas_rp_public_key:
        required: true
      azure_directory_id:
        required: true
      azure_resource_group_name:
        required: true
      azure_subscription_id:
        required: true
      azure_vnet_name:
        required: true
      azure_vnet_name_updated:
        required: true
      azure_client_id:
        required: true
      azure_key_vault_name:
        required: true
      azure_key_identifier:
        required: true
      azure_key_vault_name_updated:
        required: true
      azure_key_identifier_updated:
        required: true
      azure_app_secret:
        required: true
      confluent_cloud_api_key:
        required: true
      confluent_cloud_api_secret:
        required: true
      aws_customer_master_key_id:
        required: true
          
env:
  TF_ACC: 1
  TF_LOG: ${{ vars.LOG_LEVEL }}
  ACCTEST_TIMEOUT: ${{ vars.ACCTEST_TIMEOUT }}
  # Only Migration tests are run when a specific previous provider version is set
  # If the name (regex) of the test is set, only that test is run
  ACCTEST_REGEX_RUN: ${{ inputs.test_name || inputs.provider_version == '' && '^Test(Acc|Mig)' || '^TestMig' }}
  MONGODB_ATLAS_BASE_URL: ${{ inputs.mongodb_atlas_base_url }}
  MONGODB_REALM_BASE_URL: ${{ inputs.mongodb_realm_base_url }}
  MONGODB_ATLAS_ORG_ID: ${{ inputs.mongodb_atlas_org_id }}
  MONGODB_ATLAS_PUBLIC_KEY: ${{ secrets.mongodb_atlas_public_key }}
  MONGODB_ATLAS_PRIVATE_KEY: ${{ secrets.mongodb_atlas_private_key }}
  MONGODB_ATLAS_PUBLIC_KEY_READ_ONLY: ${{ secrets.mongodb_atlas_public_key_read_only }}
  MONGODB_ATLAS_PRIVATE_KEY_READ_ONLY: ${{ secrets.mongodb_atlas_private_key_read_only }}
  MONGODB_ATLAS_GOV_PUBLIC_KEY: ${{ secrets.mongodb_atlas_gov_public_key }}
  MONGODB_ATLAS_GOV_PRIVATE_KEY: ${{ secrets.mongodb_atlas_gov_private_key }}
  MONGODB_ATLAS_GOV_BASE_URL:  ${{ inputs.mongodb_atlas_gov_base_url }}
  MONGODB_ATLAS_GOV_ORG_ID:  ${{ inputs.mongodb_atlas_gov_org_id }}


jobs:  

  get-provider-version:
    runs-on: ubuntu-latest
    permissions: {}
    outputs:
      provider_version: ${{ inputs.provider_version || steps.get_last_release.outputs.last_provider_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Get Last Release
        id: get_last_release
        shell: bash
        run: |
          LAST_RELEASE=$(curl -sSfL -X GET https://api.github.com/repos/mongodb/terraform-provider-mongodbatlas/releases/latest | jq -r '.tag_name | ltrimstr("v")')
          echo "Last release: $LAST_RELEASE"
          echo "last_provider_version=${LAST_RELEASE}" >> "${GITHUB_OUTPUT}"

  change-detection:
    runs-on: ubuntu-latest
    permissions: {}
    env:
      mustTrigger: ${{ github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.test_group == '' )  }}
    outputs: # ensure resources are sorted alphabetically
      advanced_cluster: ${{ steps.filter.outputs.advanced_cluster == 'true' || env.mustTrigger == 'true' }}
      advanced_cluster_tpf: ${{ steps.filter.outputs.advanced_cluster_tpf == 'true' || env.mustTrigger == 'true' }}
      assume_role: ${{ steps.filter.outputs.assume_role == 'true' || env.mustTrigger == 'true' }}
      autogen: ${{ steps.filter.outputs.autogen == 'true' || env.mustTrigger == 'true' }}
      backup: ${{ steps.filter.outputs.backup == 'true' || env.mustTrigger == 'true' }}
      control_plane_ip_addresses: ${{ steps.filter.outputs.control_plane_ip_addresses == 'true' || env.mustTrigger == 'true' }}
      cluster: ${{ steps.filter.outputs.cluster == 'true' || env.mustTrigger == 'true' }}
      cluster_outage_simulation: ${{ steps.filter.outputs.cluster_outage_simulation == 'true' || env.mustTrigger == 'true' }}
      config: ${{ steps.filter.outputs.config == 'true' || env.mustTrigger == 'true' }}
      encryption: ${{ steps.filter.outputs.encryption == 'true' || env.mustTrigger == 'true' }}
      event_trigger: ${{ steps.filter.outputs.event_trigger == 'true' || env.mustTrigger == 'true' }}
      federated: ${{ steps.filter.outputs.federated == 'true' || env.mustTrigger == 'true' }}
      flex_cluster: ${{ steps.filter.outputs.flex_cluster == 'true' || env.mustTrigger == 'true' }}
      generic: ${{ steps.filter.outputs.generic == 'true' || env.mustTrigger == 'true' }}
      global_cluster_config: ${{ steps.filter.outputs.global_cluster_config == 'true' || env.mustTrigger == 'true' }}
      ldap: ${{ steps.filter.outputs.ldap == 'true' || env.mustTrigger == 'true' }}
      mongodb_employee_access_grant: ${{ steps.filter.outputs.mongodb_employee_access_grant == 'true' || env.mustTrigger == 'true' }}
      network: ${{ steps.filter.outputs.network == 'true' || env.mustTrigger == 'true' }}
      project: ${{ steps.filter.outputs.project == 'true' || env.mustTrigger == 'true' }}
      push_based_log_export: ${{ steps.filter.outputs.push_based_log_export == 'true' || env.mustTrigger == 'true' }}
      resource_policy: ${{ steps.filter.outputs.resource_policy == 'true' || env.mustTrigger == 'true' }}
      search_deployment: ${{ steps.filter.outputs.search_deployment == 'true' || env.mustTrigger == 'true' }}
      search_index: ${{ steps.filter.outputs.search_index == 'true' || env.mustTrigger == 'true' }}
      serverless: ${{ steps.filter.outputs.serverless == 'true' || env.mustTrigger == 'true' }}
      stream: ${{ steps.filter.outputs.stream == 'true' || env.mustTrigger == 'true' }}
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
    - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36
      id: filter
      if: ${{ inputs.test_group == ''  && env.mustTrigger == 'false' }}
      with:
        filters: |
          advanced_cluster:
            - 'internal/service/advancedcluster/!(*_test).go' # matches any adv_cluster file change except test files
            - 'internal/service/advancedclustertpf/common*.go'
          advanced_cluster_tpf:
            - 'internal/service/advancedclustertpf/*.go'
            - 'internal/service/advancedcluster/*_test.go'
          assume_role:
            - 'internal/provider/*.go'
          autogen:
            - 'internal/common/autogen/*.go'
            - 'internal/serviceapi/customdbroleapi/*.go'
            - 'internal/serviceapi/databaseuserapi/*.go'
            - 'internal/serviceapi/projectapi/*.go'
            - 'internal/serviceapi/pushbasedlogexportapi/*.go'
            - 'internal/serviceapi/resourcepolicyapi/*.go'            
            - 'internal/serviceapi/searchdeploymentapi/*.go'
          backup:
            - 'internal/service/cloudbackupschedule/*.go'
            - 'internal/service/cloudbackupsnapshot/*.go'
            - 'internal/service/cloudbackupsnapshotexportbucket/*.go'
            - 'internal/service/cloudbackupsnapshotexportjob/*.go'
            - 'internal/service/cloudbackupsnapshotrestorejob/*.go'  
            - 'internal/service/onlinearchive/*.go'
          control_plane_ip_addresses:
            - 'internal/service/controlplaneipaddresses/*.go'
          cluster:
            - 'internal/service/cluster/*.go'
          cluster_outage_simulation:
            - 'internal/service/clusteroutagesimulation/*.go'  
          config:
            - 'internal/config/*.go'
            - 'internal/service/alertconfiguration/*.go'
            - 'internal/service/apikey/*.go'
            - 'internal/service/atlasuser/*.go'
            - 'internal/service/cloudprovideraccess/*.go'
            - 'internal/service/customdbrole/*.go'
            - 'internal/service/customdnsconfigurationclusteraws/*.go'
            - 'internal/service/databaseuser/*.go'
            - 'internal/service/maintenancewindow/*.go'
            - 'internal/service/organization/*.go'
            - 'internal/service/orginvitation/*.go'
            - 'internal/service/projectapikey/*.go'
            - 'internal/service/rolesorgid/*.go'
            - 'internal/service/team/*.go'
            - 'internal/service/thirdpartyintegration/*.go'
          encryption:
            - 'internal/service/encryptionatrest/*.go' 
            - 'internal/service/encryptionatrestprivateendpoint/*.go'
          event_trigger:
            - 'internal/service/eventtrigger/*.go'  
          federated:
            - 'internal/service/federateddatabaseinstance/*.go'
            - 'internal/service/federatedquerylimit/*.go'  
            - 'internal/service/federatedsettingsidentityprovider/*.go'
            - 'internal/service/federatedsettingsorgconfig/*.go'
            - 'internal/service/federatedsettingsorgrolemapping/*.go'
          flex_cluster:
            - 'internal/service/flexcluster/*.go'
          generic:
            - 'internal/service/auditing/*.go'
            - 'internal/service/backupcompliancepolicy/*.go'
            - 'internal/service/x509authenticationdatabaseuser/*.go'  
          global_cluster_config:
            - 'internal/service/globalclusterconfig/*.go'
          ldap:
            - 'internal/service/ldapconfiguration/*.go'
            - 'internal/service/ldapverify/*.go'  
          mongodb_employee_access_grant:
            - 'internal/service/mongodbemployeeaccessgrant/*.go'
          network:
            - 'internal/service/networkcontainer/*.go'
            - 'internal/service/networkpeering/*.go'
            - 'internal/service/privateendpointregionalmode/*.go'
            - 'internal/service/privatelinkendpoint/*.go'
            - 'internal/service/privatelinkendpointservice/*.go'
            - 'internal/service/privatelinkendpointservicedatafederationonlinearchive/*.go' 
          project:
            - 'internal/service/accesslistapikey/*.go'
            - 'internal/service/project/*.go'
            - 'internal/service/projectinvitation/*.go'  
            - 'internal/service/projectipaccesslist/*.go'
            - 'internal/service/projectipaddresses/*.go'
          push_based_log_export:
            - 'internal/service/pushbasedlogexport/*.go'
          resource_policy:
            - 'internal/service/resourcepolicy/*.go'
          search_deployment:
            - 'internal/service/searchdeployment/*.go'
          search_index:
            - 'internal/service/searchindex/*.go'
          serverless:
            - 'internal/service/privatelinkendpointserverless/*.go'
            - 'internal/service/privatelinkendpointserviceserverless/*.go'
            - 'internal/service/serverlessinstance/*.go'
          stream:
            - 'internal/service/streamaccountdetails/*.go'
            - 'internal/service/streamconnection/*.go'
            - 'internal/service/streaminstance/*.go'
            - 'internal/service/streamprocessor/*.go'
            - 'internal/service/streamprivatelinkendpoint/*.go'

  config:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.config == 'true' || inputs.test_group == 'config' }}
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: ${{ inputs.ref || github.ref }}
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false  
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_PROJECT_OWNER_ID: ${{ inputs.mongodb_atlas_project_owner_id }}
          MONGODB_ATLAS_USERNAME: ${{ vars.MONGODB_ATLAS_USERNAME }}
          MONGODB_ATLAS_USERNAME_2: ${{ vars.MONGODB_ATLAS_USERNAME_2 }}
          AZURE_ATLAS_APP_ID: ${{ inputs.azure_atlas_app_id }}
          AZURE_SERVICE_PRINCIPAL_ID: ${{ inputs.azure_service_principal_id }}
          AZURE_TENANT_ID: ${{ inputs.azure_tenant_id }}
          AWS_REGION: ${{ vars.AWS_REGION_LOWERCASE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key_id }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_access_key }}
          AWS_S3_BUCKET: ${{ secrets.aws_s3_bucket_federation }}
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: |
            ./internal/config
            ./internal/service/alertconfiguration
            ./internal/service/atlasuser
            ./internal/service/cloudprovideraccess
            ./internal/service/customdbrole
            ./internal/service/customdnsconfigurationclusteraws
            ./internal/service/databaseuser
            ./internal/service/maintenancewindow
            ./internal/service/organization
            ./internal/service/orginvitation
            ./internal/service/projectapikey
            ./internal/service/apikey
            ./internal/service/rolesorgid
            ./internal/service/team
            ./internal/service/thirdpartyintegration
        run: make testacc
