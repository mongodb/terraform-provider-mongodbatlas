name: 'Migration Tests'

# Used for running migration tests, either triggered manually or called by other workflows.
on:
  workflow_dispatch:
    inputs:
      terraform_version:
        description: 'Terraform version to use, e.g. 1.6.x, empty for latest'     
        type: string
        required: false
      provider_version:
        description: 'Previous MongoDB Atlas Provider version to use, e.g. 1.14.0, empty for latest'     
        type: string
        required: false
      test_group:
        description: 'Test group to run, e.g. advanced_cluster, empty for all'
        type: string
        required: false
  workflow_call: # workflow runs after Test Suite or code-health
    inputs:
      terraform_version:
        description: 'Terraform version to use, e.g. 1.6.x, empty for latest'     
        type: string
        required: false
      provider_version:
        description: 'Previous MongoDB Atlas Provider version to use, e.g. 1.14.0, empty for latest'     
        type: string
        required: false

env:
    terraform_version: ${{ inputs.terraform_version || vars.TF_VERSION_LATEST }}
    TF_ACC: 1
    TF_LOG: ${{ vars.LOG_LEVEL }}
    ACCTEST_TIMEOUT: ${{ vars.ACCTEST_TIMEOUT }}
    ACCTEST_REGEX_RUN: "^TestAccMigration"  
    MONGODB_ATLAS_BASE_URL: ${{ vars.MONGODB_ATLAS_BASE_URL }}
    MONGODB_ATLAS_ORG_ID: ${{ vars.MONGODB_ATLAS_ORG_ID_CLOUD_DEV }}
    MONGODB_ATLAS_PUBLIC_KEY: ${{ secrets.MONGODB_ATLAS_PUBLIC_KEY_CLOUD_DEV }}
    MONGODB_ATLAS_PRIVATE_KEY: ${{ secrets.MONGODB_ATLAS_PRIVATE_KEY_CLOUD_DEV }}

jobs: 
  get-provider-version:
    runs-on: ubuntu-latest
    outputs:
      provider_version: ${{ inputs.provider_version || steps.get_last_release.outputs.last_provider_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
      - name: Get Last Release
        id: get_last_release
        shell: bash
        run: |
         LAST_RELEASE=$(curl -sSfL -X GET https://api.github.com/repos/mongodb/terraform-provider-mongodbatlas/releases/latest | jq -r '.tag_name | ltrimstr("v")')
         echo "Last release: $LAST_RELEASE"
         echo "last_provider_version=${LAST_RELEASE}" >> "${GITHUB_OUTPUT}"

  change-detection:
    runs-on: ubuntu-latest
    env:
      mustTrigger: ${{ github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.test_group == '')  }}
    outputs:
      project: ${{ steps.filter.outputs.project == 'true' || env.mustTrigger == 'true' }}
      config: ${{ steps.filter.outputs.config == 'true' || env.mustTrigger == 'true' }}
      advanced_cluster: ${{ steps.filter.outputs.advanced_cluster == 'true' || env.mustTrigger == 'true' }}
      backup: ${{ steps.filter.outputs.backup == 'true' || env.mustTrigger == 'true' }}
      stream: ${{ steps.filter.outputs.stream == 'true' || env.mustTrigger == 'true' }}
      federated: ${{ steps.filter.outputs.federated == 'true' || env.mustTrigger == 'true' }}
      search_deployment: ${{ steps.filter.outputs.search_deployment == 'true' || env.mustTrigger == 'true' }}
      generic: ${{ steps.filter.outputs.generic == 'true' || env.mustTrigger == 'true' }}
      network: ${{ steps.filter.outputs.network == 'true' || env.mustTrigger == 'true' }}
      encryption: ${{ steps.filter.outputs.encryption == 'true' || env.mustTrigger == 'true' }}
      serverless: ${{ steps.filter.outputs.serverless == 'true' || env.mustTrigger == 'true' }}
      data_lake: ${{ steps.filter.outputs.data_lake == 'true' || env.mustTrigger == 'true' }}
      cluster_outage_simulation: ${{ steps.filter.outputs.cluster_outage_simulation == 'true' || env.mustTrigger == 'true' }}
      cluster: ${{ steps.filter.outputs.cluster == 'true' || env.mustTrigger == 'true' }}
      ldap: ${{ steps.filter.outputs.ldap == 'true' || env.mustTrigger == 'true' }}
    steps:
    - uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
    - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36
      id: filter
      if: ${{ inputs.test_group == '' && env.mustTrigger == 'false' }}
      with:
        filters: |
          project:
            - 'internal/service/project/*.go'
            - 'internal/service/projectipaccesslist/*.go'
            - 'internal/service/accesslistapikey/*.go'
            - 'internal/service/projectinvitation/*.go'
          config:
            - 'internal/service/alertconfiguration/*.go'
            - 'internal/service/atlasuser/*.go'
            - 'internal/service/databaseuser/*.go'
            - 'internal/service/projectapikey/*.go'
            - 'internal/service/apikey/*.go'
            - 'internal/service/teams/*.go'
            - 'internal/service/cloudprovideraccess/*.go'
            - 'internal/service/customdbrole/*.go'
            - 'internal/service/maintenancewindow/*.go'
            - 'internal/service/customdnsconfigurationclusteraws/*.go'
            - 'internal/service/rolesorgid/*.go'
            - 'internal/service/orginvitation/*.go'
            - 'internal/service/organization/*.go'
            - 'internal/service/thirdpartyintegration/*.go'
          backup:
            - 'internal/service/onlinearchive/*.go'
            - 'internal/service/cloudbackupschedule/*.go'
            - 'internal/service/cloudbackupsnapshot/*.go'
            - 'internal/service/cloudbackupsnapshotexportbucket/*.go'
            - 'internal/service/cloudbackupsnapshotexportjob/*.go'
            - 'internal/service/cloudbackupsnapshotrestorejob/*.go'
          advanced_cluster:
            - 'internal/service/advancedcluster/*.go'
          stream:
            - 'internal/service/streaminstance/*.go'
            - 'internal/service/streamconnection/*.go'
          federated:
            - 'internal/service/federatedsettingsidentityprovider/*.go'
            - 'internal/service/federateddatabaseinstance/*.go'
            - 'internal/service/federatedsettingsorgconfig/*.go'
            - 'internal/service/federatedsettingsorgrolemapping/*.go'
            - 'internal/service/federatedquerylimit/*.go'
          search_deployment:
            - 'internal/service/searchdeployment/*.go'
          generic:
            - 'internal/service/backupcompliancepolicy/*.go'
            - 'internal/service/auditing/*.go'
            - 'internal/service/x509authenticationdatabaseuser/*.go'
          network:
            - 'internal/service/networkcontainer/*.go'
            - 'internal/service/networkpeering/*.go'
            - 'internal/service/privateendpointregionalmode/*.go'
            - 'internal/service/privatelinkendpoint/*.go'
            - 'internal/service/privatelinkendpointservice/*.go'
            - 'internal/service/privatelinkendpointservicedatafederationonlinearchive/*.go'
          encryption:
            - 'internal/service/encryptionatrest/*.go'
          serverless:
            - 'internal/service/serverlessinstance/*.go'
            - 'internal/service/privatelinkendpointserverless/*.go'
            - 'internal/service/privatelinkendpointserviceserverless/*.go'
          data_lake:
            - 'internal/service/datalakepipeline/*.go'
          cluster_outage_simulation:
            - 'internal/service/clusteroutagesimulation/*.go'
          cluster:
            - 'internal/service/cluster/*.go'
            - 'internal/service/globalclusterconfig/*.go'
          ldap:
            - 'internal/service/ldapconfiguration/*.go'
            - 'internal/service/ldapverify/*.go'
  
  project: 
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.project == 'true' || inputs.test_group == 'project' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36
        with:
          terraform_version: ${{ env.terraform_version }}
          terraform_wrapper: false  
      - name: Migration Tests
        env:
          MONGODB_ATLAS_PROJECT_OWNER_ID: ${{ vars.MONGODB_ATLAS_PROJECT_OWNER_ID }}
          MONGODB_ATLAS_TEAMS_IDS: ${{ vars.MONGODB_ATLAS_TEAMS_IDS }}
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_SECURITY_GROUP_1: ${{ vars.AWS_SECURITY_GROUP_1 }}
          AWS_SECURITY_GROUP_2: ${{ vars.AWS_SECURITY_GROUP_2 }}
          AWS_VPC_CIDR_BLOCK: ${{ vars.AWS_VPC_CIDR_BLOCK }}
          AWS_VPC_ID: ${{ vars.AWS_VPC_ID }}
          ACCTEST_PACKAGES: |
            ./internal/service/project
            ./internal/service/projectipaccesslist
            ./internal/service/accesslistapikey
            ./internal/service/projectinvitation
        run: make testacc
  
  config:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.config == 'true' || inputs.test_group == 'config' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36
        with:
          terraform_version: ${{ env.terraform_version }}
          terraform_wrapper: false  
      - name: Migration Tests
        env:
          MONGODB_ATLAS_PROJECT_OWNER_ID: ${{ vars.MONGODB_ATLAS_PROJECT_OWNER_ID }}
          MONGODB_ATLAS_USERNAME: ${{ vars.MONGODB_ATLAS_USERNAME_CLOUD_DEV }}
          AZURE_ATLAS_APP_ID: ${{vars.AZURE_ATLAS_APP_ID}}
          AZURE_SERVICE_PRINCIPAL_ID: ${{vars.AZURE_SERVICE_PRINCIPAL_ID}}
          AZURE_TENANT_ID: ${{vars.AZURE_TENANT_ID}}
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: |
            ./internal/service/alertconfiguration
            ./internal/service/atlasuser
            ./internal/service/databaseuser
            ./internal/service/projectapikey
            ./internal/service/apikey
            ./internal/service/teams
            ./internal/service/cloudprovideraccess
            ./internal/service/customdbrole
            ./internal/service/maintenancewindow
            ./internal/service/customdnsconfigurationclusteraws
            ./internal/service/rolesorgid
            ./internal/service/orginvitation
            ./internal/service/organization
            ./internal/service/thirdpartyintegration
        run: make testacc

  backup:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.backup == 'true' || inputs.test_group == 'backup' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36
        with:
          terraform_version: ${{ env.terraform_version }}
          terraform_wrapper: false  
      - name: Migration Tests
        env:
          MONGODB_ATLAS_PROJECT_OWNER_ID: ${{ vars.MONGODB_ATLAS_PROJECT_OWNER_ID }}
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: |
            ./internal/service/onlinearchive
            ./internal/service/cloudbackupschedule
            ./internal/service/cloudbackupsnapshot
            ./internal/service/cloudbackupsnapshotexportbucket
            ./internal/service/cloudbackupsnapshotexportjob
            ./internal/service/cloudbackupsnapshotrestorejob
        run: make testacc

  advanced_cluster:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.advanced_cluster == 'true' || inputs.test_group == 'advanced_cluster' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36
        with:
          terraform_version: ${{ env.terraform_version }}
          terraform_wrapper: false    
      - name: Migration Tests
        env:
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: ./internal/service/advancedcluster
        run: make testacc
  
  stream:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.stream == 'true' || inputs.test_group == 'stream' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36
        with:
          terraform_version: ${{ env.terraform_version }}
          terraform_wrapper: false    
      - name: Migration Tests
        env:
          MONGODB_ATLAS_ENABLE_PREVIEW: "true"
          # can be removed when MONGODB_ATLAS_LAST_VERSION supports the new MONGODB_ATLAS_ENABLE_PREVIEW flag
          MONGODB_ATLAS_ENABLE_BETA: "true"
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: |
            ./internal/service/streaminstance
            ./internal/service/streamconnection
        run: make testacc

  federated:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.federated == 'true' || inputs.test_group == 'federated' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36
        with:
          terraform_version: ${{ env.terraform_version }}
          terraform_wrapper: false    
      - name: Migration Tests
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET_FEDERATION }}
          AWS_REGION: ${{ vars.AWS_REGION_FEDERATION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: |
            ./internal/service/federatedsettingsidentityprovider
            ./internal/service/federateddatabaseinstance
            ./internal/service/federatedsettingsorgconfig
            ./internal/service/federatedsettingsorgrolemapping
            ./internal/service/federatedquerylimit
        run: make testacc

  search_deployment:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.search_deployment == 'true' || inputs.test_group == 'search_deployment' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36
        with:
          terraform_version: ${{ env.terraform_version }}
          terraform_wrapper: false    
      - name: Migration Tests
        env:
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: ./internal/service/searchdeployment
        run: make testacc

  generic:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.generic == 'true' || inputs.test_group == 'generic' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36
        with:
          terraform_version: ${{ env.terraform_version }}
          terraform_wrapper: false    
      - name: Migration Tests
        env:
          MONGODB_ATLAS_PROJECT_OWNER_ID: ${{ vars.MONGODB_ATLAS_PROJECT_OWNER_ID }}
          CA_CERT: ${{ secrets.CA_CERT }}
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: |
            ./internal/service/backupcompliancepolicy
            ./internal/service/auditing
            ./internal/service/x509authenticationdatabaseuser
        run: make testacc
      
  network:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.network == 'true' || inputs.test_group == 'network' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36
        with:
          terraform_version: ${{ env.terraform_version }}
          terraform_wrapper: false    
      - name: Migration Tests
        env:
          MONGODB_ATLAS_PRIVATE_ENDPOINT_ID: ${{ secrets.MONGODB_ATLAS_PRIVATE_ENDPOINT_ID }}
          MONGODB_ATLAS_PRIVATE_ENDPOINT_DNS_NAME: ${{ secrets.MONGODB_ATLAS_PRIVATE_ENDPOINT_DNS_NAME }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_SECURITY_GROUP_1: ${{ vars.AWS_SECURITY_GROUP_1 }}
          AWS_SECURITY_GROUP_2: ${{ vars.AWS_SECURITY_GROUP_2 }}
          AWS_VPC_CIDR_BLOCK: ${{ vars.AWS_VPC_CIDR_BLOCK }}
          AWS_VPC_ID: ${{ vars.AWS_VPC_ID }}
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: |
            ./internal/service/networkcontainer
            ./internal/service/networkpeering
            ./internal/service/privateendpointregionalmode
            ./internal/service/privatelinkendpoint
            ./internal/service/privatelinkendpointservice
            ./internal/service/privatelinkendpointservicedatafederationonlinearchive
        run: make testacc
  encryption:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.encryption == 'true' || inputs.test_group == 'encryption' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36
        with:
          terraform_version: ${{ env.terraform_version }}
          terraform_wrapper: false    
      - name: Migration Tests
        env:
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: ./internal/service/encryptionatrest
        run: make testacc
  serverless:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.serverless == 'true' || inputs.test_group == 'serverless' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36
        with:
          terraform_version: ${{ env.terraform_version }}
          terraform_wrapper: false    
      - name: Migration Tests
        env:
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: |
            ./internal/service/serverlessinstance
            ./internal/service/privatelinkendpointserverless
            ./internal/service/privatelinkendpointserviceserverless
        run: make testacc
  data_lake:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.data_lake == 'true' || inputs.test_group == 'data_lake' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36
        with:
          terraform_version: ${{ env.terraform_version }}
          terraform_wrapper: false    
      - name: Migration Tests
        env:
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: ./internal/service/datalakepipeline
        run: make testacc
  cluster_outage_simulation:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.cluster_outage_simulation == 'true' || inputs.test_group == 'cluster_outage_simulation' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36
        with:
          terraform_version: ${{ env.terraform_version }}
          terraform_wrapper: false    
      - name: Migration Tests
        env:
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: ./internal/service/clusteroutagesimulation
        run: make testacc
  cluster:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.cluster == 'true' || inputs.test_group == 'cluster' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36
        with:
          terraform_version: ${{ env.terraform_version }}
          terraform_wrapper: false    
      - name: Migration Tests
        env:
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: |
            ./internal/service/cluster
            ./internal/service/globalclusterconfig
        run: make testacc
  ldap:
    needs: [ change-detection, get-provider-version ]
    if: ${{ needs.change-detection.outputs.ldap == 'true' || inputs.test_group == 'ldap' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633
      - name: Set up Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@a1502cd9e758c50496cc9ac5308c4843bcd56d36
        with:
          terraform_version: ${{ env.terraform_version }}
          terraform_wrapper: false    
      - name: Migration Tests
        env:
          MONGODB_ATLAS_LDAP_HOSTNAME: ${{ secrets.MONGODB_ATLAS_LDAP_HOSTNAME }}
          MONGODB_ATLAS_LDAP_USERNAME: ${{ secrets.MONGODB_ATLAS_LDAP_USERNAME }}
          MONGODB_ATLAS_LDAP_PASSWORD: ${{ secrets.MONGODB_ATLAS_LDAP_PASSWORD }}
          MONGODB_ATLAS_LDAP_CA_CERTIFICATE: ${{ secrets.MONGODB_ATLAS_LDAP_CA_CERTIFICATE }}
          MONGODB_ATLAS_LDAP_PORT: ${{ secrets.MONGODB_ATLAS_LDAP_PORT }}
          MONGODB_ATLAS_LAST_VERSION: ${{ needs.get-provider-version.outputs.provider_version }}
          ACCTEST_PACKAGES: |
            ./internal/service/ldapconfiguration
            ./internal/service/ldapverify
        run: make testacc
