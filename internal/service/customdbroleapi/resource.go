// Code generated by terraform-provider-mongodbatlas using `make generate-resource`. DO NOT EDIT.

package customdbroleapi

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/mongodb/terraform-provider-mongodbatlas/internal/common/autogen"
	"github.com/mongodb/terraform-provider-mongodbatlas/internal/common/conversion"
	"github.com/mongodb/terraform-provider-mongodbatlas/internal/config"
)

var _ resource.ResourceWithConfigure = &rs{}
var _ resource.ResourceWithImportState = &rs{}

const (
	apiVersionHeader           = "application/vnd.atlas.2023-01-01+json"
	errorReadingAPIResponse    = "error reading API response"
	errorProcessingAPIResponse = "error processing API response"
	errorBuildingAPIRequest    = "error building API request"
)

func Resource() resource.Resource {
	return &rs{
		RSCommon: config.RSCommon{
			ResourceName: "custom_db_role_api",
		},
	}
}

type rs struct {
	config.RSCommon
}

func (r *rs) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = ResourceSchema(ctx)
	conversion.UpdateSchemaDescription(&resp.Schema)
}

func (r *rs) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan TFModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	pathParams := map[string]string{
		"groupId": plan.GroupId.ValueString(),
	}
	callParams := config.APICallParams{
		VersionHeader: apiVersionHeader,
		RelativePath:  "/api/atlas/v2/groups/{groupId}/customDBRoles/roles",
		PathParams:    pathParams,
		Method:        "POST",
	}
	autogen.HandleCreate(ctx, resp, r.Client, &plan, &callParams)
}

func (r *rs) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state TFModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	autogen.HandleRead(ctx, resp, r.Client, &state, readAPICallParams(&state))
}

func (r *rs) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan TFModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	pathParams := map[string]string{
		"groupId":  plan.GroupId.ValueString(),
		"roleName": plan.RoleName.ValueString(),
	}
	callParams := config.APICallParams{
		VersionHeader: apiVersionHeader,
		RelativePath:  "/api/atlas/v2/groups/{groupId}/customDBRoles/roles/{roleName}",
		PathParams:    pathParams,
		Method:        "PATCH",
	}
	autogen.HandleUpdate(ctx, resp, r.Client, &plan, &callParams)
}

func (r *rs) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state *TFModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	pathParams := map[string]string{
		"groupId":  state.GroupId.ValueString(),
		"roleName": state.RoleName.ValueString(),
	}
	callParams := config.APICallParams{
		VersionHeader: apiVersionHeader,
		RelativePath:  "/api/atlas/v2/groups/{groupId}/customDBRoles/roles/{roleName}",
		PathParams:    pathParams,
		Method:        "DELETE",
	}
	autogen.HandleDelete(ctx, resp, r.Client, &callParams)
}

func (r *rs) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	idAttributes := []string{"group_id", "role_name"}
	autogen.HandleImport(ctx, idAttributes, req, resp)
}

func readAPICallParams(state *TFModel) *config.APICallParams {
	pathParams := map[string]string{
		"groupId":  state.GroupId.ValueString(),
		"roleName": state.RoleName.ValueString(),
	}
	return &config.APICallParams{
		VersionHeader: apiVersionHeader,
		RelativePath:  "/api/atlas/v2/groups/{groupId}/customDBRoles/roles/{roleName}",
		PathParams:    pathParams,
		Method:        "GET",
	}
}
