// Code generated by terraform-provider-mongodbatlas using `make generate-resource`. DO NOT EDIT.

package searchdeploymentapi

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/mongodb/terraform-provider-mongodbatlas/internal/common/autogen/customtypes"
	"github.com/mongodb/terraform-provider-mongodbatlas/internal/common/customplanmodifier"
)

func ResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"cluster_name": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "Label that identifies the cluster to create Search Nodes for.",
				PlanModifiers:       []planmodifier.String{customplanmodifier.CreateOnly()},
			},
			"encryption_at_rest_provider": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Cloud service provider that manages your customer keys to provide an additional layer of Encryption At Rest for the cluster.",
			},
			"group_id": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.\n\n**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.",
				PlanModifiers:       []planmodifier.String{customplanmodifier.CreateOnly()},
			},
			"id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Unique 24-hexadecimal digit string that identifies the search deployment.",
			},
			"specs": schema.ListNestedAttribute{
				Required:            true,
				MarkdownDescription: "List of settings that configure the Search Nodes for your cluster.\n\n**NOTE**: We accept a single configuration for all nodes currently.",
				CustomType:          customtypes.NewNestedListType[TFSpecsModel](ctx),
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"instance_size": schema.StringAttribute{
							Required:            true,
							MarkdownDescription: "Hardware specification for the Search Node instance sizes.",
						},
						"node_count": schema.Int64Attribute{
							Required:            true,
							MarkdownDescription: "Number of Search Nodes in the cluster.",
						},
					},
				},
			},
			"state_name": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Human-readable label that indicates the current operating condition of this search deployment.",
			},
			"delete_on_create_timeout": schema.BoolAttribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "Indicates whether to delete the resource being created if a timeout is reached when waiting for completion. When set to `true` and timeout occurs, it triggers the deletion and returns immediately without waiting for deletion to complete. When set to `false`, the timeout will not trigger resource deletion. If you suspect a transient error when the value is `true`, wait before retrying to allow resource deletion to finish. Default is `true`.",
				PlanModifiers:       []planmodifier.Bool{customplanmodifier.CreateOnlyBoolWithDefault(true)},
			},
			"timeouts": timeouts.Attributes(ctx, timeouts.Opts{
				Create: true,
				Update: true,
				Delete: true,
			}),
		},
	}
}

type TFModel struct {
	Specs                    customtypes.NestedListValue[TFSpecsModel] `tfsdk:"specs"`
	ClusterName              types.String                              `tfsdk:"cluster_name" autogen:"omitjson"`
	EncryptionAtRestProvider types.String                              `tfsdk:"encryption_at_rest_provider" autogen:"omitjson"`
	GroupId                  types.String                              `tfsdk:"group_id" autogen:"omitjson"`
	Id                       types.String                              `tfsdk:"id" autogen:"omitjson"`
	StateName                types.String                              `tfsdk:"state_name" autogen:"omitjson"`
	Timeouts                 timeouts.Value                            `tfsdk:"timeouts" autogen:"omitjson"`
	DeleteOnCreateTimeout    types.Bool                                `tfsdk:"delete_on_create_timeout" autogen:"omitjson"`
}
type TFSpecsModel struct {
	InstanceSize types.String `tfsdk:"instance_size"`
	NodeCount    types.Int64  `tfsdk:"node_count"`
}
