// Code generated by terraform-provider-mongodbatlas using `make generate-resource`. DO NOT EDIT.

package pushbasedlogexportapi

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/mongodb/terraform-provider-mongodbatlas/internal/common/customplanmodifier"
)

func ResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"bucket_name": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "The name of the bucket to which the agent will send the logs to.",
			},
			"create_date": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Date and time that this feature was enabled on. This parameter expresses its value in the ISO 8601 timestamp format in UTC.",
			},
			"group_id": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.\n\n**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.",
				PlanModifiers:       []planmodifier.String{customplanmodifier.CreateOnly()},
			},
			"iam_role_id": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "ID of the AWS IAM role that will be used to write to the S3 bucket.",
			},
			"prefix_path": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "S3 directory in which vector will write to in order to store the logs. An empty string denotes the root directory.",
			},
			"state": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Describes whether or not the feature is enabled and what status it is in.",
			},
			"delete_on_create_timeout": schema.BoolAttribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "Indicates whether to delete the resource being created if a timeout is reached when waiting for completion. When set to `true` and timeout occurs, it triggers the deletion and returns immediately without waiting for deletion to complete. When set to `false`, the timeout will not trigger resource deletion. If you suspect a transient error when the value is `true`, wait before retrying to allow resource deletion to finish. Default is `true`.",
				PlanModifiers:       []planmodifier.Bool{customplanmodifier.CreateOnlyBoolWithDefault(true)},
			},
			"timeouts": timeouts.Attributes(ctx, timeouts.Opts{
				Create: true,
				Update: true,
				Delete: true,
			}),
		},
	}
}

type TFModel struct {
	BucketName            types.String   `tfsdk:"bucket_name"`
	CreateDate            types.String   `tfsdk:"create_date" autogen:"omitjson"`
	GroupId               types.String   `tfsdk:"group_id" autogen:"omitjson"`
	IamRoleId             types.String   `tfsdk:"iam_role_id"`
	PrefixPath            types.String   `tfsdk:"prefix_path"`
	State                 types.String   `tfsdk:"state" autogen:"omitjson"`
	Timeouts              timeouts.Value `tfsdk:"timeouts" autogen:"omitjson"`
	DeleteOnCreateTimeout types.Bool     `tfsdk:"delete_on_create_timeout" autogen:"omitjson"`
}
