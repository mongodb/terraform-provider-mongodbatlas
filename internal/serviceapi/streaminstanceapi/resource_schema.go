// Code generated by terraform-provider-mongodbatlas using `make generate-resource`. DO NOT EDIT.

package streaminstanceapi

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func ResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"_id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Unique 24-hexadecimal character string that identifies the project.",
			},
			"cloud_provider": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "Label that identifies the cloud service provider where MongoDB Cloud performs stream processing. Currently, this parameter only supports AWS and AZURE.",
			},
			"connections": schema.ListNestedAttribute{
				Computed:            true,
				MarkdownDescription: "List of connections configured in the stream instance.",
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"links": schema.ListNestedAttribute{
							Computed:            true,
							MarkdownDescription: "List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.",
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"href": schema.StringAttribute{
										Computed:            true,
										MarkdownDescription: "Uniform Resource Locator (URL) that points another API resource to which this response has some relationship. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
									},
									"rel": schema.StringAttribute{
										Computed:            true,
										MarkdownDescription: "Uniform Resource Locator (URL) that defines the semantic relationship between this resource and another API resource. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
									},
								},
							},
						},
						"name": schema.StringAttribute{
							Computed:            true,
							MarkdownDescription: "Human-readable label that identifies the stream connection. In the case of the Sample type, this is the name of the sample source.",
						},
						"type": schema.StringAttribute{
							Computed:            true,
							MarkdownDescription: "Type of the connection.",
						},
					},
				},
			},
			"data_process_region": schema.SingleNestedAttribute{
				Optional:            true,
				MarkdownDescription: "Information about the cloud provider region in which MongoDB Cloud processes the stream.",
				Attributes: map[string]schema.Attribute{
					"cloud_provider": schema.StringAttribute{
						Required:            true,
						MarkdownDescription: "Label that identifies the cloud service provider where MongoDB Cloud performs stream processing. Currently, this parameter only supports AWS and AZURE.",
					},
					"links": schema.ListNestedAttribute{
						Computed:            true,
						MarkdownDescription: "List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.",
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"href": schema.StringAttribute{
									Computed:            true,
									MarkdownDescription: "Uniform Resource Locator (URL) that points another API resource to which this response has some relationship. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
								},
								"rel": schema.StringAttribute{
									Computed:            true,
									MarkdownDescription: "Uniform Resource Locator (URL) that defines the semantic relationship between this resource and another API resource. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
								},
							},
						},
					},
					"region": schema.SingleNestedAttribute{
						Required:            true,
						MarkdownDescription: "Name of the cloud provider region hosting Atlas Stream Processing.",
						Attributes:          map[string]schema.Attribute{},
					},
				},
			},
			"group_id": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.\n\n**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.",
			},
			"hostnames": schema.ListAttribute{
				Computed:            true,
				MarkdownDescription: "List that contains the hostnames assigned to the stream instance.",
				ElementType:         types.StringType,
			},
			"links": schema.ListNestedAttribute{
				Computed:            true,
				MarkdownDescription: "List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.",
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"href": schema.StringAttribute{
							Computed:            true,
							MarkdownDescription: "Uniform Resource Locator (URL) that points another API resource to which this response has some relationship. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
						},
						"rel": schema.StringAttribute{
							Computed:            true,
							MarkdownDescription: "Uniform Resource Locator (URL) that defines the semantic relationship between this resource and another API resource. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
						},
					},
				},
			},
			"name": schema.StringAttribute{
				Optional:            true,
				MarkdownDescription: "Human-readable label that identifies the stream instance.",
			},
			"region": schema.SingleNestedAttribute{
				Required:            true,
				MarkdownDescription: "Name of the cloud provider region hosting Atlas Stream Processing.",
				Attributes:          map[string]schema.Attribute{},
			},
			"sample_connections": schema.SingleNestedAttribute{
				Optional:            true,
				MarkdownDescription: "Sample connections to add to SPI.",
				Attributes: map[string]schema.Attribute{
					"links": schema.ListNestedAttribute{
						Computed:            true,
						MarkdownDescription: "List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.",
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"href": schema.StringAttribute{
									Computed:            true,
									MarkdownDescription: "Uniform Resource Locator (URL) that points another API resource to which this response has some relationship. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
								},
								"rel": schema.StringAttribute{
									Computed:            true,
									MarkdownDescription: "Uniform Resource Locator (URL) that defines the semantic relationship between this resource and another API resource. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
								},
							},
						},
					},
					"solar": schema.BoolAttribute{
						Computed:            true,
						Optional:            true,
						MarkdownDescription: "Flag that indicates whether to add a 'sample_stream_solar' connection.",
					},
				},
			},
			"stream_config": schema.SingleNestedAttribute{
				Optional:            true,
				MarkdownDescription: "Configuration options for an Atlas Stream Processing Instance.",
				Attributes: map[string]schema.Attribute{
					"links": schema.ListNestedAttribute{
						Computed:            true,
						MarkdownDescription: "List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.",
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"href": schema.StringAttribute{
									Computed:            true,
									MarkdownDescription: "Uniform Resource Locator (URL) that points another API resource to which this response has some relationship. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
								},
								"rel": schema.StringAttribute{
									Computed:            true,
									MarkdownDescription: "Uniform Resource Locator (URL) that defines the semantic relationship between this resource and another API resource. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
								},
							},
						},
					},
					"tier": schema.StringAttribute{
						Optional:            true,
						MarkdownDescription: "Selected tier for the Stream Instance. Configures Memory / VCPU allowances.",
					},
				},
			},
		},
	}
}

type TFModel struct {
	_Id               types.String `tfsdk:"_id" autogen:"omitjson"`
	CloudProvider     types.String `tfsdk:"cloud_provider"`
	Connections       types.List   `tfsdk:"connections" autogen:"omitjson"`
	DataProcessRegion types.Object `tfsdk:"data_process_region" autogen:"omitjsonupdate"`
	GroupId           types.String `tfsdk:"group_id" autogen:"omitjson"`
	Hostnames         types.List   `tfsdk:"hostnames" autogen:"omitjson"`
	Links             types.List   `tfsdk:"links" autogen:"omitjson"`
	Name              types.String `tfsdk:"name" autogen:"omitjsonupdate"`
	Region            types.Object `tfsdk:"region"`
	SampleConnections types.Object `tfsdk:"sample_connections" autogen:"omitjsonupdate"`
	StreamConfig      types.Object `tfsdk:"stream_config" autogen:"omitjsonupdate"`
}
type TFConnectionsModel struct {
	Links types.List   `tfsdk:"links" autogen:"omitjson"`
	Name  types.String `tfsdk:"name" autogen:"omitjson"`
	Type  types.String `tfsdk:"type" autogen:"omitjson"`
}
type TFConnectionsLinksModel struct {
	Href types.String `tfsdk:"href" autogen:"omitjson"`
	Rel  types.String `tfsdk:"rel" autogen:"omitjson"`
}
type TFDataProcessRegionModel struct {
	CloudProvider types.String `tfsdk:"cloud_provider"`
	Links         types.List   `tfsdk:"links" autogen:"omitjson"`
	Region        types.Object `tfsdk:"region"`
}
type TFDataProcessRegionLinksModel struct {
	Href types.String `tfsdk:"href" autogen:"omitjson"`
	Rel  types.String `tfsdk:"rel" autogen:"omitjson"`
}
type TFDataProcessRegionRegionModel struct {
}
type TFLinksModel struct {
	Href types.String `tfsdk:"href" autogen:"omitjson"`
	Rel  types.String `tfsdk:"rel" autogen:"omitjson"`
}
type TFRegionModel struct {
}
type TFSampleConnectionsModel struct {
	Links types.List `tfsdk:"links" autogen:"omitjson"`
	Solar types.Bool `tfsdk:"solar"`
}
type TFSampleConnectionsLinksModel struct {
	Href types.String `tfsdk:"href" autogen:"omitjson"`
	Rel  types.String `tfsdk:"rel" autogen:"omitjson"`
}
type TFStreamConfigModel struct {
	Links types.List   `tfsdk:"links" autogen:"omitjson"`
	Tier  types.String `tfsdk:"tier"`
}
type TFStreamConfigLinksModel struct {
	Href types.String `tfsdk:"href" autogen:"omitjson"`
	Rel  types.String `tfsdk:"rel" autogen:"omitjson"`
}
