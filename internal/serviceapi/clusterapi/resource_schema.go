// Code generated by terraform-provider-mongodbatlas using `make generate-resource`. DO NOT EDIT.

package clusterapi

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func ResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"accept_data_risks_and_force_replica_set_reconfig": schema.StringAttribute{
				Optional:            true,
				MarkdownDescription: "If reconfiguration is necessary to regain a primary due to a regional outage, submit this field alongside your topology reconfiguration to request a new regional outage resistant topology. Forced reconfigurations during an outage of the majority of electable nodes carry a risk of data loss if replicated writes (even majority committed writes) have not been replicated to the new primary node. MongoDB Atlas docs contain more information. To proceed with an operation which carries that risk, set **acceptDataRisksAndForceReplicaSetReconfig** to the current date. This parameter expresses its value in the ISO 8601 timestamp format in UTC.",
			},
			"advanced_configuration": schema.SingleNestedAttribute{
				Optional:            true,
				MarkdownDescription: "Group of settings that configures a subset of the advanced configuration details.",
				Attributes: map[string]schema.Attribute{
					"custom_openssl_cipher_config_tls12": schema.ListAttribute{
						Optional:            true,
						MarkdownDescription: "The custom OpenSSL cipher suite list for TLS 1.2. This field is only valid when `tlsCipherConfigMode` is set to `CUSTOM`.",
						ElementType:         types.StringType,
					},
					"minimum_enabled_tls_protocol": schema.StringAttribute{
						Optional:            true,
						MarkdownDescription: "Minimum Transport Layer Security (TLS) version that the cluster accepts for incoming connections. Clusters using TLS 1.0 or 1.1 should consider setting TLS 1.2 as the minimum TLS protocol version.",
					},
					"tls_cipher_config_mode": schema.StringAttribute{
						Optional:            true,
						MarkdownDescription: "The TLS cipher suite configuration mode. The default mode uses the default cipher suites. The custom mode allows you to specify custom cipher suites for both TLS 1.2 and TLS 1.3.",
					},
				},
			},
			"auto_scaling": schema.SingleNestedAttribute{
				Optional:            true,
				MarkdownDescription: "Range of instance sizes to which your cluster can scale.",
				Attributes: map[string]schema.Attribute{
					"compute": schema.SingleNestedAttribute{
						Optional:            true,
						MarkdownDescription: "Collection of settings that configures how a cluster might scale its cluster tier and whether the cluster can scale down. Cluster tier auto-scaling is unavailable for clusters using Low CPU or NVME storage classes.",
						Attributes: map[string]schema.Attribute{
							"enabled": schema.BoolAttribute{
								Computed:            true,
								Optional:            true,
								MarkdownDescription: "Flag that indicates whether instance size reactive auto-scaling is enabled.\n\n- Set to `true` to enable instance size reactive auto-scaling. If enabled, you must specify a value for **providerSettings.autoScaling.compute.maxInstanceSize**.\n- Set to `false` to disable instance size reactive auto-scaling.",
							},
							"predictive_enabled": schema.BoolAttribute{
								Computed:            true,
								Optional:            true,
								MarkdownDescription: "Flag that indicates whether predictive instance size auto-scaling is enabled.\n\n- Set to `true` to enable predictive instance size auto-scaling. MongoDB Cloud requires **autoScaling.compute.enabled** is `true` in order to enable this feature.\n- Set to `false` to disable predictive instance size auto-scaling.",
							},
							"scale_down_enabled": schema.BoolAttribute{
								Computed:            true,
								Optional:            true,
								MarkdownDescription: "Flag that indicates whether the cluster tier can scale down via reactive auto-scaling. This is required if **autoScaling.compute.enabled** is `true`. If you enable this option, specify a value for **providerSettings.autoScaling.compute.minInstanceSize**.",
							},
						},
					},
					"disk_gbenabled": schema.BoolAttribute{
						Computed:            true,
						Optional:            true,
						MarkdownDescription: "Flag that indicates whether someone enabled disk auto-scaling for this cluster.",
					},
				},
			},
			"backup_enabled": schema.BoolAttribute{
				Optional:            true,
				MarkdownDescription: "Flag that indicates whether the cluster can perform backups. If set to `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters. Backup uses Cloud Backups for dedicated clusters and Shared Cluster Backups for tenant clusters. If set to `false`, the cluster doesn't use MongoDB Cloud backups.",
			},
			"bi_connector": schema.SingleNestedAttribute{
				Optional:            true,
				MarkdownDescription: "Settings needed to configure the MongoDB Connector for Business Intelligence for this cluster.",
				Attributes: map[string]schema.Attribute{
					"enabled": schema.BoolAttribute{
						Optional:            true,
						MarkdownDescription: "Flag that indicates whether MongoDB Connector for Business Intelligence is enabled on the specified cluster.",
					},
					"read_preference": schema.StringAttribute{
						Optional:            true,
						MarkdownDescription: "Data source node designated for the MongoDB Connector for Business Intelligence on MongoDB Cloud. The MongoDB Connector for Business Intelligence on MongoDB Cloud reads data from the primary, secondary, or analytics node based on your read preferences. Defaults to `ANALYTICS` node, or `SECONDARY` if there are no `ANALYTICS` nodes.",
					},
				},
			},
			"cluster_type": schema.StringAttribute{
				Optional:            true,
				MarkdownDescription: "Configuration of nodes that comprise the cluster.",
			},
			"config_server_management_mode": schema.StringAttribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "Config Server Management Mode for creating or updating a sharded cluster.\n\nWhen configured as ATLAS_MANAGED, atlas may automatically switch the cluster's config server type for optimal performance and savings.\n\nWhen configured as FIXED_TO_DEDICATED, the cluster will always use a dedicated config server.",
			},
			"config_server_type": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Describes a sharded cluster's config server type.",
			},
			"connection_strings": schema.SingleNestedAttribute{
				Computed:            true,
				MarkdownDescription: "Collection of Uniform Resource Locators that point to the MongoDB database.",
				Attributes: map[string]schema.Attribute{
					"aws_private_link": schema.MapAttribute{
						Computed:            true,
						MarkdownDescription: "Private endpoint-aware connection strings that use AWS-hosted clusters with Amazon Web Services (AWS) PrivateLink. Each key identifies an Amazon Web Services (AWS) interface endpoint. Each value identifies the related `mongodb://` connection string that you use to connect to MongoDB Cloud through the interface endpoint that the key names.",
						ElementType:         types.StringType,
					},
					"aws_private_link_srv": schema.MapAttribute{
						Computed:            true,
						MarkdownDescription: "Private endpoint-aware connection strings that use AWS-hosted clusters with Amazon Web Services (AWS) PrivateLink. Each key identifies an Amazon Web Services (AWS) interface endpoint. Each value identifies the related `mongodb://` connection string that you use to connect to Atlas through the interface endpoint that the key names. If the cluster uses an optimized connection string, `awsPrivateLinkSrv` contains the optimized connection string. If the cluster has the non-optimized (legacy) connection string, `awsPrivateLinkSrv` contains the non-optimized connection string even if an optimized connection string is also present.",
						ElementType:         types.StringType,
					},
					"private": schema.StringAttribute{
						Computed:            true,
						MarkdownDescription: "Network peering connection strings for each interface Virtual Private Cloud (VPC) endpoint that you configured to connect to this cluster. This connection string uses the `mongodb+srv://` protocol. The resource returns this parameter once someone creates a network peering connection to this cluster. This protocol tells the application to look up the host seed list in the Domain Name System (DNS). This list synchronizes with the nodes in a cluster. If the connection string uses this Uniform Resource Identifier (URI) format, you don't need to append the seed list or change the URI if the nodes change. Use this URI format if your driver supports it. If it doesn't, use connectionStrings.private. For Amazon Web Services (AWS) clusters, this resource returns this parameter only if you enable custom DNS.",
					},
					"private_endpoint": schema.ListNestedAttribute{
						Computed:            true,
						MarkdownDescription: "List of private endpoint-aware connection strings that you can use to connect to this cluster through a private endpoint. This parameter returns only if you deployed a private endpoint to all regions to which you deployed this clusters' nodes.",
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"connection_string": schema.StringAttribute{
									Computed:            true,
									MarkdownDescription: "Private endpoint-aware connection string that uses the `mongodb://` protocol to connect to MongoDB Cloud through a private endpoint.",
								},
								"endpoints": schema.ListNestedAttribute{
									Computed:            true,
									MarkdownDescription: "List that contains the private endpoints through which you connect to MongoDB Cloud when you use **connectionStrings.privateEndpoint[n].connectionString** or **connectionStrings.privateEndpoint[n].srvConnectionString**.",
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"endpoint_id": schema.StringAttribute{
												Computed:            true,
												MarkdownDescription: "Unique string that the cloud provider uses to identify the private endpoint.",
											},
											"provider_name": schema.StringAttribute{
												Computed:            true,
												MarkdownDescription: "Cloud provider in which MongoDB Cloud deploys the private endpoint.",
											},
											"region": schema.StringAttribute{
												Computed:            true,
												MarkdownDescription: "Region where the private endpoint is deployed.",
											},
										},
									},
								},
								"srv_connection_string": schema.StringAttribute{
									Computed:            true,
									MarkdownDescription: "Private endpoint-aware connection string that uses the `mongodb+srv://` protocol to connect to MongoDB Cloud through a private endpoint. The `mongodb+srv` protocol tells the driver to look up the seed list of hosts in the Domain Name System (DNS). This list synchronizes with the nodes in a cluster. If the connection string uses this Uniform Resource Identifier (URI) format, you don't need to append the seed list or change the Uniform Resource Identifier (URI) if the nodes change. Use this Uniform Resource Identifier (URI) format if your application supports it. If it doesn't, use connectionStrings.privateEndpoint[n].connectionString.",
								},
								"srv_shard_optimized_connection_string": schema.StringAttribute{
									Computed:            true,
									MarkdownDescription: "Private endpoint-aware connection string optimized for sharded clusters that uses the `mongodb+srv://` protocol to connect to MongoDB Cloud through a private endpoint. If the connection string uses this Uniform Resource Identifier (URI) format, you don't need to change the Uniform Resource Identifier (URI) if the nodes change. Use this Uniform Resource Identifier (URI) format if your application and Atlas cluster supports it. If it doesn't, use and consult the documentation for connectionStrings.privateEndpoint[n].srvConnectionString.",
								},
								"type": schema.StringAttribute{
									Computed:            true,
									MarkdownDescription: "MongoDB process type to which your application connects. Use `MONGOD` for replica sets and `MONGOS` for sharded clusters.",
								},
							},
						},
					},
					"private_srv": schema.StringAttribute{
						Computed:            true,
						MarkdownDescription: "Network peering connection strings for each interface Virtual Private Cloud (VPC) endpoint that you configured to connect to this cluster. This connection string uses the `mongodb+srv://` protocol. The resource returns this parameter when someone creates a network peering connection to this cluster. This protocol tells the application to look up the host seed list in the Domain Name System (DNS). This list synchronizes with the nodes in a cluster. If the connection string uses this Uniform Resource Identifier (URI) format, you don't need to append the seed list or change the Uniform Resource Identifier (URI) if the nodes change. Use this Uniform Resource Identifier (URI) format if your driver supports it. If it doesn't, use `connectionStrings.private`. For Amazon Web Services (AWS) clusters, this parameter returns only if you [enable custom DNS](https://docs.atlas.mongodb.com/reference/api/aws-custom-dns-update/).",
					},
					"standard": schema.StringAttribute{
						Computed:            true,
						MarkdownDescription: "Public connection string that you can use to connect to this cluster. This connection string uses the `mongodb://` protocol.",
					},
					"standard_srv": schema.StringAttribute{
						Computed:            true,
						MarkdownDescription: "Public connection string that you can use to connect to this cluster. This connection string uses the `mongodb+srv://` protocol.",
					},
				},
			},
			"create_date": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Date and time when MongoDB Cloud created this serverless instance. MongoDB Cloud represents this timestamp in ISO 8601 format in UTC.",
			},
			"disk_size_gb": schema.Float64Attribute{
				Optional:            true,
				MarkdownDescription: "Storage capacity of instance data volumes expressed in gigabytes. Increase this number to add capacity.\n\n This value is not configurable on M0/M2/M5 clusters.\n\n MongoDB Cloud requires this parameter if you set **replicationSpecs**.\n\n If you specify a disk size below the minimum (10 GB), this parameter defaults to the minimum disk size value. \n\n Storage charge calculations depend on whether you choose the default value or a custom value.\n\n The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require more storage space, consider upgrading your cluster to a higher tier.",
			},
			"disk_warming_mode": schema.StringAttribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "Disk warming mode selection.",
			},
			"encryption_at_rest_provider": schema.StringAttribute{
				Optional:            true,
				MarkdownDescription: "Cloud service provider that manages your customer keys to provide an additional layer of encryption at rest for the cluster. To enable customer key management for encryption at rest, the cluster **replicationSpecs[n].regionConfigs[m].{type}Specs.instanceSize** setting must be `M10` or higher and `\"backupEnabled\" : false` or omitted entirely.",
			},
			"feature_compatibility_version": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Feature compatibility version of the cluster.",
			},
			"feature_compatibility_version_expiration_date": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Feature compatibility version expiration date. This parameter expresses its value in the ISO 8601 timestamp format in UTC.",
			},
			"global_cluster_self_managed_sharding": schema.BoolAttribute{
				Optional:            true,
				MarkdownDescription: "Set this field to configure the Sharding Management Mode when creating a new Global Cluster.\n\nWhen set to false, the management mode is set to Atlas-Managed Sharding. This mode fully manages the sharding of your Global Cluster and is built to provide a seamless deployment experience.\n\nWhen set to true, the management mode is set to Self-Managed Sharding. This mode leaves the management of shards in your hands and is built to provide an advanced and flexible deployment experience.\n\nThis setting cannot be changed once the cluster is deployed.",
			},
			"group_id": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.\n\n**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Unique 24-hexadecimal digit string that identifies the cluster.",
			},
			"labels": schema.ListNestedAttribute{
				Optional:            true,
				MarkdownDescription: "Collection of key-value pairs between 1 to 255 characters in length that tag and categorize the cluster. The MongoDB Cloud console doesn't display your labels.\n\nCluster labels are deprecated and will be removed in a future release. We strongly recommend that you use Resource Tags instead.",
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key": schema.StringAttribute{
							Optional:            true,
							MarkdownDescription: "Key applied to tag and categorize this component.",
						},
						"value": schema.StringAttribute{
							Optional:            true,
							MarkdownDescription: "Value set to the Key applied to tag and categorize this component.",
						},
					},
				},
			},
			"links": schema.ListNestedAttribute{
				Computed:            true,
				MarkdownDescription: "List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.",
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"href": schema.StringAttribute{
							Computed:            true,
							MarkdownDescription: "Uniform Resource Locator (URL) that points another API resource to which this response has some relationship. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
						},
						"rel": schema.StringAttribute{
							Computed:            true,
							MarkdownDescription: "Uniform Resource Locator (URL) that defines the semantic relationship between this resource and another API resource. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
						},
					},
				},
			},
			"mongo_dbemployee_access_grant": schema.SingleNestedAttribute{
				Optional:            true,
				MarkdownDescription: "MongoDB employee granted access level and expiration for a cluster.",
				Attributes: map[string]schema.Attribute{
					"expiration_time": schema.StringAttribute{
						Required:            true,
						MarkdownDescription: "Expiration date for the employee access grant. This parameter expresses its value in the ISO 8601 timestamp format in UTC.",
					},
					"grant_type": schema.StringAttribute{
						Required:            true,
						MarkdownDescription: "Level of access to grant to MongoDB Employees.",
					},
					"links": schema.ListNestedAttribute{
						Computed:            true,
						MarkdownDescription: "List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.",
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"href": schema.StringAttribute{
									Computed:            true,
									MarkdownDescription: "Uniform Resource Locator (URL) that points another API resource to which this response has some relationship. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
								},
								"rel": schema.StringAttribute{
									Computed:            true,
									MarkdownDescription: "Uniform Resource Locator (URL) that defines the semantic relationship between this resource and another API resource. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
								},
							},
						},
					},
				},
			},
			"mongo_dbmajor_version": schema.StringAttribute{
				Optional:            true,
				MarkdownDescription: "MongoDB major version of the cluster.\n\nOn creation: Choose from the available versions of MongoDB, or leave unspecified for the current recommended default in the MongoDB Cloud platform. The recommended version is a recent Long Term Support version. The default is not guaranteed to be the most recently released version throughout the entire release cycle. For versions available in a specific project, see the linked documentation or use the API endpoint for [project LTS versions endpoint](#tag/Projects/operation/getProjectLTSVersions).\n\n On update: Increase version only by 1 major version at a time. If the cluster is pinned to a MongoDB feature compatibility version exactly one major version below the current MongoDB version, the MongoDB version can be downgraded to the previous major version.",
			},
			"mongo_dbversion": schema.StringAttribute{
				Optional:            true,
				MarkdownDescription: "Version of MongoDB that the cluster runs.",
			},
			"mongo_uri": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Base connection string that you can use to connect to the cluster. MongoDB Cloud displays the string only after the cluster starts, not while it builds the cluster.",
			},
			"mongo_uriupdated": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Date and time when someone last updated the connection string. MongoDB Cloud represents this timestamp in ISO 8601 format in UTC.",
			},
			"mongo_uriwith_options": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Connection string that you can use to connect to the cluster including the `replicaSet`, `ssl`, and `authSource` query parameters with values appropriate for the cluster. You may need to add MongoDB database users. The response returns this parameter once the cluster can receive requests, not while it builds the cluster.",
			},
			"name": schema.StringAttribute{
				Optional:            true,
				MarkdownDescription: "Human-readable label that identifies the cluster.",
			},
			"num_shards": schema.Int64Attribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "Number of shards up to 50 to deploy for a sharded cluster. The resource returns `1` to indicate a replica set and values of `2` and higher to indicate a sharded cluster. The returned value equals the number of shards in the cluster.",
			},
			"paused": schema.BoolAttribute{
				Optional:            true,
				MarkdownDescription: "Flag that indicates whether the cluster is paused.",
			},
			"pit_enabled": schema.BoolAttribute{
				Optional:            true,
				MarkdownDescription: "Flag that indicates whether the cluster uses continuous cloud backups.",
			},
			"provider_backup_enabled": schema.BoolAttribute{
				Optional:            true,
				MarkdownDescription: "Flag that indicates whether the M10 or higher cluster can perform Cloud Backups. If set to `true`, the cluster can perform backups. If this and **backupEnabled** are set to `false`, the cluster doesn't use MongoDB Cloud backups.",
			},
			"provider_settings": schema.SingleNestedAttribute{
				Optional:            true,
				MarkdownDescription: "Group of cloud provider settings that configure the provisioned MongoDB hosts.",
				Attributes: map[string]schema.Attribute{
					"provider_name": schema.StringAttribute{
						Required: true,
					},
				},
			},
			"replica_set_scaling_strategy": schema.StringAttribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "Set this field to configure the replica set scaling mode for your cluster.\n\nBy default, Atlas scales under WORKLOAD_TYPE. This mode allows Atlas to scale your analytics nodes in parallel to your operational nodes.\n\nWhen configured as SEQUENTIAL, Atlas scales all nodes sequentially. This mode is intended for steady-state workloads and applications performing latency-sensitive secondary reads.\n\nWhen configured as NODE_TYPE, Atlas scales your electable nodes in parallel with your read-only and analytics nodes. This mode is intended for large, dynamic workloads requiring frequent and timely cluster tier scaling. This is the fastest scaling strategy, but it might impact latency of workloads when performing extensive secondary reads.",
			},
			"replication_factor": schema.Int64Attribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "Number of members that belong to the replica set. Each member retains a copy of your databases, providing high availability and data redundancy. Use **replicationSpecs** instead.",
			},
			"replication_spec": schema.MapNestedAttribute{
				Optional:            true,
				MarkdownDescription: "Physical location where MongoDB Cloud provisions cluster nodes.",
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"analytics_nodes": schema.Int64Attribute{
							Optional:            true,
							MarkdownDescription: "Number of analytics nodes in the region. Analytics nodes handle analytic data such as reporting queries from MongoDB Connector for Business Intelligence on MongoDB Cloud. Analytics nodes are read-only, and can never become the primary. Use **replicationSpecs[n].{region}.analyticsNodes** instead.",
						},
						"electable_nodes": schema.Int64Attribute{
							Optional:            true,
							MarkdownDescription: "Number of electable nodes to deploy in the specified region. Electable nodes can become the primary and can facilitate local reads. Use **replicationSpecs[n].{region}.electableNodes** instead.",
						},
						"priority": schema.Int64Attribute{
							Optional:            true,
							MarkdownDescription: "Number that indicates the election priority of the region. To identify the Preferred Region of the cluster, set this parameter to `7`. The primary node runs in the **Preferred Region**. To identify a read-only region, set this parameter to `0`.",
						},
						"read_only_nodes": schema.Int64Attribute{
							Optional:            true,
							MarkdownDescription: "Number of read-only nodes in the region. Read-only nodes can never become the primary member, but can facilitate local reads. Use **replicationSpecs[n].{region}.readOnlyNodes** instead.",
						},
					},
				},
			},
			"replication_specs": schema.ListNestedAttribute{
				Optional:            true,
				MarkdownDescription: "List of settings that configure your cluster regions.\n\n- For Global Clusters, each object in the array represents one zone where MongoDB Cloud deploys your clusters nodes.\n- For non-Global sharded clusters and replica sets, the single object represents where MongoDB Cloud deploys your clusters nodes.",
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Optional:            true,
							MarkdownDescription: "Unique 24-hexadecimal digit string that identifies the replication object for a zone in a Global Cluster.\n\n- If you include existing zones in the request, you must specify this parameter.\n\n- If you add a new zone to an existing Global Cluster, you may specify this parameter. The request deletes any existing zones in a Global Cluster that you exclude from the request.",
						},
						"num_shards": schema.Int64Attribute{
							Computed:            true,
							Optional:            true,
							MarkdownDescription: "Positive integer that specifies the number of shards to deploy in each specified zone If you set this value to `1` and **clusterType** is `SHARDED`, MongoDB Cloud deploys a single-shard sharded cluster. Don't create a sharded cluster with a single shard for production environments. Single-shard sharded clusters don't provide the same benefits as multi-shard configurations.\n\n If you are upgrading a replica set to a sharded cluster, you cannot increase the number of shards in the same update request.  You should wait until after the cluster has completed upgrading to sharded and you have reconnected all application clients to the MongoDB router before adding additional shards. Otherwise, your data might become inconsistent once MongoDB Cloud begins distributing data across shards.",
						},
						"regions_config": schema.MapNestedAttribute{
							Optional:            true,
							MarkdownDescription: "Physical location where MongoDB Cloud provisions cluster nodes.",
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"analytics_nodes": schema.Int64Attribute{
										Optional:            true,
										MarkdownDescription: "Number of analytics nodes in the region. Analytics nodes handle analytic data such as reporting queries from MongoDB Connector for Business Intelligence on MongoDB Cloud. Analytics nodes are read-only, and can never become the primary. Use **replicationSpecs[n].{region}.analyticsNodes** instead.",
									},
									"electable_nodes": schema.Int64Attribute{
										Optional:            true,
										MarkdownDescription: "Number of electable nodes to deploy in the specified region. Electable nodes can become the primary and can facilitate local reads. Use **replicationSpecs[n].{region}.electableNodes** instead.",
									},
									"priority": schema.Int64Attribute{
										Optional:            true,
										MarkdownDescription: "Number that indicates the election priority of the region. To identify the Preferred Region of the cluster, set this parameter to `7`. The primary node runs in the **Preferred Region**. To identify a read-only region, set this parameter to `0`.",
									},
									"read_only_nodes": schema.Int64Attribute{
										Optional:            true,
										MarkdownDescription: "Number of read-only nodes in the region. Read-only nodes can never become the primary member, but can facilitate local reads. Use **replicationSpecs[n].{region}.readOnlyNodes** instead.",
									},
								},
							},
						},
						"zone_name": schema.StringAttribute{
							Optional:            true,
							MarkdownDescription: "Human-readable label that identifies the zone in a Global Cluster. Provide this value only if **clusterType** is `GEOSHARDED`.",
						},
					},
				},
			},
			"root_cert_type": schema.StringAttribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "Root Certificate Authority that MongoDB Atlas clusters uses. MongoDB Cloud supports Internet Security Research Group.",
			},
			"srv_address": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Connection string that you can use to connect to the cluster. The `+srv` modifier forces the connection to use Transport Layer Security (TLS). The `mongoURI` parameter lists additional options.",
			},
			"state_name": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Human-readable label that indicates the current operating condition of the cluster.",
			},
			"tags": schema.ListNestedAttribute{
				Optional:            true,
				MarkdownDescription: "List that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster.",
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key": schema.StringAttribute{
							Required:            true,
							MarkdownDescription: "Constant that defines the set of the tag. For example, `environment` in the `environment : production` tag.",
						},
						"value": schema.StringAttribute{
							Required:            true,
							MarkdownDescription: "Variable that belongs to the set of the tag. For example, `production` in the `environment : production` tag.",
						},
					},
				},
			},
			"termination_protection_enabled": schema.BoolAttribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "Flag that indicates whether termination protection is enabled on the cluster. If set to `true`, MongoDB Cloud won't delete the cluster. If set to `false`, MongoDB Cloud will delete the cluster.",
			},
			"version_release_system": schema.StringAttribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "Method by which the cluster maintains the MongoDB versions. If value is `CONTINUOUS`, you must not specify **mongoDBMajorVersion**.",
			},
		},
	}
}

type TFModel struct {
	AcceptDataRisksAndForceReplicaSetReconfig types.String  `tfsdk:"accept_data_risks_and_force_replica_set_reconfig"`
	AdvancedConfiguration                     types.Object  `tfsdk:"advanced_configuration"`
	AutoScaling                               types.Object  `tfsdk:"auto_scaling"`
	BackupEnabled                             types.Bool    `tfsdk:"backup_enabled"`
	BiConnector                               types.Object  `tfsdk:"bi_connector"`
	ClusterType                               types.String  `tfsdk:"cluster_type"`
	ConfigServerManagementMode                types.String  `tfsdk:"config_server_management_mode"`
	ConfigServerType                          types.String  `tfsdk:"config_server_type" autogen:"omitjson"`
	ConnectionStrings                         types.Object  `tfsdk:"connection_strings" autogen:"omitjson"`
	CreateDate                                types.String  `tfsdk:"create_date" autogen:"omitjson"`
	DiskSizeGb                                types.Float64 `tfsdk:"disk_size_gb"`
	DiskWarmingMode                           types.String  `tfsdk:"disk_warming_mode"`
	EncryptionAtRestProvider                  types.String  `tfsdk:"encryption_at_rest_provider"`
	FeatureCompatibilityVersion               types.String  `tfsdk:"feature_compatibility_version" autogen:"omitjson"`
	FeatureCompatibilityVersionExpirationDate types.String  `tfsdk:"feature_compatibility_version_expiration_date" autogen:"omitjson"`
	GlobalClusterSelfManagedSharding          types.Bool    `tfsdk:"global_cluster_self_managed_sharding"`
	GroupId                                   types.String  `tfsdk:"group_id" autogen:"omitjson"`
	Id                                        types.String  `tfsdk:"id" autogen:"omitjson"`
	Labels                                    types.List    `tfsdk:"labels"`
	Links                                     types.List    `tfsdk:"links" autogen:"omitjson"`
	MongoDbemployeeAccessGrant                types.Object  `tfsdk:"mongo_dbemployee_access_grant"`
	MongoDbmajorVersion                       types.String  `tfsdk:"mongo_dbmajor_version"`
	MongoDbversion                            types.String  `tfsdk:"mongo_dbversion"`
	MongoUri                                  types.String  `tfsdk:"mongo_uri" autogen:"omitjson"`
	MongoUriupdated                           types.String  `tfsdk:"mongo_uriupdated" autogen:"omitjson"`
	MongoUriwithOptions                       types.String  `tfsdk:"mongo_uriwith_options" autogen:"omitjson"`
	Name                                      types.String  `tfsdk:"name"`
	NumShards                                 types.Int64   `tfsdk:"num_shards"`
	Paused                                    types.Bool    `tfsdk:"paused"`
	PitEnabled                                types.Bool    `tfsdk:"pit_enabled"`
	ProviderBackupEnabled                     types.Bool    `tfsdk:"provider_backup_enabled"`
	ProviderSettings                          types.Object  `tfsdk:"provider_settings"`
	ReplicaSetScalingStrategy                 types.String  `tfsdk:"replica_set_scaling_strategy"`
	ReplicationFactor                         types.Int64   `tfsdk:"replication_factor"`
	ReplicationSpec                           types.Map     `tfsdk:"replication_spec"`
	ReplicationSpecs                          types.List    `tfsdk:"replication_specs"`
	RootCertType                              types.String  `tfsdk:"root_cert_type"`
	SrvAddress                                types.String  `tfsdk:"srv_address" autogen:"omitjson"`
	StateName                                 types.String  `tfsdk:"state_name" autogen:"omitjson"`
	Tags                                      types.List    `tfsdk:"tags"`
	TerminationProtectionEnabled              types.Bool    `tfsdk:"termination_protection_enabled"`
	VersionReleaseSystem                      types.String  `tfsdk:"version_release_system"`
}
type TFAdvancedConfigurationModel struct {
	CustomOpensslCipherConfigTls12 types.List   `tfsdk:"custom_openssl_cipher_config_tls12"`
	MinimumEnabledTlsProtocol      types.String `tfsdk:"minimum_enabled_tls_protocol"`
	TlsCipherConfigMode            types.String `tfsdk:"tls_cipher_config_mode"`
}
type TFAutoScalingModel struct {
	Compute       types.Object `tfsdk:"compute"`
	DiskGbenabled types.Bool   `tfsdk:"disk_gbenabled"`
}
type TFAutoScalingComputeModel struct {
	Enabled           types.Bool `tfsdk:"enabled"`
	PredictiveEnabled types.Bool `tfsdk:"predictive_enabled"`
	ScaleDownEnabled  types.Bool `tfsdk:"scale_down_enabled"`
}
type TFBiConnectorModel struct {
	Enabled        types.Bool   `tfsdk:"enabled"`
	ReadPreference types.String `tfsdk:"read_preference"`
}
type TFConnectionStringsModel struct {
	AwsPrivateLink    types.Map    `tfsdk:"aws_private_link" autogen:"omitjson"`
	AwsPrivateLinkSrv types.Map    `tfsdk:"aws_private_link_srv" autogen:"omitjson"`
	Private           types.String `tfsdk:"private" autogen:"omitjson"`
	PrivateEndpoint   types.List   `tfsdk:"private_endpoint" autogen:"omitjson"`
	PrivateSrv        types.String `tfsdk:"private_srv" autogen:"omitjson"`
	Standard          types.String `tfsdk:"standard" autogen:"omitjson"`
	StandardSrv       types.String `tfsdk:"standard_srv" autogen:"omitjson"`
}
type TFConnectionStringsPrivateEndpointModel struct {
	ConnectionString                  types.String `tfsdk:"connection_string" autogen:"omitjson"`
	Endpoints                         types.List   `tfsdk:"endpoints" autogen:"omitjson"`
	SrvConnectionString               types.String `tfsdk:"srv_connection_string" autogen:"omitjson"`
	SrvShardOptimizedConnectionString types.String `tfsdk:"srv_shard_optimized_connection_string" autogen:"omitjson"`
	Type                              types.String `tfsdk:"type" autogen:"omitjson"`
}
type TFConnectionStringsPrivateEndpointEndpointsModel struct {
	EndpointId   types.String `tfsdk:"endpoint_id" autogen:"omitjson"`
	ProviderName types.String `tfsdk:"provider_name" autogen:"omitjson"`
	Region       types.String `tfsdk:"region" autogen:"omitjson"`
}
type TFLabelsModel struct {
	Key   types.String `tfsdk:"key"`
	Value types.String `tfsdk:"value"`
}
type TFLinksModel struct {
	Href types.String `tfsdk:"href" autogen:"omitjson"`
	Rel  types.String `tfsdk:"rel" autogen:"omitjson"`
}
type TFMongoDbemployeeAccessGrantModel struct {
	ExpirationTime types.String `tfsdk:"expiration_time"`
	GrantType      types.String `tfsdk:"grant_type"`
	Links          types.List   `tfsdk:"links" autogen:"omitjson"`
}
type TFMongoDbemployeeAccessGrantLinksModel struct {
	Href types.String `tfsdk:"href" autogen:"omitjson"`
	Rel  types.String `tfsdk:"rel" autogen:"omitjson"`
}
type TFProviderSettingsModel struct {
	ProviderName types.String `tfsdk:"provider_name"`
}
type TFReplicationSpecModel struct {
	AnalyticsNodes types.Int64 `tfsdk:"analytics_nodes"`
	ElectableNodes types.Int64 `tfsdk:"electable_nodes"`
	Priority       types.Int64 `tfsdk:"priority"`
	ReadOnlyNodes  types.Int64 `tfsdk:"read_only_nodes"`
}
type TFReplicationSpecsModel struct {
	Id            types.String `tfsdk:"id"`
	NumShards     types.Int64  `tfsdk:"num_shards"`
	RegionsConfig types.Map    `tfsdk:"regions_config"`
	ZoneName      types.String `tfsdk:"zone_name"`
}
type TFReplicationSpecsRegionsConfigModel struct {
	AnalyticsNodes types.Int64 `tfsdk:"analytics_nodes"`
	ElectableNodes types.Int64 `tfsdk:"electable_nodes"`
	Priority       types.Int64 `tfsdk:"priority"`
	ReadOnlyNodes  types.Int64 `tfsdk:"read_only_nodes"`
}
type TFTagsModel struct {
	Key   types.String `tfsdk:"key"`
	Value types.String `tfsdk:"value"`
}
