// Code generated by terraform-provider-mongodbatlas using `make generate-resource`. DO NOT EDIT.

package streamconnectionapi

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func ResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"group_id": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.\n\n**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.",
			},
			"links": schema.ListNestedAttribute{
				Computed:            true,
				MarkdownDescription: "List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.",
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"href": schema.StringAttribute{
							Computed:            true,
							MarkdownDescription: "Uniform Resource Locator (URL) that points another API resource to which this response has some relationship. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
						},
						"rel": schema.StringAttribute{
							Computed:            true,
							MarkdownDescription: "Uniform Resource Locator (URL) that defines the semantic relationship between this resource and another API resource. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
						},
					},
				},
			},
			"name": schema.StringAttribute{
				Optional:            true,
				MarkdownDescription: "Human-readable label that identifies the stream connection. In the case of the Sample type, this is the name of the sample source.",
			},
			"tenant_name": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "Human-readable label that identifies the stream instance.",
			},
			"type": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Type of the connection.",
			},
			"type_awslambda": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"aws": schema.SingleNestedAttribute{
						Optional:            true,
						MarkdownDescription: "AWS configurations for AWS-based connection types.",
						Attributes: map[string]schema.Attribute{
							"links": schema.ListNestedAttribute{
								Computed:            true,
								MarkdownDescription: "List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.",
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"href": schema.StringAttribute{
											Computed:            true,
											MarkdownDescription: "Uniform Resource Locator (URL) that points another API resource to which this response has some relationship. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
										},
										"rel": schema.StringAttribute{
											Computed:            true,
											MarkdownDescription: "Uniform Resource Locator (URL) that defines the semantic relationship between this resource and another API resource. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
										},
									},
								},
							},
							"role_arn": schema.StringAttribute{
								Optional:            true,
								MarkdownDescription: "Amazon Resource Name (ARN) that identifies the Amazon Web Services (AWS) Identity and Access Management (IAM) role that MongoDB Cloud assumes when it accesses resources in your AWS account.",
							},
							"test_bucket": schema.StringAttribute{
								Optional:            true,
								MarkdownDescription: "The name of an S3 bucket used to check authorization of the passed-in IAM role ARN.",
							},
						},
					},
				},
			},
			"type_cluster": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"cluster_name": schema.StringAttribute{
						Optional:            true,
						MarkdownDescription: "Name of the cluster configured for this connection.",
					},
					"db_role_to_execute": schema.SingleNestedAttribute{
						Optional:            true,
						MarkdownDescription: "The name of a Built in or Custom DB Role to connect to an Atlas Cluster.",
						Attributes: map[string]schema.Attribute{
							"links": schema.ListNestedAttribute{
								Computed:            true,
								MarkdownDescription: "List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.",
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"href": schema.StringAttribute{
											Computed:            true,
											MarkdownDescription: "Uniform Resource Locator (URL) that points another API resource to which this response has some relationship. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
										},
										"rel": schema.StringAttribute{
											Computed:            true,
											MarkdownDescription: "Uniform Resource Locator (URL) that defines the semantic relationship between this resource and another API resource. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
										},
									},
								},
							},
							"role": schema.StringAttribute{
								Optional:            true,
								MarkdownDescription: "The name of the role to use. Can be a built in role or a custom role.",
							},
							"type": schema.StringAttribute{
								Optional:            true,
								MarkdownDescription: "Type of the DB role. Can be either BuiltIn or Custom.",
							},
						},
					},
				},
			},
			"type_https": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"headers": schema.MapAttribute{
						Optional:            true,
						MarkdownDescription: "A map of key-value pairs that will be passed as headers for the request.",
						ElementType:         types.StringType,
					},
					"url": schema.StringAttribute{
						Optional:            true,
						MarkdownDescription: "The url to be used for the request.",
					},
				},
			},
			"type_kafka": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"authentication": schema.SingleNestedAttribute{
						Optional:            true,
						MarkdownDescription: "User credentials required to connect to a Kafka Cluster. Includes the authentication type, as well as the parameters for that authentication mode.",
						Attributes: map[string]schema.Attribute{
							"links": schema.ListNestedAttribute{
								Computed:            true,
								MarkdownDescription: "List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.",
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"href": schema.StringAttribute{
											Computed:            true,
											MarkdownDescription: "Uniform Resource Locator (URL) that points another API resource to which this response has some relationship. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
										},
										"rel": schema.StringAttribute{
											Computed:            true,
											MarkdownDescription: "Uniform Resource Locator (URL) that defines the semantic relationship between this resource and another API resource. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
										},
									},
								},
							},
							"mechanism": schema.StringAttribute{
								Optional:            true,
								MarkdownDescription: "Style of authentication. Can be one of PLAIN, SCRAM-256, or SCRAM-512.",
							},
							"password": schema.StringAttribute{
								Optional:            true,
								MarkdownDescription: "Password of the account to connect to the Kafka cluster.",
								Sensitive:           true,
							},
							"ssl_certificate": schema.StringAttribute{
								Optional:            true,
								MarkdownDescription: "SSL certificate for client authentication to Kafka.",
							},
							"ssl_key": schema.StringAttribute{
								Optional:            true,
								MarkdownDescription: "SSL key for client authentication to Kafka.",
							},
							"ssl_key_password": schema.StringAttribute{
								Optional:            true,
								MarkdownDescription: "Password for the SSL key, if it is password protected.",
							},
							"username": schema.StringAttribute{
								Optional:            true,
								MarkdownDescription: "Username of the account to connect to the Kafka cluster.",
							},
						},
					},
					"bootstrap_servers": schema.StringAttribute{
						Optional:            true,
						MarkdownDescription: "Comma separated list of server addresses.",
					},
					"config": schema.MapAttribute{
						Optional:            true,
						MarkdownDescription: "A map of Kafka key-value pairs for optional configuration. This is a flat object, and keys can have '.' characters.",
						ElementType:         types.StringType,
					},
					"networking": schema.SingleNestedAttribute{
						Optional:            true,
						MarkdownDescription: "Networking Access Type can either be 'PUBLIC' (default) or VPC. VPC type is in public preview, please file a support ticket to enable VPC Network Access.",
						Attributes: map[string]schema.Attribute{
							"access": schema.SingleNestedAttribute{
								Optional:            true,
								MarkdownDescription: "Information about the networking access.",
								Attributes: map[string]schema.Attribute{
									"connection_id": schema.StringAttribute{
										Optional:            true,
										MarkdownDescription: "Reserved. Will be used by PRIVATE_LINK connection type.",
									},
									"links": schema.ListNestedAttribute{
										Computed:            true,
										MarkdownDescription: "List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.",
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"href": schema.StringAttribute{
													Computed:            true,
													MarkdownDescription: "Uniform Resource Locator (URL) that points another API resource to which this response has some relationship. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
												},
												"rel": schema.StringAttribute{
													Computed:            true,
													MarkdownDescription: "Uniform Resource Locator (URL) that defines the semantic relationship between this resource and another API resource. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
												},
											},
										},
									},
									"name": schema.StringAttribute{
										Optional:            true,
										MarkdownDescription: "Reserved. Will be used by PRIVATE_LINK connection type.",
									},
									"tgw_id": schema.StringAttribute{
										Optional:            true,
										MarkdownDescription: "Reserved. Will be used by TRANSIT_GATEWAY connection type.",
									},
									"tgw_route_id": schema.StringAttribute{
										Optional:            true,
										MarkdownDescription: "Reserved. Will be used by TRANSIT_GATEWAY connection type.",
									},
									"type": schema.StringAttribute{
										Optional:            true,
										MarkdownDescription: "Selected networking type. Either PUBLIC, VPC, PRIVATE_LINK, or TRANSIT_GATEWAY. Defaults to PUBLIC. For VPC, ensure that VPC peering exists and connectivity has been established between Atlas VPC and the VPC where Kafka cluster is hosted for the connection to function properly. TRANSIT_GATEWAY support is coming soon.",
									},
									"vpc_cidr": schema.StringAttribute{
										Optional:            true,
										MarkdownDescription: "Reserved. Will be used by TRANSIT_GATEWAY connection type.",
									},
								},
							},
							"links": schema.ListNestedAttribute{
								Computed:            true,
								MarkdownDescription: "List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.",
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"href": schema.StringAttribute{
											Computed:            true,
											MarkdownDescription: "Uniform Resource Locator (URL) that points another API resource to which this response has some relationship. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
										},
										"rel": schema.StringAttribute{
											Computed:            true,
											MarkdownDescription: "Uniform Resource Locator (URL) that defines the semantic relationship between this resource and another API resource. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
										},
									},
								},
							},
						},
					},
					"security": schema.SingleNestedAttribute{
						Optional:            true,
						MarkdownDescription: "Properties for the secure transport connection to Kafka. For SSL, this can include the trusted certificate to use.",
						Attributes: map[string]schema.Attribute{
							"broker_public_certificate": schema.StringAttribute{
								Optional:            true,
								MarkdownDescription: "A trusted, public x509 certificate for connecting to Kafka over SSL.",
							},
							"links": schema.ListNestedAttribute{
								Computed:            true,
								MarkdownDescription: "List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.",
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"href": schema.StringAttribute{
											Computed:            true,
											MarkdownDescription: "Uniform Resource Locator (URL) that points another API resource to which this response has some relationship. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
										},
										"rel": schema.StringAttribute{
											Computed:            true,
											MarkdownDescription: "Uniform Resource Locator (URL) that defines the semantic relationship between this resource and another API resource. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
										},
									},
								},
							},
							"protocol": schema.StringAttribute{
								Optional:            true,
								MarkdownDescription: "Describes the transport type. Can be either SASL_PLAINTEXT, SASL_SSL, or SSL.",
							},
						},
					},
				},
			},
			"type_s3": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"aws": schema.SingleNestedAttribute{
						Optional:            true,
						MarkdownDescription: "AWS configurations for AWS-based connection types.",
						Attributes: map[string]schema.Attribute{
							"links": schema.ListNestedAttribute{
								Computed:            true,
								MarkdownDescription: "List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.",
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"href": schema.StringAttribute{
											Computed:            true,
											MarkdownDescription: "Uniform Resource Locator (URL) that points another API resource to which this response has some relationship. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
										},
										"rel": schema.StringAttribute{
											Computed:            true,
											MarkdownDescription: "Uniform Resource Locator (URL) that defines the semantic relationship between this resource and another API resource. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
										},
									},
								},
							},
							"role_arn": schema.StringAttribute{
								Optional:            true,
								MarkdownDescription: "Amazon Resource Name (ARN) that identifies the Amazon Web Services (AWS) Identity and Access Management (IAM) role that MongoDB Cloud assumes when it accesses resources in your AWS account.",
							},
							"test_bucket": schema.StringAttribute{
								Optional:            true,
								MarkdownDescription: "The name of an S3 bucket used to check authorization of the passed-in IAM role ARN.",
							},
						},
					},
				},
			},
			"type_sample": schema.SingleNestedAttribute{
				Optional: true,
				Attributes: map[string]schema.Attribute{
					"type": schema.StringAttribute{
						Optional:            true,
						MarkdownDescription: "This should always be set to Sample, but can also be omitted",
					},
				},
			},
		},
	}
}

type TFModel struct {
	GroupId       types.String `tfsdk:"group_id" autogen:"omitjson"`
	Links         types.List   `tfsdk:"links" autogen:"omitjson"`
	Name          types.String `tfsdk:"name"`
	TenantName    types.String `tfsdk:"tenant_name" autogen:"omitjson"`
	Type          types.String `tfsdk:"type"`
	TypeAwslambda types.Object `tfsdk:"type_awslambda" autogen:"discriminator:type=AWSLambda"`
	TypeCluster   types.Object `tfsdk:"type_cluster" autogen:"discriminator:type=Cluster"`
	TypeHttps     types.Object `tfsdk:"type_https" autogen:"discriminator:type=Https"`
	TypeKafka     types.Object `tfsdk:"type_kafka" autogen:"discriminator:type=Kafka"`
	TypeS3        types.Object `tfsdk:"type_s3" autogen:"discriminator:type=S3"`
	TypeSample    types.Object `tfsdk:"type_sample" autogen:"discriminator:type=Sample"`
}

func (t *TFModel) DiscriminatorAttr(objJSON map[string]any) string {
	switch objJSON["type"] {
	case "AWSLambda":
		return "TypeAWSLambda"
	case "Cluster":
		return "TypeCluster"
	case "Https":
		return "TypeHttps"
	case "Kafka":
		return "TypeKafka"
	case "S3":
		return "TypeS3"
	case "Sample":
		return "TypeSample"
	}
	return ""
}

type TFLinksModel struct {
	Href types.String `tfsdk:"href" autogen:"omitjson"`
	Rel  types.String `tfsdk:"rel" autogen:"omitjson"`
}
type TFTypeAwslambdaModel struct {
	Aws types.Object `tfsdk:"aws"`
}
type TFTypeAwslambdaAwsModel struct {
	Links      types.List   `tfsdk:"links" autogen:"omitjson"`
	RoleArn    types.String `tfsdk:"role_arn"`
	TestBucket types.String `tfsdk:"test_bucket"`
}
type TFTypeAwslambdaAwsLinksModel struct {
	Href types.String `tfsdk:"href" autogen:"omitjson"`
	Rel  types.String `tfsdk:"rel" autogen:"omitjson"`
}
type TFTypeClusterModel struct {
	ClusterName     types.String `tfsdk:"cluster_name"`
	DbRoleToExecute types.Object `tfsdk:"db_role_to_execute"`
}
type TFTypeClusterDbRoleToExecuteModel struct {
	Links types.List   `tfsdk:"links" autogen:"omitjson"`
	Role  types.String `tfsdk:"role"`
	Type  types.String `tfsdk:"type"`
}
type TFTypeClusterDbRoleToExecuteLinksModel struct {
	Href types.String `tfsdk:"href" autogen:"omitjson"`
	Rel  types.String `tfsdk:"rel" autogen:"omitjson"`
}
type TFTypeHttpsModel struct {
	Headers types.Map    `tfsdk:"headers"`
	Url     types.String `tfsdk:"url"`
}
type TFTypeKafkaModel struct {
	Authentication   types.Object `tfsdk:"authentication"`
	BootstrapServers types.String `tfsdk:"bootstrap_servers"`
	Config           types.Map    `tfsdk:"config"`
	Networking       types.Object `tfsdk:"networking"`
	Security         types.Object `tfsdk:"security"`
}
type TFTypeKafkaAuthenticationModel struct {
	Links          types.List   `tfsdk:"links" autogen:"omitjson"`
	Mechanism      types.String `tfsdk:"mechanism"`
	Password       types.String `tfsdk:"password"`
	SslCertificate types.String `tfsdk:"ssl_certificate"`
	SslKey         types.String `tfsdk:"ssl_key"`
	SslKeyPassword types.String `tfsdk:"ssl_key_password"`
	Username       types.String `tfsdk:"username"`
}
type TFTypeKafkaAuthenticationLinksModel struct {
	Href types.String `tfsdk:"href" autogen:"omitjson"`
	Rel  types.String `tfsdk:"rel" autogen:"omitjson"`
}
type TFTypeKafkaNetworkingModel struct {
	Access types.Object `tfsdk:"access"`
	Links  types.List   `tfsdk:"links" autogen:"omitjson"`
}
type TFTypeKafkaNetworkingAccessModel struct {
	ConnectionId types.String `tfsdk:"connection_id"`
	Links        types.List   `tfsdk:"links" autogen:"omitjson"`
	Name         types.String `tfsdk:"name"`
	TgwId        types.String `tfsdk:"tgw_id"`
	TgwRouteId   types.String `tfsdk:"tgw_route_id"`
	Type         types.String `tfsdk:"type"`
	VpcCidr      types.String `tfsdk:"vpc_cidr"`
}
type TFTypeKafkaNetworkingAccessLinksModel struct {
	Href types.String `tfsdk:"href" autogen:"omitjson"`
	Rel  types.String `tfsdk:"rel" autogen:"omitjson"`
}
type TFTypeKafkaNetworkingLinksModel struct {
	Href types.String `tfsdk:"href" autogen:"omitjson"`
	Rel  types.String `tfsdk:"rel" autogen:"omitjson"`
}
type TFTypeKafkaSecurityModel struct {
	BrokerPublicCertificate types.String `tfsdk:"broker_public_certificate"`
	Links                   types.List   `tfsdk:"links" autogen:"omitjson"`
	Protocol                types.String `tfsdk:"protocol"`
}
type TFTypeKafkaSecurityLinksModel struct {
	Href types.String `tfsdk:"href" autogen:"omitjson"`
	Rel  types.String `tfsdk:"rel" autogen:"omitjson"`
}
type TFTypeS3Model struct {
	Aws types.Object `tfsdk:"aws"`
}
type TFTypeS3AwsModel struct {
	Links      types.List   `tfsdk:"links" autogen:"omitjson"`
	RoleArn    types.String `tfsdk:"role_arn"`
	TestBucket types.String `tfsdk:"test_bucket"`
}
type TFTypeS3AwsLinksModel struct {
	Href types.String `tfsdk:"href" autogen:"omitjson"`
	Rel  types.String `tfsdk:"rel" autogen:"omitjson"`
}
type TFTypeSampleModel struct {
	Type types.String `tfsdk:"type"`
}
