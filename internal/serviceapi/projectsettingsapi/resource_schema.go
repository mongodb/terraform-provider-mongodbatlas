// Code generated by terraform-provider-mongodbatlas using `make generate-resource`. DO NOT EDIT.

package projectsettingsapi

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func ResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"group_id": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.\n\n**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.",
			},
			"is_collect_database_specifics_statistics_enabled": schema.BoolAttribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "Flag that indicates whether to collect database-specific metrics for the specified project.",
			},
			"is_data_explorer_enabled": schema.BoolAttribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "Flag that indicates whether to enable the Data Explorer for the specified project.",
			},
			"is_data_explorer_gen_ai_features_enabled": schema.BoolAttribute{
				Optional:            true,
				MarkdownDescription: "Flag that indicates whether to enable the use of generative AI features which make requests to 3rd party services in Data Explorer for the specified project.",
			},
			"is_data_explorer_gen_ai_sample_document_passing_enabled": schema.BoolAttribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "Flag that indicates whether to enable the passing of sample field values with the use of generative AI features in the Data Explorer for the specified project.",
			},
			"is_extended_storage_sizes_enabled": schema.BoolAttribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "Flag that indicates whether to enable extended storage sizes for the specified project.",
			},
			"is_performance_advisor_enabled": schema.BoolAttribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "Flag that indicates whether to enable the Performance Advisor and Profiler for the specified project.",
			},
			"is_realtime_performance_panel_enabled": schema.BoolAttribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "Flag that indicates whether to enable the Real Time Performance Panel for the specified project.",
			},
			"is_schema_advisor_enabled": schema.BoolAttribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "Flag that indicates whether to enable the Schema Advisor for the specified project.",
			},
		},
	}
}

type TFModel struct {
	GroupId                                         types.String `tfsdk:"group_id" autogen:"omitjson"`
	IsCollectDatabaseSpecificsStatisticsEnabled     types.Bool   `tfsdk:"is_collect_database_specifics_statistics_enabled"`
	IsDataExplorerEnabled                           types.Bool   `tfsdk:"is_data_explorer_enabled"`
	IsDataExplorerGenAIFeaturesEnabled              types.Bool   `tfsdk:"is_data_explorer_gen_ai_features_enabled"`
	IsDataExplorerGenAISampleDocumentPassingEnabled types.Bool   `tfsdk:"is_data_explorer_gen_ai_sample_document_passing_enabled"`
	IsExtendedStorageSizesEnabled                   types.Bool   `tfsdk:"is_extended_storage_sizes_enabled"`
	IsPerformanceAdvisorEnabled                     types.Bool   `tfsdk:"is_performance_advisor_enabled"`
	IsRealtimePerformancePanelEnabled               types.Bool   `tfsdk:"is_realtime_performance_panel_enabled"`
	IsSchemaAdvisorEnabled                          types.Bool   `tfsdk:"is_schema_advisor_enabled"`
}
