// Code generated by terraform-provider-mongodbatlas using `make generate-resource`. DO NOT EDIT.

package projectapi

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func ResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"cluster_count": schema.Int64Attribute{
				Computed:            true,
				MarkdownDescription: "Quantity of MongoDB Cloud clusters deployed in this project.",
			},
			"created": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Date and time when MongoDB Cloud created this project. This parameter expresses its value in the ISO 8601 timestamp format in UTC.",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Unique 24-hexadecimal digit string that identifies the MongoDB Cloud project.",
			},
			"links": schema.ListNestedAttribute{
				Computed:            true,
				MarkdownDescription: "List of one or more Uniform Resource Locators (URLs) that point to API sub-resources, related API resources, or both. RFC 5988 outlines these relationships.",
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"href": schema.StringAttribute{
							Computed:            true,
							MarkdownDescription: "Uniform Resource Locator (URL) that points another API resource to which this response has some relationship. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
						},
						"rel": schema.StringAttribute{
							Computed:            true,
							MarkdownDescription: "Uniform Resource Locator (URL) that defines the semantic relationship between this resource and another API resource. This URL often begins with `https://cloud.mongodb.com/api/atlas`.",
						},
					},
				},
			},
			"name": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "Human-readable label that identifies the project included in the MongoDB Cloud organization.",
			},
			"org_id": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "Unique 24-hexadecimal digit string that identifies the MongoDB Cloud organization to which the project belongs.",
			},
			"region_usage_restrictions": schema.StringAttribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "Applies to Atlas for Government only.\n\nIn Commercial Atlas, this field will be rejected in requests and missing in responses.\n\nThis field sets restrictions on available regions in the project.\n\n`COMMERCIAL_FEDRAMP_REGIONS_ONLY`: Only allows deployments in FedRAMP Moderate regions.\n\n`GOV_REGIONS_ONLY`: Only allows deployments in GovCloud regions.",
			},
			"tags": schema.ListNestedAttribute{
				Optional:            true,
				MarkdownDescription: "List that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the project.",
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key": schema.StringAttribute{
							Required:            true,
							MarkdownDescription: "Constant that defines the set of the tag. For example, `environment` in the `environment : production` tag.",
						},
						"value": schema.StringAttribute{
							Required:            true,
							MarkdownDescription: "Variable that belongs to the set of the tag. For example, `production` in the `environment : production` tag.",
						},
					},
				},
			},
			"with_default_alerts_settings": schema.BoolAttribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "Flag that indicates whether to create the project with default alert settings.",
			},
		},
	}
}

type TFModel struct {
	ClusterCount              types.Int64  `tfsdk:"cluster_count" autogen:"omitjson"`
	Created                   types.String `tfsdk:"created" autogen:"omitjson"`
	Id                        types.String `tfsdk:"id" autogen:"omitjson"`
	Links                     types.List   `tfsdk:"links" autogen:"omitjson"`
	Name                      types.String `tfsdk:"name"`
	OrgId                     types.String `tfsdk:"org_id" autogen:"omitjsonupdate"`
	RegionUsageRestrictions   types.String `tfsdk:"region_usage_restrictions" autogen:"omitjsonupdate"`
	Tags                      types.List   `tfsdk:"tags"`
	WithDefaultAlertsSettings types.Bool   `tfsdk:"with_default_alerts_settings" autogen:"omitjsonupdate"`
}
type TFLinksModel struct {
	Href types.String `tfsdk:"href" autogen:"omitjson"`
	Rel  types.String `tfsdk:"rel" autogen:"omitjson"`
}
type TFTagsModel struct {
	Key   types.String `tfsdk:"key"`
	Value types.String `tfsdk:"value"`
}
