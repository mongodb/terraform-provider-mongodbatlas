// Code generated by terraform-provider-mongodbatlas using `make generate-resource`. DO NOT EDIT.

package orgserviceaccountapi

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/mongodb/terraform-provider-mongodbatlas/internal/common/customplanmodifier"
)

func ResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"client_id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The Client ID of the Service Account.",
			},
			"created_at": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The date that the Service Account was created on. This parameter expresses its value in the ISO 8601 timestamp format in UTC.",
			},
			"description": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "Human readable description for the Service Account.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "Human-readable name for the Service Account. The name is modifiable and does not have to be unique.",
			},
			"org_id": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the [/orgs](#tag/Organizations/operation/listOrganizations) endpoint to retrieve all organizations to which the authenticated user has access.",
				PlanModifiers:       []planmodifier.String{customplanmodifier.CreateOnlyAttributePlanModifier()},
			},
			"roles": schema.ListAttribute{
				Required:            true,
				MarkdownDescription: "A list of organization-level roles for the Service Account.",
				ElementType:         types.StringType,
			},
			"secret_expires_after_hours": schema.Int64Attribute{
				Required:            true,
				MarkdownDescription: "The expiration time of the new Service Account secret, provided in hours. The minimum and maximum allowed expiration times are subject to change and are controlled by the organization's settings.",
				PlanModifiers:       []planmodifier.Int64{customplanmodifier.CreateOnlyAttributePlanModifier()},
			},
			"secrets": schema.SetNestedAttribute{
				Computed:            true,
				MarkdownDescription: "A list of secrets associated with the specified Service Account.",
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"created_at": schema.StringAttribute{
							Computed:            true,
							MarkdownDescription: "The date that the secret was created on. This parameter expresses its value in the ISO 8601 timestamp format in UTC.",
						},
						"expires_at": schema.StringAttribute{
							Computed:            true,
							MarkdownDescription: "The date for the expiration of the secret. This parameter expresses its value in the ISO 8601 timestamp format in UTC.",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							MarkdownDescription: "Unique 24-hexadecimal digit string that identifies the secret.",
						},
						"last_used_at": schema.StringAttribute{
							Computed:            true,
							MarkdownDescription: "The last time the secret was used. This parameter expresses its value in the ISO 8601 timestamp format in UTC.",
						},
						"masked_secret_value": schema.StringAttribute{
							Computed:            true,
							MarkdownDescription: "The masked Service Account secret.",
						},
						"secret": schema.StringAttribute{
							Computed:            true,
							MarkdownDescription: "The secret for the Service Account. It will be returned only the first time after creation.",
							Sensitive:           true,
						},
					},
				},
			},
		},
	}
}

type TFModel struct {
	Roles                   types.List   `tfsdk:"roles"`
	Secrets                 types.Set    `tfsdk:"secrets" autogen:"omitjson"`
	ClientId                types.String `tfsdk:"client_id" autogen:"omitjson"`
	CreatedAt               types.String `tfsdk:"created_at" autogen:"omitjson"`
	Description             types.String `tfsdk:"description"`
	Name                    types.String `tfsdk:"name"`
	OrgId                   types.String `tfsdk:"org_id" autogen:"omitjson"`
	SecretExpiresAfterHours types.Int64  `tfsdk:"secret_expires_after_hours" autogen:"omitjsonupdate"`
}
type TFSecretsModel struct {
	CreatedAt         types.String `tfsdk:"created_at" autogen:"omitjson"`
	ExpiresAt         types.String `tfsdk:"expires_at" autogen:"omitjson"`
	Id                types.String `tfsdk:"id" autogen:"omitjson"`
	LastUsedAt        types.String `tfsdk:"last_used_at" autogen:"omitjson"`
	MaskedSecretValue types.String `tfsdk:"masked_secret_value" autogen:"omitjson"`
	Secret            types.String `tfsdk:"secret" autogen:"omitjson"`
}
