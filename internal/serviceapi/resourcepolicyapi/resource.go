// Code generated by terraform-provider-mongodbatlas using `make generate-resource`. DO NOT EDIT.

package resourcepolicyapi

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/mongodb/terraform-provider-mongodbatlas/internal/common/autogen"
	"github.com/mongodb/terraform-provider-mongodbatlas/internal/common/conversion"
	"github.com/mongodb/terraform-provider-mongodbatlas/internal/config"
)

var _ resource.ResourceWithConfigure = &rs{}
var _ resource.ResourceWithImportState = &rs{}

const apiVersionHeader = "application/vnd.atlas.2024-08-05+json"

func Resource() resource.Resource {
	return &rs{
		RSCommon: config.RSCommon{
			ResourceName: "resource_policy_api",
		},
	}
}

type rs struct {
	config.RSCommon
}

func (r *rs) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = ResourceSchema(ctx)
	conversion.UpdateSchemaDescription(&resp.Schema)
}

func (r *rs) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan TFModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	pathParams := map[string]string{
		"orgId": plan.OrgId.ValueString(),
	}
	callParams := config.APICallParams{
		VersionHeader: apiVersionHeader,
		RelativePath:  "/api/atlas/v2/orgs/{orgId}/resourcePolicies",
		PathParams:    pathParams,
		Method:        "POST",
	}
	reqHandle := autogen.HandleCreateReq{
		Resp:       resp,
		Client:     r.Client,
		Plan:       &plan,
		CallParams: &callParams,
	}
	autogen.HandleCreate(ctx, reqHandle)
}

func (r *rs) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state TFModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	reqHandle := autogen.HandleReadReq{
		Resp:       resp,
		Client:     r.Client,
		State:      &state,
		CallParams: readAPICallParams(&state),
	}
	autogen.HandleRead(ctx, reqHandle)
}

func (r *rs) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan TFModel
	var state TFModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// Path params are grabbed from state as they may be computed-only and not present in the plan
	pathParams := map[string]string{
		"orgId": state.OrgId.ValueString(),
		"id":    state.Id.ValueString(),
	}
	callParams := config.APICallParams{
		VersionHeader: apiVersionHeader,
		RelativePath:  "/api/atlas/v2/orgs/{orgId}/resourcePolicies/{id}",
		PathParams:    pathParams,
		Method:        "PATCH",
	}
	reqHandle := autogen.HandleUpdateReq{
		Resp:       resp,
		Client:     r.Client,
		Plan:       &plan,
		CallParams: &callParams,
	}
	autogen.HandleUpdate(ctx, reqHandle)
}

func (r *rs) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state TFModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	pathParams := map[string]string{
		"orgId": state.OrgId.ValueString(),
		"id":    state.Id.ValueString(),
	}
	callParams := config.APICallParams{
		VersionHeader: apiVersionHeader,
		RelativePath:  "/api/atlas/v2/orgs/{orgId}/resourcePolicies/{id}",
		PathParams:    pathParams,
		Method:        "DELETE",
	}
	reqHandle := autogen.HandleDeleteReq{
		Resp:       resp,
		Client:     r.Client,
		State:      &state,
		CallParams: &callParams,
	}
	autogen.HandleDelete(ctx, reqHandle)
}

func (r *rs) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	idAttributes := []string{"org_id", "id"}
	autogen.HandleImport(ctx, idAttributes, req, resp)
}

func readAPICallParams(state *TFModel) *config.APICallParams {
	pathParams := map[string]string{
		"orgId": state.OrgId.ValueString(),
		"id":    state.Id.ValueString(),
	}
	return &config.APICallParams{
		VersionHeader: apiVersionHeader,
		RelativePath:  "/api/atlas/v2/orgs/{orgId}/resourcePolicies/{id}",
		PathParams:    pathParams,
		Method:        "GET",
	}
}
