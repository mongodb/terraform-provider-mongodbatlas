// Code generated by mockery. DO NOT EDIT.

package mocksvc

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	mongodbatlas "go.mongodb.org/atlas/mongodbatlas"
)

// ClusterService is an autogenerated mock type for the ClusterService type
type ClusterService struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, groupID, clusterName
func (_m *ClusterService) Get(ctx context.Context, groupID string, clusterName string) (*mongodbatlas.Cluster, *mongodbatlas.Response, error) {
	ret := _m.Called(ctx, groupID, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *mongodbatlas.Cluster
	var r1 *mongodbatlas.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*mongodbatlas.Cluster, *mongodbatlas.Response, error)); ok {
		return rf(ctx, groupID, clusterName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *mongodbatlas.Cluster); ok {
		r0 = rf(ctx, groupID, clusterName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongodbatlas.Cluster)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *mongodbatlas.Response); ok {
		r1 = rf(ctx, groupID, clusterName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mongodbatlas.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, groupID, clusterName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAdvancedCluster provides a mock function with given fields: ctx, groupID, clusterName
func (_m *ClusterService) GetAdvancedCluster(ctx context.Context, groupID string, clusterName string) (*mongodbatlas.AdvancedCluster, *mongodbatlas.Response, error) {
	ret := _m.Called(ctx, groupID, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for GetAdvancedCluster")
	}

	var r0 *mongodbatlas.AdvancedCluster
	var r1 *mongodbatlas.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*mongodbatlas.AdvancedCluster, *mongodbatlas.Response, error)); ok {
		return rf(ctx, groupID, clusterName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *mongodbatlas.AdvancedCluster); ok {
		r0 = rf(ctx, groupID, clusterName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongodbatlas.AdvancedCluster)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *mongodbatlas.Response); ok {
		r1 = rf(ctx, groupID, clusterName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mongodbatlas.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, groupID, clusterName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// List provides a mock function with given fields: ctx, groupID, options
func (_m *ClusterService) List(ctx context.Context, groupID string, options *mongodbatlas.ListOptions) (*mongodbatlas.AdvancedClustersResponse, *mongodbatlas.Response, error) {
	ret := _m.Called(ctx, groupID, options)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *mongodbatlas.AdvancedClustersResponse
	var r1 *mongodbatlas.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *mongodbatlas.ListOptions) (*mongodbatlas.AdvancedClustersResponse, *mongodbatlas.Response, error)); ok {
		return rf(ctx, groupID, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *mongodbatlas.ListOptions) *mongodbatlas.AdvancedClustersResponse); ok {
		r0 = rf(ctx, groupID, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongodbatlas.AdvancedClustersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *mongodbatlas.ListOptions) *mongodbatlas.Response); ok {
		r1 = rf(ctx, groupID, options)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*mongodbatlas.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *mongodbatlas.ListOptions) error); ok {
		r2 = rf(ctx, groupID, options)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewClusterService creates a new instance of ClusterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClusterService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClusterService {
	mock := &ClusterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
