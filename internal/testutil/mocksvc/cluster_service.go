// Code generated by mockery. DO NOT EDIT.

package mocksvc

import (
	admin "go.mongodb.org/atlas-sdk/v20231115008/admin"

	context "context"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// ClusterService is an autogenerated mock type for the ClusterService type
type ClusterService struct {
	mock.Mock
}

type ClusterService_Expecter struct {
	mock *mock.Mock
}

func (_m *ClusterService) EXPECT() *ClusterService_Expecter {
	return &ClusterService_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, groupID, clusterName
func (_m *ClusterService) Get(ctx context.Context, groupID string, clusterName string) (*admin.AdvancedClusterDescription, *http.Response, error) {
	ret := _m.Called(ctx, groupID, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *admin.AdvancedClusterDescription
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*admin.AdvancedClusterDescription, *http.Response, error)); ok {
		return rf(ctx, groupID, clusterName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *admin.AdvancedClusterDescription); ok {
		r0 = rf(ctx, groupID, clusterName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.AdvancedClusterDescription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *http.Response); ok {
		r1 = rf(ctx, groupID, clusterName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, groupID, clusterName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ClusterService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ClusterService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID string
//   - clusterName string
func (_e *ClusterService_Expecter) Get(ctx interface{}, groupID interface{}, clusterName interface{}) *ClusterService_Get_Call {
	return &ClusterService_Get_Call{Call: _e.mock.On("Get", ctx, groupID, clusterName)}
}

func (_c *ClusterService_Get_Call) Run(run func(ctx context.Context, groupID string, clusterName string)) *ClusterService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ClusterService_Get_Call) Return(_a0 *admin.AdvancedClusterDescription, _a1 *http.Response, _a2 error) *ClusterService_Get_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ClusterService_Get_Call) RunAndReturn(run func(context.Context, string, string) (*admin.AdvancedClusterDescription, *http.Response, error)) *ClusterService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, options
func (_m *ClusterService) List(ctx context.Context, options *admin.ListClustersApiParams) (*admin.PaginatedAdvancedClusterDescription, *http.Response, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *admin.PaginatedAdvancedClusterDescription
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListClustersApiParams) (*admin.PaginatedAdvancedClusterDescription, *http.Response, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListClustersApiParams) *admin.PaginatedAdvancedClusterDescription); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedAdvancedClusterDescription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *admin.ListClustersApiParams) *http.Response); ok {
		r1 = rf(ctx, options)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *admin.ListClustersApiParams) error); ok {
		r2 = rf(ctx, options)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ClusterService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ClusterService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - options *admin.ListClustersApiParams
func (_e *ClusterService_Expecter) List(ctx interface{}, options interface{}) *ClusterService_List_Call {
	return &ClusterService_List_Call{Call: _e.mock.On("List", ctx, options)}
}

func (_c *ClusterService_List_Call) Run(run func(ctx context.Context, options *admin.ListClustersApiParams)) *ClusterService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListClustersApiParams))
	})
	return _c
}

func (_c *ClusterService_List_Call) Return(_a0 *admin.PaginatedAdvancedClusterDescription, _a1 *http.Response, _a2 error) *ClusterService_List_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ClusterService_List_Call) RunAndReturn(run func(context.Context, *admin.ListClustersApiParams) (*admin.PaginatedAdvancedClusterDescription, *http.Response, error)) *ClusterService_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewClusterService creates a new instance of ClusterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClusterService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClusterService {
	mock := &ClusterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
