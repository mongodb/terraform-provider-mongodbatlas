// Code generated by mockery. DO NOT EDIT.

package mocksvc

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20231115008/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// ProjectsApi is an autogenerated mock type for the ProjectsApi type
type ProjectsApi struct {
	mock.Mock
}

type ProjectsApi_Expecter struct {
	mock *mock.Mock
}

func (_m *ProjectsApi) EXPECT() *ProjectsApi_Expecter {
	return &ProjectsApi_Expecter{mock: &_m.Mock}
}

// AddUserToProject provides a mock function with given fields: ctx, groupId, groupInvitationRequest
func (_m *ProjectsApi) AddUserToProject(ctx context.Context, groupId string, groupInvitationRequest *admin.GroupInvitationRequest) admin.AddUserToProjectApiRequest {
	ret := _m.Called(ctx, groupId, groupInvitationRequest)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToProject")
	}

	var r0 admin.AddUserToProjectApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.GroupInvitationRequest) admin.AddUserToProjectApiRequest); ok {
		r0 = rf(ctx, groupId, groupInvitationRequest)
	} else {
		r0 = ret.Get(0).(admin.AddUserToProjectApiRequest)
	}

	return r0
}

// ProjectsApi_AddUserToProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToProject'
type ProjectsApi_AddUserToProject_Call struct {
	*mock.Call
}

// AddUserToProject is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - groupInvitationRequest *admin.GroupInvitationRequest
func (_e *ProjectsApi_Expecter) AddUserToProject(ctx interface{}, groupId interface{}, groupInvitationRequest interface{}) *ProjectsApi_AddUserToProject_Call {
	return &ProjectsApi_AddUserToProject_Call{Call: _e.mock.On("AddUserToProject", ctx, groupId, groupInvitationRequest)}
}

func (_c *ProjectsApi_AddUserToProject_Call) Run(run func(ctx context.Context, groupId string, groupInvitationRequest *admin.GroupInvitationRequest)) *ProjectsApi_AddUserToProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.GroupInvitationRequest))
	})
	return _c
}

func (_c *ProjectsApi_AddUserToProject_Call) Return(_a0 admin.AddUserToProjectApiRequest) *ProjectsApi_AddUserToProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_AddUserToProject_Call) RunAndReturn(run func(context.Context, string, *admin.GroupInvitationRequest) admin.AddUserToProjectApiRequest) *ProjectsApi_AddUserToProject_Call {
	_c.Call.Return(run)
	return _c
}

// AddUserToProjectExecute provides a mock function with given fields: r
func (_m *ProjectsApi) AddUserToProjectExecute(r admin.AddUserToProjectApiRequest) (*admin.OrganizationInvitation, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToProjectExecute")
	}

	var r0 *admin.OrganizationInvitation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.AddUserToProjectApiRequest) (*admin.OrganizationInvitation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.AddUserToProjectApiRequest) *admin.OrganizationInvitation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrganizationInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.AddUserToProjectApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.AddUserToProjectApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_AddUserToProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToProjectExecute'
type ProjectsApi_AddUserToProjectExecute_Call struct {
	*mock.Call
}

// AddUserToProjectExecute is a helper method to define mock.On call
//   - r admin.AddUserToProjectApiRequest
func (_e *ProjectsApi_Expecter) AddUserToProjectExecute(r interface{}) *ProjectsApi_AddUserToProjectExecute_Call {
	return &ProjectsApi_AddUserToProjectExecute_Call{Call: _e.mock.On("AddUserToProjectExecute", r)}
}

func (_c *ProjectsApi_AddUserToProjectExecute_Call) Run(run func(r admin.AddUserToProjectApiRequest)) *ProjectsApi_AddUserToProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.AddUserToProjectApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_AddUserToProjectExecute_Call) Return(_a0 *admin.OrganizationInvitation, _a1 *http.Response, _a2 error) *ProjectsApi_AddUserToProjectExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_AddUserToProjectExecute_Call) RunAndReturn(run func(admin.AddUserToProjectApiRequest) (*admin.OrganizationInvitation, *http.Response, error)) *ProjectsApi_AddUserToProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// AddUserToProjectWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) AddUserToProjectWithParams(ctx context.Context, args *admin.AddUserToProjectApiParams) admin.AddUserToProjectApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToProjectWithParams")
	}

	var r0 admin.AddUserToProjectApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.AddUserToProjectApiParams) admin.AddUserToProjectApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.AddUserToProjectApiRequest)
	}

	return r0
}

// ProjectsApi_AddUserToProjectWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToProjectWithParams'
type ProjectsApi_AddUserToProjectWithParams_Call struct {
	*mock.Call
}

// AddUserToProjectWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.AddUserToProjectApiParams
func (_e *ProjectsApi_Expecter) AddUserToProjectWithParams(ctx interface{}, args interface{}) *ProjectsApi_AddUserToProjectWithParams_Call {
	return &ProjectsApi_AddUserToProjectWithParams_Call{Call: _e.mock.On("AddUserToProjectWithParams", ctx, args)}
}

func (_c *ProjectsApi_AddUserToProjectWithParams_Call) Run(run func(ctx context.Context, args *admin.AddUserToProjectApiParams)) *ProjectsApi_AddUserToProjectWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.AddUserToProjectApiParams))
	})
	return _c
}

func (_c *ProjectsApi_AddUserToProjectWithParams_Call) Return(_a0 admin.AddUserToProjectApiRequest) *ProjectsApi_AddUserToProjectWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_AddUserToProjectWithParams_Call) RunAndReturn(run func(context.Context, *admin.AddUserToProjectApiParams) admin.AddUserToProjectApiRequest) *ProjectsApi_AddUserToProjectWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProject provides a mock function with given fields: ctx, group
func (_m *ProjectsApi) CreateProject(ctx context.Context, group *admin.Group) admin.CreateProjectApiRequest {
	ret := _m.Called(ctx, group)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 admin.CreateProjectApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.Group) admin.CreateProjectApiRequest); ok {
		r0 = rf(ctx, group)
	} else {
		r0 = ret.Get(0).(admin.CreateProjectApiRequest)
	}

	return r0
}

// ProjectsApi_CreateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProject'
type ProjectsApi_CreateProject_Call struct {
	*mock.Call
}

// CreateProject is a helper method to define mock.On call
//   - ctx context.Context
//   - group *admin.Group
func (_e *ProjectsApi_Expecter) CreateProject(ctx interface{}, group interface{}) *ProjectsApi_CreateProject_Call {
	return &ProjectsApi_CreateProject_Call{Call: _e.mock.On("CreateProject", ctx, group)}
}

func (_c *ProjectsApi_CreateProject_Call) Run(run func(ctx context.Context, group *admin.Group)) *ProjectsApi_CreateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.Group))
	})
	return _c
}

func (_c *ProjectsApi_CreateProject_Call) Return(_a0 admin.CreateProjectApiRequest) *ProjectsApi_CreateProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_CreateProject_Call) RunAndReturn(run func(context.Context, *admin.Group) admin.CreateProjectApiRequest) *ProjectsApi_CreateProject_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProjectExecute provides a mock function with given fields: r
func (_m *ProjectsApi) CreateProjectExecute(r admin.CreateProjectApiRequest) (*admin.Group, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectExecute")
	}

	var r0 *admin.Group
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateProjectApiRequest) (*admin.Group, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateProjectApiRequest) *admin.Group); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateProjectApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateProjectApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_CreateProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectExecute'
type ProjectsApi_CreateProjectExecute_Call struct {
	*mock.Call
}

// CreateProjectExecute is a helper method to define mock.On call
//   - r admin.CreateProjectApiRequest
func (_e *ProjectsApi_Expecter) CreateProjectExecute(r interface{}) *ProjectsApi_CreateProjectExecute_Call {
	return &ProjectsApi_CreateProjectExecute_Call{Call: _e.mock.On("CreateProjectExecute", r)}
}

func (_c *ProjectsApi_CreateProjectExecute_Call) Run(run func(r admin.CreateProjectApiRequest)) *ProjectsApi_CreateProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateProjectApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_CreateProjectExecute_Call) Return(_a0 *admin.Group, _a1 *http.Response, _a2 error) *ProjectsApi_CreateProjectExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_CreateProjectExecute_Call) RunAndReturn(run func(admin.CreateProjectApiRequest) (*admin.Group, *http.Response, error)) *ProjectsApi_CreateProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProjectInvitation provides a mock function with given fields: ctx, groupId, groupInvitationRequest
func (_m *ProjectsApi) CreateProjectInvitation(ctx context.Context, groupId string, groupInvitationRequest *admin.GroupInvitationRequest) admin.CreateProjectInvitationApiRequest {
	ret := _m.Called(ctx, groupId, groupInvitationRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectInvitation")
	}

	var r0 admin.CreateProjectInvitationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.GroupInvitationRequest) admin.CreateProjectInvitationApiRequest); ok {
		r0 = rf(ctx, groupId, groupInvitationRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateProjectInvitationApiRequest)
	}

	return r0
}

// ProjectsApi_CreateProjectInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectInvitation'
type ProjectsApi_CreateProjectInvitation_Call struct {
	*mock.Call
}

// CreateProjectInvitation is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - groupInvitationRequest *admin.GroupInvitationRequest
func (_e *ProjectsApi_Expecter) CreateProjectInvitation(ctx interface{}, groupId interface{}, groupInvitationRequest interface{}) *ProjectsApi_CreateProjectInvitation_Call {
	return &ProjectsApi_CreateProjectInvitation_Call{Call: _e.mock.On("CreateProjectInvitation", ctx, groupId, groupInvitationRequest)}
}

func (_c *ProjectsApi_CreateProjectInvitation_Call) Run(run func(ctx context.Context, groupId string, groupInvitationRequest *admin.GroupInvitationRequest)) *ProjectsApi_CreateProjectInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.GroupInvitationRequest))
	})
	return _c
}

func (_c *ProjectsApi_CreateProjectInvitation_Call) Return(_a0 admin.CreateProjectInvitationApiRequest) *ProjectsApi_CreateProjectInvitation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_CreateProjectInvitation_Call) RunAndReturn(run func(context.Context, string, *admin.GroupInvitationRequest) admin.CreateProjectInvitationApiRequest) *ProjectsApi_CreateProjectInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProjectInvitationExecute provides a mock function with given fields: r
func (_m *ProjectsApi) CreateProjectInvitationExecute(r admin.CreateProjectInvitationApiRequest) (*admin.GroupInvitation, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectInvitationExecute")
	}

	var r0 *admin.GroupInvitation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateProjectInvitationApiRequest) (*admin.GroupInvitation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateProjectInvitationApiRequest) *admin.GroupInvitation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateProjectInvitationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateProjectInvitationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_CreateProjectInvitationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectInvitationExecute'
type ProjectsApi_CreateProjectInvitationExecute_Call struct {
	*mock.Call
}

// CreateProjectInvitationExecute is a helper method to define mock.On call
//   - r admin.CreateProjectInvitationApiRequest
func (_e *ProjectsApi_Expecter) CreateProjectInvitationExecute(r interface{}) *ProjectsApi_CreateProjectInvitationExecute_Call {
	return &ProjectsApi_CreateProjectInvitationExecute_Call{Call: _e.mock.On("CreateProjectInvitationExecute", r)}
}

func (_c *ProjectsApi_CreateProjectInvitationExecute_Call) Run(run func(r admin.CreateProjectInvitationApiRequest)) *ProjectsApi_CreateProjectInvitationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateProjectInvitationApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_CreateProjectInvitationExecute_Call) Return(_a0 *admin.GroupInvitation, _a1 *http.Response, _a2 error) *ProjectsApi_CreateProjectInvitationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_CreateProjectInvitationExecute_Call) RunAndReturn(run func(admin.CreateProjectInvitationApiRequest) (*admin.GroupInvitation, *http.Response, error)) *ProjectsApi_CreateProjectInvitationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProjectInvitationWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) CreateProjectInvitationWithParams(ctx context.Context, args *admin.CreateProjectInvitationApiParams) admin.CreateProjectInvitationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectInvitationWithParams")
	}

	var r0 admin.CreateProjectInvitationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateProjectInvitationApiParams) admin.CreateProjectInvitationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateProjectInvitationApiRequest)
	}

	return r0
}

// ProjectsApi_CreateProjectInvitationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectInvitationWithParams'
type ProjectsApi_CreateProjectInvitationWithParams_Call struct {
	*mock.Call
}

// CreateProjectInvitationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateProjectInvitationApiParams
func (_e *ProjectsApi_Expecter) CreateProjectInvitationWithParams(ctx interface{}, args interface{}) *ProjectsApi_CreateProjectInvitationWithParams_Call {
	return &ProjectsApi_CreateProjectInvitationWithParams_Call{Call: _e.mock.On("CreateProjectInvitationWithParams", ctx, args)}
}

func (_c *ProjectsApi_CreateProjectInvitationWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateProjectInvitationApiParams)) *ProjectsApi_CreateProjectInvitationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateProjectInvitationApiParams))
	})
	return _c
}

func (_c *ProjectsApi_CreateProjectInvitationWithParams_Call) Return(_a0 admin.CreateProjectInvitationApiRequest) *ProjectsApi_CreateProjectInvitationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_CreateProjectInvitationWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateProjectInvitationApiParams) admin.CreateProjectInvitationApiRequest) *ProjectsApi_CreateProjectInvitationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProjectWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) CreateProjectWithParams(ctx context.Context, args *admin.CreateProjectApiParams) admin.CreateProjectApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectWithParams")
	}

	var r0 admin.CreateProjectApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateProjectApiParams) admin.CreateProjectApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateProjectApiRequest)
	}

	return r0
}

// ProjectsApi_CreateProjectWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectWithParams'
type ProjectsApi_CreateProjectWithParams_Call struct {
	*mock.Call
}

// CreateProjectWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateProjectApiParams
func (_e *ProjectsApi_Expecter) CreateProjectWithParams(ctx interface{}, args interface{}) *ProjectsApi_CreateProjectWithParams_Call {
	return &ProjectsApi_CreateProjectWithParams_Call{Call: _e.mock.On("CreateProjectWithParams", ctx, args)}
}

func (_c *ProjectsApi_CreateProjectWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateProjectApiParams)) *ProjectsApi_CreateProjectWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateProjectApiParams))
	})
	return _c
}

func (_c *ProjectsApi_CreateProjectWithParams_Call) Return(_a0 admin.CreateProjectApiRequest) *ProjectsApi_CreateProjectWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_CreateProjectWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateProjectApiParams) admin.CreateProjectApiRequest) *ProjectsApi_CreateProjectWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProject provides a mock function with given fields: ctx, groupId
func (_m *ProjectsApi) DeleteProject(ctx context.Context, groupId string) admin.DeleteProjectApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 admin.DeleteProjectApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.DeleteProjectApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.DeleteProjectApiRequest)
	}

	return r0
}

// ProjectsApi_DeleteProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProject'
type ProjectsApi_DeleteProject_Call struct {
	*mock.Call
}

// DeleteProject is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *ProjectsApi_Expecter) DeleteProject(ctx interface{}, groupId interface{}) *ProjectsApi_DeleteProject_Call {
	return &ProjectsApi_DeleteProject_Call{Call: _e.mock.On("DeleteProject", ctx, groupId)}
}

func (_c *ProjectsApi_DeleteProject_Call) Run(run func(ctx context.Context, groupId string)) *ProjectsApi_DeleteProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProjectsApi_DeleteProject_Call) Return(_a0 admin.DeleteProjectApiRequest) *ProjectsApi_DeleteProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_DeleteProject_Call) RunAndReturn(run func(context.Context, string) admin.DeleteProjectApiRequest) *ProjectsApi_DeleteProject_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectExecute provides a mock function with given fields: r
func (_m *ProjectsApi) DeleteProjectExecute(r admin.DeleteProjectApiRequest) (map[string]interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectExecute")
	}

	var r0 map[string]interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DeleteProjectApiRequest) (map[string]interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteProjectApiRequest) map[string]interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteProjectApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DeleteProjectApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_DeleteProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectExecute'
type ProjectsApi_DeleteProjectExecute_Call struct {
	*mock.Call
}

// DeleteProjectExecute is a helper method to define mock.On call
//   - r admin.DeleteProjectApiRequest
func (_e *ProjectsApi_Expecter) DeleteProjectExecute(r interface{}) *ProjectsApi_DeleteProjectExecute_Call {
	return &ProjectsApi_DeleteProjectExecute_Call{Call: _e.mock.On("DeleteProjectExecute", r)}
}

func (_c *ProjectsApi_DeleteProjectExecute_Call) Run(run func(r admin.DeleteProjectApiRequest)) *ProjectsApi_DeleteProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteProjectApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_DeleteProjectExecute_Call) Return(_a0 map[string]interface{}, _a1 *http.Response, _a2 error) *ProjectsApi_DeleteProjectExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_DeleteProjectExecute_Call) RunAndReturn(run func(admin.DeleteProjectApiRequest) (map[string]interface{}, *http.Response, error)) *ProjectsApi_DeleteProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectInvitation provides a mock function with given fields: ctx, groupId, invitationId
func (_m *ProjectsApi) DeleteProjectInvitation(ctx context.Context, groupId string, invitationId string) admin.DeleteProjectInvitationApiRequest {
	ret := _m.Called(ctx, groupId, invitationId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectInvitation")
	}

	var r0 admin.DeleteProjectInvitationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteProjectInvitationApiRequest); ok {
		r0 = rf(ctx, groupId, invitationId)
	} else {
		r0 = ret.Get(0).(admin.DeleteProjectInvitationApiRequest)
	}

	return r0
}

// ProjectsApi_DeleteProjectInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectInvitation'
type ProjectsApi_DeleteProjectInvitation_Call struct {
	*mock.Call
}

// DeleteProjectInvitation is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - invitationId string
func (_e *ProjectsApi_Expecter) DeleteProjectInvitation(ctx interface{}, groupId interface{}, invitationId interface{}) *ProjectsApi_DeleteProjectInvitation_Call {
	return &ProjectsApi_DeleteProjectInvitation_Call{Call: _e.mock.On("DeleteProjectInvitation", ctx, groupId, invitationId)}
}

func (_c *ProjectsApi_DeleteProjectInvitation_Call) Run(run func(ctx context.Context, groupId string, invitationId string)) *ProjectsApi_DeleteProjectInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ProjectsApi_DeleteProjectInvitation_Call) Return(_a0 admin.DeleteProjectInvitationApiRequest) *ProjectsApi_DeleteProjectInvitation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_DeleteProjectInvitation_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteProjectInvitationApiRequest) *ProjectsApi_DeleteProjectInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectInvitationExecute provides a mock function with given fields: r
func (_m *ProjectsApi) DeleteProjectInvitationExecute(r admin.DeleteProjectInvitationApiRequest) (map[string]interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectInvitationExecute")
	}

	var r0 map[string]interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DeleteProjectInvitationApiRequest) (map[string]interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteProjectInvitationApiRequest) map[string]interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteProjectInvitationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DeleteProjectInvitationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_DeleteProjectInvitationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectInvitationExecute'
type ProjectsApi_DeleteProjectInvitationExecute_Call struct {
	*mock.Call
}

// DeleteProjectInvitationExecute is a helper method to define mock.On call
//   - r admin.DeleteProjectInvitationApiRequest
func (_e *ProjectsApi_Expecter) DeleteProjectInvitationExecute(r interface{}) *ProjectsApi_DeleteProjectInvitationExecute_Call {
	return &ProjectsApi_DeleteProjectInvitationExecute_Call{Call: _e.mock.On("DeleteProjectInvitationExecute", r)}
}

func (_c *ProjectsApi_DeleteProjectInvitationExecute_Call) Run(run func(r admin.DeleteProjectInvitationApiRequest)) *ProjectsApi_DeleteProjectInvitationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteProjectInvitationApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_DeleteProjectInvitationExecute_Call) Return(_a0 map[string]interface{}, _a1 *http.Response, _a2 error) *ProjectsApi_DeleteProjectInvitationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_DeleteProjectInvitationExecute_Call) RunAndReturn(run func(admin.DeleteProjectInvitationApiRequest) (map[string]interface{}, *http.Response, error)) *ProjectsApi_DeleteProjectInvitationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectInvitationWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) DeleteProjectInvitationWithParams(ctx context.Context, args *admin.DeleteProjectInvitationApiParams) admin.DeleteProjectInvitationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectInvitationWithParams")
	}

	var r0 admin.DeleteProjectInvitationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteProjectInvitationApiParams) admin.DeleteProjectInvitationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteProjectInvitationApiRequest)
	}

	return r0
}

// ProjectsApi_DeleteProjectInvitationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectInvitationWithParams'
type ProjectsApi_DeleteProjectInvitationWithParams_Call struct {
	*mock.Call
}

// DeleteProjectInvitationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteProjectInvitationApiParams
func (_e *ProjectsApi_Expecter) DeleteProjectInvitationWithParams(ctx interface{}, args interface{}) *ProjectsApi_DeleteProjectInvitationWithParams_Call {
	return &ProjectsApi_DeleteProjectInvitationWithParams_Call{Call: _e.mock.On("DeleteProjectInvitationWithParams", ctx, args)}
}

func (_c *ProjectsApi_DeleteProjectInvitationWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteProjectInvitationApiParams)) *ProjectsApi_DeleteProjectInvitationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteProjectInvitationApiParams))
	})
	return _c
}

func (_c *ProjectsApi_DeleteProjectInvitationWithParams_Call) Return(_a0 admin.DeleteProjectInvitationApiRequest) *ProjectsApi_DeleteProjectInvitationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_DeleteProjectInvitationWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteProjectInvitationApiParams) admin.DeleteProjectInvitationApiRequest) *ProjectsApi_DeleteProjectInvitationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectLimit provides a mock function with given fields: ctx, limitName, groupId
func (_m *ProjectsApi) DeleteProjectLimit(ctx context.Context, limitName string, groupId string) admin.DeleteProjectLimitApiRequest {
	ret := _m.Called(ctx, limitName, groupId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectLimit")
	}

	var r0 admin.DeleteProjectLimitApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteProjectLimitApiRequest); ok {
		r0 = rf(ctx, limitName, groupId)
	} else {
		r0 = ret.Get(0).(admin.DeleteProjectLimitApiRequest)
	}

	return r0
}

// ProjectsApi_DeleteProjectLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectLimit'
type ProjectsApi_DeleteProjectLimit_Call struct {
	*mock.Call
}

// DeleteProjectLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - limitName string
//   - groupId string
func (_e *ProjectsApi_Expecter) DeleteProjectLimit(ctx interface{}, limitName interface{}, groupId interface{}) *ProjectsApi_DeleteProjectLimit_Call {
	return &ProjectsApi_DeleteProjectLimit_Call{Call: _e.mock.On("DeleteProjectLimit", ctx, limitName, groupId)}
}

func (_c *ProjectsApi_DeleteProjectLimit_Call) Run(run func(ctx context.Context, limitName string, groupId string)) *ProjectsApi_DeleteProjectLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ProjectsApi_DeleteProjectLimit_Call) Return(_a0 admin.DeleteProjectLimitApiRequest) *ProjectsApi_DeleteProjectLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_DeleteProjectLimit_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteProjectLimitApiRequest) *ProjectsApi_DeleteProjectLimit_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectLimitExecute provides a mock function with given fields: r
func (_m *ProjectsApi) DeleteProjectLimitExecute(r admin.DeleteProjectLimitApiRequest) (map[string]interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectLimitExecute")
	}

	var r0 map[string]interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DeleteProjectLimitApiRequest) (map[string]interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteProjectLimitApiRequest) map[string]interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteProjectLimitApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DeleteProjectLimitApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_DeleteProjectLimitExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectLimitExecute'
type ProjectsApi_DeleteProjectLimitExecute_Call struct {
	*mock.Call
}

// DeleteProjectLimitExecute is a helper method to define mock.On call
//   - r admin.DeleteProjectLimitApiRequest
func (_e *ProjectsApi_Expecter) DeleteProjectLimitExecute(r interface{}) *ProjectsApi_DeleteProjectLimitExecute_Call {
	return &ProjectsApi_DeleteProjectLimitExecute_Call{Call: _e.mock.On("DeleteProjectLimitExecute", r)}
}

func (_c *ProjectsApi_DeleteProjectLimitExecute_Call) Run(run func(r admin.DeleteProjectLimitApiRequest)) *ProjectsApi_DeleteProjectLimitExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteProjectLimitApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_DeleteProjectLimitExecute_Call) Return(_a0 map[string]interface{}, _a1 *http.Response, _a2 error) *ProjectsApi_DeleteProjectLimitExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_DeleteProjectLimitExecute_Call) RunAndReturn(run func(admin.DeleteProjectLimitApiRequest) (map[string]interface{}, *http.Response, error)) *ProjectsApi_DeleteProjectLimitExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectLimitWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) DeleteProjectLimitWithParams(ctx context.Context, args *admin.DeleteProjectLimitApiParams) admin.DeleteProjectLimitApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectLimitWithParams")
	}

	var r0 admin.DeleteProjectLimitApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteProjectLimitApiParams) admin.DeleteProjectLimitApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteProjectLimitApiRequest)
	}

	return r0
}

// ProjectsApi_DeleteProjectLimitWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectLimitWithParams'
type ProjectsApi_DeleteProjectLimitWithParams_Call struct {
	*mock.Call
}

// DeleteProjectLimitWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteProjectLimitApiParams
func (_e *ProjectsApi_Expecter) DeleteProjectLimitWithParams(ctx interface{}, args interface{}) *ProjectsApi_DeleteProjectLimitWithParams_Call {
	return &ProjectsApi_DeleteProjectLimitWithParams_Call{Call: _e.mock.On("DeleteProjectLimitWithParams", ctx, args)}
}

func (_c *ProjectsApi_DeleteProjectLimitWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteProjectLimitApiParams)) *ProjectsApi_DeleteProjectLimitWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteProjectLimitApiParams))
	})
	return _c
}

func (_c *ProjectsApi_DeleteProjectLimitWithParams_Call) Return(_a0 admin.DeleteProjectLimitApiRequest) *ProjectsApi_DeleteProjectLimitWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_DeleteProjectLimitWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteProjectLimitApiParams) admin.DeleteProjectLimitApiRequest) *ProjectsApi_DeleteProjectLimitWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) DeleteProjectWithParams(ctx context.Context, args *admin.DeleteProjectApiParams) admin.DeleteProjectApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectWithParams")
	}

	var r0 admin.DeleteProjectApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteProjectApiParams) admin.DeleteProjectApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteProjectApiRequest)
	}

	return r0
}

// ProjectsApi_DeleteProjectWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectWithParams'
type ProjectsApi_DeleteProjectWithParams_Call struct {
	*mock.Call
}

// DeleteProjectWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteProjectApiParams
func (_e *ProjectsApi_Expecter) DeleteProjectWithParams(ctx interface{}, args interface{}) *ProjectsApi_DeleteProjectWithParams_Call {
	return &ProjectsApi_DeleteProjectWithParams_Call{Call: _e.mock.On("DeleteProjectWithParams", ctx, args)}
}

func (_c *ProjectsApi_DeleteProjectWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteProjectApiParams)) *ProjectsApi_DeleteProjectWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteProjectApiParams))
	})
	return _c
}

func (_c *ProjectsApi_DeleteProjectWithParams_Call) Return(_a0 admin.DeleteProjectApiRequest) *ProjectsApi_DeleteProjectWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_DeleteProjectWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteProjectApiParams) admin.DeleteProjectApiRequest) *ProjectsApi_DeleteProjectWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetProject provides a mock function with given fields: ctx, groupId
func (_m *ProjectsApi) GetProject(ctx context.Context, groupId string) admin.GetProjectApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 admin.GetProjectApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetProjectApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.GetProjectApiRequest)
	}

	return r0
}

// ProjectsApi_GetProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProject'
type ProjectsApi_GetProject_Call struct {
	*mock.Call
}

// GetProject is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *ProjectsApi_Expecter) GetProject(ctx interface{}, groupId interface{}) *ProjectsApi_GetProject_Call {
	return &ProjectsApi_GetProject_Call{Call: _e.mock.On("GetProject", ctx, groupId)}
}

func (_c *ProjectsApi_GetProject_Call) Run(run func(ctx context.Context, groupId string)) *ProjectsApi_GetProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProjectsApi_GetProject_Call) Return(_a0 admin.GetProjectApiRequest) *ProjectsApi_GetProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_GetProject_Call) RunAndReturn(run func(context.Context, string) admin.GetProjectApiRequest) *ProjectsApi_GetProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectByName provides a mock function with given fields: ctx, groupName
func (_m *ProjectsApi) GetProjectByName(ctx context.Context, groupName string) admin.GetProjectByNameApiRequest {
	ret := _m.Called(ctx, groupName)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectByName")
	}

	var r0 admin.GetProjectByNameApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetProjectByNameApiRequest); ok {
		r0 = rf(ctx, groupName)
	} else {
		r0 = ret.Get(0).(admin.GetProjectByNameApiRequest)
	}

	return r0
}

// ProjectsApi_GetProjectByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectByName'
type ProjectsApi_GetProjectByName_Call struct {
	*mock.Call
}

// GetProjectByName is a helper method to define mock.On call
//   - ctx context.Context
//   - groupName string
func (_e *ProjectsApi_Expecter) GetProjectByName(ctx interface{}, groupName interface{}) *ProjectsApi_GetProjectByName_Call {
	return &ProjectsApi_GetProjectByName_Call{Call: _e.mock.On("GetProjectByName", ctx, groupName)}
}

func (_c *ProjectsApi_GetProjectByName_Call) Run(run func(ctx context.Context, groupName string)) *ProjectsApi_GetProjectByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProjectsApi_GetProjectByName_Call) Return(_a0 admin.GetProjectByNameApiRequest) *ProjectsApi_GetProjectByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_GetProjectByName_Call) RunAndReturn(run func(context.Context, string) admin.GetProjectByNameApiRequest) *ProjectsApi_GetProjectByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectByNameExecute provides a mock function with given fields: r
func (_m *ProjectsApi) GetProjectByNameExecute(r admin.GetProjectByNameApiRequest) (*admin.Group, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectByNameExecute")
	}

	var r0 *admin.Group
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetProjectByNameApiRequest) (*admin.Group, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetProjectByNameApiRequest) *admin.Group); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetProjectByNameApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetProjectByNameApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_GetProjectByNameExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectByNameExecute'
type ProjectsApi_GetProjectByNameExecute_Call struct {
	*mock.Call
}

// GetProjectByNameExecute is a helper method to define mock.On call
//   - r admin.GetProjectByNameApiRequest
func (_e *ProjectsApi_Expecter) GetProjectByNameExecute(r interface{}) *ProjectsApi_GetProjectByNameExecute_Call {
	return &ProjectsApi_GetProjectByNameExecute_Call{Call: _e.mock.On("GetProjectByNameExecute", r)}
}

func (_c *ProjectsApi_GetProjectByNameExecute_Call) Run(run func(r admin.GetProjectByNameApiRequest)) *ProjectsApi_GetProjectByNameExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetProjectByNameApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_GetProjectByNameExecute_Call) Return(_a0 *admin.Group, _a1 *http.Response, _a2 error) *ProjectsApi_GetProjectByNameExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_GetProjectByNameExecute_Call) RunAndReturn(run func(admin.GetProjectByNameApiRequest) (*admin.Group, *http.Response, error)) *ProjectsApi_GetProjectByNameExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectByNameWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) GetProjectByNameWithParams(ctx context.Context, args *admin.GetProjectByNameApiParams) admin.GetProjectByNameApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectByNameWithParams")
	}

	var r0 admin.GetProjectByNameApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetProjectByNameApiParams) admin.GetProjectByNameApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetProjectByNameApiRequest)
	}

	return r0
}

// ProjectsApi_GetProjectByNameWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectByNameWithParams'
type ProjectsApi_GetProjectByNameWithParams_Call struct {
	*mock.Call
}

// GetProjectByNameWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetProjectByNameApiParams
func (_e *ProjectsApi_Expecter) GetProjectByNameWithParams(ctx interface{}, args interface{}) *ProjectsApi_GetProjectByNameWithParams_Call {
	return &ProjectsApi_GetProjectByNameWithParams_Call{Call: _e.mock.On("GetProjectByNameWithParams", ctx, args)}
}

func (_c *ProjectsApi_GetProjectByNameWithParams_Call) Run(run func(ctx context.Context, args *admin.GetProjectByNameApiParams)) *ProjectsApi_GetProjectByNameWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetProjectByNameApiParams))
	})
	return _c
}

func (_c *ProjectsApi_GetProjectByNameWithParams_Call) Return(_a0 admin.GetProjectByNameApiRequest) *ProjectsApi_GetProjectByNameWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_GetProjectByNameWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetProjectByNameApiParams) admin.GetProjectByNameApiRequest) *ProjectsApi_GetProjectByNameWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectExecute provides a mock function with given fields: r
func (_m *ProjectsApi) GetProjectExecute(r admin.GetProjectApiRequest) (*admin.Group, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectExecute")
	}

	var r0 *admin.Group
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetProjectApiRequest) (*admin.Group, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetProjectApiRequest) *admin.Group); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetProjectApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetProjectApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_GetProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectExecute'
type ProjectsApi_GetProjectExecute_Call struct {
	*mock.Call
}

// GetProjectExecute is a helper method to define mock.On call
//   - r admin.GetProjectApiRequest
func (_e *ProjectsApi_Expecter) GetProjectExecute(r interface{}) *ProjectsApi_GetProjectExecute_Call {
	return &ProjectsApi_GetProjectExecute_Call{Call: _e.mock.On("GetProjectExecute", r)}
}

func (_c *ProjectsApi_GetProjectExecute_Call) Run(run func(r admin.GetProjectApiRequest)) *ProjectsApi_GetProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetProjectApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_GetProjectExecute_Call) Return(_a0 *admin.Group, _a1 *http.Response, _a2 error) *ProjectsApi_GetProjectExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_GetProjectExecute_Call) RunAndReturn(run func(admin.GetProjectApiRequest) (*admin.Group, *http.Response, error)) *ProjectsApi_GetProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectInvitation provides a mock function with given fields: ctx, groupId, invitationId
func (_m *ProjectsApi) GetProjectInvitation(ctx context.Context, groupId string, invitationId string) admin.GetProjectInvitationApiRequest {
	ret := _m.Called(ctx, groupId, invitationId)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectInvitation")
	}

	var r0 admin.GetProjectInvitationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetProjectInvitationApiRequest); ok {
		r0 = rf(ctx, groupId, invitationId)
	} else {
		r0 = ret.Get(0).(admin.GetProjectInvitationApiRequest)
	}

	return r0
}

// ProjectsApi_GetProjectInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectInvitation'
type ProjectsApi_GetProjectInvitation_Call struct {
	*mock.Call
}

// GetProjectInvitation is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - invitationId string
func (_e *ProjectsApi_Expecter) GetProjectInvitation(ctx interface{}, groupId interface{}, invitationId interface{}) *ProjectsApi_GetProjectInvitation_Call {
	return &ProjectsApi_GetProjectInvitation_Call{Call: _e.mock.On("GetProjectInvitation", ctx, groupId, invitationId)}
}

func (_c *ProjectsApi_GetProjectInvitation_Call) Run(run func(ctx context.Context, groupId string, invitationId string)) *ProjectsApi_GetProjectInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ProjectsApi_GetProjectInvitation_Call) Return(_a0 admin.GetProjectInvitationApiRequest) *ProjectsApi_GetProjectInvitation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_GetProjectInvitation_Call) RunAndReturn(run func(context.Context, string, string) admin.GetProjectInvitationApiRequest) *ProjectsApi_GetProjectInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectInvitationExecute provides a mock function with given fields: r
func (_m *ProjectsApi) GetProjectInvitationExecute(r admin.GetProjectInvitationApiRequest) (*admin.GroupInvitation, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectInvitationExecute")
	}

	var r0 *admin.GroupInvitation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetProjectInvitationApiRequest) (*admin.GroupInvitation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetProjectInvitationApiRequest) *admin.GroupInvitation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetProjectInvitationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetProjectInvitationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_GetProjectInvitationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectInvitationExecute'
type ProjectsApi_GetProjectInvitationExecute_Call struct {
	*mock.Call
}

// GetProjectInvitationExecute is a helper method to define mock.On call
//   - r admin.GetProjectInvitationApiRequest
func (_e *ProjectsApi_Expecter) GetProjectInvitationExecute(r interface{}) *ProjectsApi_GetProjectInvitationExecute_Call {
	return &ProjectsApi_GetProjectInvitationExecute_Call{Call: _e.mock.On("GetProjectInvitationExecute", r)}
}

func (_c *ProjectsApi_GetProjectInvitationExecute_Call) Run(run func(r admin.GetProjectInvitationApiRequest)) *ProjectsApi_GetProjectInvitationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetProjectInvitationApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_GetProjectInvitationExecute_Call) Return(_a0 *admin.GroupInvitation, _a1 *http.Response, _a2 error) *ProjectsApi_GetProjectInvitationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_GetProjectInvitationExecute_Call) RunAndReturn(run func(admin.GetProjectInvitationApiRequest) (*admin.GroupInvitation, *http.Response, error)) *ProjectsApi_GetProjectInvitationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectInvitationWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) GetProjectInvitationWithParams(ctx context.Context, args *admin.GetProjectInvitationApiParams) admin.GetProjectInvitationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectInvitationWithParams")
	}

	var r0 admin.GetProjectInvitationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetProjectInvitationApiParams) admin.GetProjectInvitationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetProjectInvitationApiRequest)
	}

	return r0
}

// ProjectsApi_GetProjectInvitationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectInvitationWithParams'
type ProjectsApi_GetProjectInvitationWithParams_Call struct {
	*mock.Call
}

// GetProjectInvitationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetProjectInvitationApiParams
func (_e *ProjectsApi_Expecter) GetProjectInvitationWithParams(ctx interface{}, args interface{}) *ProjectsApi_GetProjectInvitationWithParams_Call {
	return &ProjectsApi_GetProjectInvitationWithParams_Call{Call: _e.mock.On("GetProjectInvitationWithParams", ctx, args)}
}

func (_c *ProjectsApi_GetProjectInvitationWithParams_Call) Run(run func(ctx context.Context, args *admin.GetProjectInvitationApiParams)) *ProjectsApi_GetProjectInvitationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetProjectInvitationApiParams))
	})
	return _c
}

func (_c *ProjectsApi_GetProjectInvitationWithParams_Call) Return(_a0 admin.GetProjectInvitationApiRequest) *ProjectsApi_GetProjectInvitationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_GetProjectInvitationWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetProjectInvitationApiParams) admin.GetProjectInvitationApiRequest) *ProjectsApi_GetProjectInvitationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectLimit provides a mock function with given fields: ctx, limitName, groupId
func (_m *ProjectsApi) GetProjectLimit(ctx context.Context, limitName string, groupId string) admin.GetProjectLimitApiRequest {
	ret := _m.Called(ctx, limitName, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectLimit")
	}

	var r0 admin.GetProjectLimitApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetProjectLimitApiRequest); ok {
		r0 = rf(ctx, limitName, groupId)
	} else {
		r0 = ret.Get(0).(admin.GetProjectLimitApiRequest)
	}

	return r0
}

// ProjectsApi_GetProjectLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectLimit'
type ProjectsApi_GetProjectLimit_Call struct {
	*mock.Call
}

// GetProjectLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - limitName string
//   - groupId string
func (_e *ProjectsApi_Expecter) GetProjectLimit(ctx interface{}, limitName interface{}, groupId interface{}) *ProjectsApi_GetProjectLimit_Call {
	return &ProjectsApi_GetProjectLimit_Call{Call: _e.mock.On("GetProjectLimit", ctx, limitName, groupId)}
}

func (_c *ProjectsApi_GetProjectLimit_Call) Run(run func(ctx context.Context, limitName string, groupId string)) *ProjectsApi_GetProjectLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ProjectsApi_GetProjectLimit_Call) Return(_a0 admin.GetProjectLimitApiRequest) *ProjectsApi_GetProjectLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_GetProjectLimit_Call) RunAndReturn(run func(context.Context, string, string) admin.GetProjectLimitApiRequest) *ProjectsApi_GetProjectLimit_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectLimitExecute provides a mock function with given fields: r
func (_m *ProjectsApi) GetProjectLimitExecute(r admin.GetProjectLimitApiRequest) (*admin.DataFederationLimit, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectLimitExecute")
	}

	var r0 *admin.DataFederationLimit
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetProjectLimitApiRequest) (*admin.DataFederationLimit, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetProjectLimitApiRequest) *admin.DataFederationLimit); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DataFederationLimit)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetProjectLimitApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetProjectLimitApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_GetProjectLimitExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectLimitExecute'
type ProjectsApi_GetProjectLimitExecute_Call struct {
	*mock.Call
}

// GetProjectLimitExecute is a helper method to define mock.On call
//   - r admin.GetProjectLimitApiRequest
func (_e *ProjectsApi_Expecter) GetProjectLimitExecute(r interface{}) *ProjectsApi_GetProjectLimitExecute_Call {
	return &ProjectsApi_GetProjectLimitExecute_Call{Call: _e.mock.On("GetProjectLimitExecute", r)}
}

func (_c *ProjectsApi_GetProjectLimitExecute_Call) Run(run func(r admin.GetProjectLimitApiRequest)) *ProjectsApi_GetProjectLimitExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetProjectLimitApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_GetProjectLimitExecute_Call) Return(_a0 *admin.DataFederationLimit, _a1 *http.Response, _a2 error) *ProjectsApi_GetProjectLimitExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_GetProjectLimitExecute_Call) RunAndReturn(run func(admin.GetProjectLimitApiRequest) (*admin.DataFederationLimit, *http.Response, error)) *ProjectsApi_GetProjectLimitExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectLimitWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) GetProjectLimitWithParams(ctx context.Context, args *admin.GetProjectLimitApiParams) admin.GetProjectLimitApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectLimitWithParams")
	}

	var r0 admin.GetProjectLimitApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetProjectLimitApiParams) admin.GetProjectLimitApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetProjectLimitApiRequest)
	}

	return r0
}

// ProjectsApi_GetProjectLimitWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectLimitWithParams'
type ProjectsApi_GetProjectLimitWithParams_Call struct {
	*mock.Call
}

// GetProjectLimitWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetProjectLimitApiParams
func (_e *ProjectsApi_Expecter) GetProjectLimitWithParams(ctx interface{}, args interface{}) *ProjectsApi_GetProjectLimitWithParams_Call {
	return &ProjectsApi_GetProjectLimitWithParams_Call{Call: _e.mock.On("GetProjectLimitWithParams", ctx, args)}
}

func (_c *ProjectsApi_GetProjectLimitWithParams_Call) Run(run func(ctx context.Context, args *admin.GetProjectLimitApiParams)) *ProjectsApi_GetProjectLimitWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetProjectLimitApiParams))
	})
	return _c
}

func (_c *ProjectsApi_GetProjectLimitWithParams_Call) Return(_a0 admin.GetProjectLimitApiRequest) *ProjectsApi_GetProjectLimitWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_GetProjectLimitWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetProjectLimitApiParams) admin.GetProjectLimitApiRequest) *ProjectsApi_GetProjectLimitWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectSettings provides a mock function with given fields: ctx, groupId
func (_m *ProjectsApi) GetProjectSettings(ctx context.Context, groupId string) admin.GetProjectSettingsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectSettings")
	}

	var r0 admin.GetProjectSettingsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetProjectSettingsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.GetProjectSettingsApiRequest)
	}

	return r0
}

// ProjectsApi_GetProjectSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectSettings'
type ProjectsApi_GetProjectSettings_Call struct {
	*mock.Call
}

// GetProjectSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *ProjectsApi_Expecter) GetProjectSettings(ctx interface{}, groupId interface{}) *ProjectsApi_GetProjectSettings_Call {
	return &ProjectsApi_GetProjectSettings_Call{Call: _e.mock.On("GetProjectSettings", ctx, groupId)}
}

func (_c *ProjectsApi_GetProjectSettings_Call) Run(run func(ctx context.Context, groupId string)) *ProjectsApi_GetProjectSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProjectsApi_GetProjectSettings_Call) Return(_a0 admin.GetProjectSettingsApiRequest) *ProjectsApi_GetProjectSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_GetProjectSettings_Call) RunAndReturn(run func(context.Context, string) admin.GetProjectSettingsApiRequest) *ProjectsApi_GetProjectSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectSettingsExecute provides a mock function with given fields: r
func (_m *ProjectsApi) GetProjectSettingsExecute(r admin.GetProjectSettingsApiRequest) (*admin.GroupSettings, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectSettingsExecute")
	}

	var r0 *admin.GroupSettings
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetProjectSettingsApiRequest) (*admin.GroupSettings, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetProjectSettingsApiRequest) *admin.GroupSettings); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetProjectSettingsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetProjectSettingsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_GetProjectSettingsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectSettingsExecute'
type ProjectsApi_GetProjectSettingsExecute_Call struct {
	*mock.Call
}

// GetProjectSettingsExecute is a helper method to define mock.On call
//   - r admin.GetProjectSettingsApiRequest
func (_e *ProjectsApi_Expecter) GetProjectSettingsExecute(r interface{}) *ProjectsApi_GetProjectSettingsExecute_Call {
	return &ProjectsApi_GetProjectSettingsExecute_Call{Call: _e.mock.On("GetProjectSettingsExecute", r)}
}

func (_c *ProjectsApi_GetProjectSettingsExecute_Call) Run(run func(r admin.GetProjectSettingsApiRequest)) *ProjectsApi_GetProjectSettingsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetProjectSettingsApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_GetProjectSettingsExecute_Call) Return(_a0 *admin.GroupSettings, _a1 *http.Response, _a2 error) *ProjectsApi_GetProjectSettingsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_GetProjectSettingsExecute_Call) RunAndReturn(run func(admin.GetProjectSettingsApiRequest) (*admin.GroupSettings, *http.Response, error)) *ProjectsApi_GetProjectSettingsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectSettingsWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) GetProjectSettingsWithParams(ctx context.Context, args *admin.GetProjectSettingsApiParams) admin.GetProjectSettingsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectSettingsWithParams")
	}

	var r0 admin.GetProjectSettingsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetProjectSettingsApiParams) admin.GetProjectSettingsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetProjectSettingsApiRequest)
	}

	return r0
}

// ProjectsApi_GetProjectSettingsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectSettingsWithParams'
type ProjectsApi_GetProjectSettingsWithParams_Call struct {
	*mock.Call
}

// GetProjectSettingsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetProjectSettingsApiParams
func (_e *ProjectsApi_Expecter) GetProjectSettingsWithParams(ctx interface{}, args interface{}) *ProjectsApi_GetProjectSettingsWithParams_Call {
	return &ProjectsApi_GetProjectSettingsWithParams_Call{Call: _e.mock.On("GetProjectSettingsWithParams", ctx, args)}
}

func (_c *ProjectsApi_GetProjectSettingsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetProjectSettingsApiParams)) *ProjectsApi_GetProjectSettingsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetProjectSettingsApiParams))
	})
	return _c
}

func (_c *ProjectsApi_GetProjectSettingsWithParams_Call) Return(_a0 admin.GetProjectSettingsApiRequest) *ProjectsApi_GetProjectSettingsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_GetProjectSettingsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetProjectSettingsApiParams) admin.GetProjectSettingsApiRequest) *ProjectsApi_GetProjectSettingsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) GetProjectWithParams(ctx context.Context, args *admin.GetProjectApiParams) admin.GetProjectApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectWithParams")
	}

	var r0 admin.GetProjectApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetProjectApiParams) admin.GetProjectApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetProjectApiRequest)
	}

	return r0
}

// ProjectsApi_GetProjectWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectWithParams'
type ProjectsApi_GetProjectWithParams_Call struct {
	*mock.Call
}

// GetProjectWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetProjectApiParams
func (_e *ProjectsApi_Expecter) GetProjectWithParams(ctx interface{}, args interface{}) *ProjectsApi_GetProjectWithParams_Call {
	return &ProjectsApi_GetProjectWithParams_Call{Call: _e.mock.On("GetProjectWithParams", ctx, args)}
}

func (_c *ProjectsApi_GetProjectWithParams_Call) Run(run func(ctx context.Context, args *admin.GetProjectApiParams)) *ProjectsApi_GetProjectWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetProjectApiParams))
	})
	return _c
}

func (_c *ProjectsApi_GetProjectWithParams_Call) Return(_a0 admin.GetProjectApiRequest) *ProjectsApi_GetProjectWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_GetProjectWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetProjectApiParams) admin.GetProjectApiRequest) *ProjectsApi_GetProjectWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectInvitations provides a mock function with given fields: ctx, groupId
func (_m *ProjectsApi) ListProjectInvitations(ctx context.Context, groupId string) admin.ListProjectInvitationsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectInvitations")
	}

	var r0 admin.ListProjectInvitationsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListProjectInvitationsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListProjectInvitationsApiRequest)
	}

	return r0
}

// ProjectsApi_ListProjectInvitations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectInvitations'
type ProjectsApi_ListProjectInvitations_Call struct {
	*mock.Call
}

// ListProjectInvitations is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *ProjectsApi_Expecter) ListProjectInvitations(ctx interface{}, groupId interface{}) *ProjectsApi_ListProjectInvitations_Call {
	return &ProjectsApi_ListProjectInvitations_Call{Call: _e.mock.On("ListProjectInvitations", ctx, groupId)}
}

func (_c *ProjectsApi_ListProjectInvitations_Call) Run(run func(ctx context.Context, groupId string)) *ProjectsApi_ListProjectInvitations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProjectsApi_ListProjectInvitations_Call) Return(_a0 admin.ListProjectInvitationsApiRequest) *ProjectsApi_ListProjectInvitations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_ListProjectInvitations_Call) RunAndReturn(run func(context.Context, string) admin.ListProjectInvitationsApiRequest) *ProjectsApi_ListProjectInvitations_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectInvitationsExecute provides a mock function with given fields: r
func (_m *ProjectsApi) ListProjectInvitationsExecute(r admin.ListProjectInvitationsApiRequest) ([]admin.GroupInvitation, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectInvitationsExecute")
	}

	var r0 []admin.GroupInvitation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListProjectInvitationsApiRequest) ([]admin.GroupInvitation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListProjectInvitationsApiRequest) []admin.GroupInvitation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.GroupInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListProjectInvitationsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListProjectInvitationsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_ListProjectInvitationsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectInvitationsExecute'
type ProjectsApi_ListProjectInvitationsExecute_Call struct {
	*mock.Call
}

// ListProjectInvitationsExecute is a helper method to define mock.On call
//   - r admin.ListProjectInvitationsApiRequest
func (_e *ProjectsApi_Expecter) ListProjectInvitationsExecute(r interface{}) *ProjectsApi_ListProjectInvitationsExecute_Call {
	return &ProjectsApi_ListProjectInvitationsExecute_Call{Call: _e.mock.On("ListProjectInvitationsExecute", r)}
}

func (_c *ProjectsApi_ListProjectInvitationsExecute_Call) Run(run func(r admin.ListProjectInvitationsApiRequest)) *ProjectsApi_ListProjectInvitationsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListProjectInvitationsApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_ListProjectInvitationsExecute_Call) Return(_a0 []admin.GroupInvitation, _a1 *http.Response, _a2 error) *ProjectsApi_ListProjectInvitationsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_ListProjectInvitationsExecute_Call) RunAndReturn(run func(admin.ListProjectInvitationsApiRequest) ([]admin.GroupInvitation, *http.Response, error)) *ProjectsApi_ListProjectInvitationsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectInvitationsWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) ListProjectInvitationsWithParams(ctx context.Context, args *admin.ListProjectInvitationsApiParams) admin.ListProjectInvitationsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectInvitationsWithParams")
	}

	var r0 admin.ListProjectInvitationsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListProjectInvitationsApiParams) admin.ListProjectInvitationsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListProjectInvitationsApiRequest)
	}

	return r0
}

// ProjectsApi_ListProjectInvitationsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectInvitationsWithParams'
type ProjectsApi_ListProjectInvitationsWithParams_Call struct {
	*mock.Call
}

// ListProjectInvitationsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListProjectInvitationsApiParams
func (_e *ProjectsApi_Expecter) ListProjectInvitationsWithParams(ctx interface{}, args interface{}) *ProjectsApi_ListProjectInvitationsWithParams_Call {
	return &ProjectsApi_ListProjectInvitationsWithParams_Call{Call: _e.mock.On("ListProjectInvitationsWithParams", ctx, args)}
}

func (_c *ProjectsApi_ListProjectInvitationsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListProjectInvitationsApiParams)) *ProjectsApi_ListProjectInvitationsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListProjectInvitationsApiParams))
	})
	return _c
}

func (_c *ProjectsApi_ListProjectInvitationsWithParams_Call) Return(_a0 admin.ListProjectInvitationsApiRequest) *ProjectsApi_ListProjectInvitationsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_ListProjectInvitationsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListProjectInvitationsApiParams) admin.ListProjectInvitationsApiRequest) *ProjectsApi_ListProjectInvitationsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectLimits provides a mock function with given fields: ctx, groupId
func (_m *ProjectsApi) ListProjectLimits(ctx context.Context, groupId string) admin.ListProjectLimitsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectLimits")
	}

	var r0 admin.ListProjectLimitsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListProjectLimitsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListProjectLimitsApiRequest)
	}

	return r0
}

// ProjectsApi_ListProjectLimits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectLimits'
type ProjectsApi_ListProjectLimits_Call struct {
	*mock.Call
}

// ListProjectLimits is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *ProjectsApi_Expecter) ListProjectLimits(ctx interface{}, groupId interface{}) *ProjectsApi_ListProjectLimits_Call {
	return &ProjectsApi_ListProjectLimits_Call{Call: _e.mock.On("ListProjectLimits", ctx, groupId)}
}

func (_c *ProjectsApi_ListProjectLimits_Call) Run(run func(ctx context.Context, groupId string)) *ProjectsApi_ListProjectLimits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProjectsApi_ListProjectLimits_Call) Return(_a0 admin.ListProjectLimitsApiRequest) *ProjectsApi_ListProjectLimits_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_ListProjectLimits_Call) RunAndReturn(run func(context.Context, string) admin.ListProjectLimitsApiRequest) *ProjectsApi_ListProjectLimits_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectLimitsExecute provides a mock function with given fields: r
func (_m *ProjectsApi) ListProjectLimitsExecute(r admin.ListProjectLimitsApiRequest) ([]admin.DataFederationLimit, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectLimitsExecute")
	}

	var r0 []admin.DataFederationLimit
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListProjectLimitsApiRequest) ([]admin.DataFederationLimit, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListProjectLimitsApiRequest) []admin.DataFederationLimit); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.DataFederationLimit)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListProjectLimitsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListProjectLimitsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_ListProjectLimitsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectLimitsExecute'
type ProjectsApi_ListProjectLimitsExecute_Call struct {
	*mock.Call
}

// ListProjectLimitsExecute is a helper method to define mock.On call
//   - r admin.ListProjectLimitsApiRequest
func (_e *ProjectsApi_Expecter) ListProjectLimitsExecute(r interface{}) *ProjectsApi_ListProjectLimitsExecute_Call {
	return &ProjectsApi_ListProjectLimitsExecute_Call{Call: _e.mock.On("ListProjectLimitsExecute", r)}
}

func (_c *ProjectsApi_ListProjectLimitsExecute_Call) Run(run func(r admin.ListProjectLimitsApiRequest)) *ProjectsApi_ListProjectLimitsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListProjectLimitsApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_ListProjectLimitsExecute_Call) Return(_a0 []admin.DataFederationLimit, _a1 *http.Response, _a2 error) *ProjectsApi_ListProjectLimitsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_ListProjectLimitsExecute_Call) RunAndReturn(run func(admin.ListProjectLimitsApiRequest) ([]admin.DataFederationLimit, *http.Response, error)) *ProjectsApi_ListProjectLimitsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectLimitsWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) ListProjectLimitsWithParams(ctx context.Context, args *admin.ListProjectLimitsApiParams) admin.ListProjectLimitsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectLimitsWithParams")
	}

	var r0 admin.ListProjectLimitsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListProjectLimitsApiParams) admin.ListProjectLimitsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListProjectLimitsApiRequest)
	}

	return r0
}

// ProjectsApi_ListProjectLimitsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectLimitsWithParams'
type ProjectsApi_ListProjectLimitsWithParams_Call struct {
	*mock.Call
}

// ListProjectLimitsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListProjectLimitsApiParams
func (_e *ProjectsApi_Expecter) ListProjectLimitsWithParams(ctx interface{}, args interface{}) *ProjectsApi_ListProjectLimitsWithParams_Call {
	return &ProjectsApi_ListProjectLimitsWithParams_Call{Call: _e.mock.On("ListProjectLimitsWithParams", ctx, args)}
}

func (_c *ProjectsApi_ListProjectLimitsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListProjectLimitsApiParams)) *ProjectsApi_ListProjectLimitsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListProjectLimitsApiParams))
	})
	return _c
}

func (_c *ProjectsApi_ListProjectLimitsWithParams_Call) Return(_a0 admin.ListProjectLimitsApiRequest) *ProjectsApi_ListProjectLimitsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_ListProjectLimitsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListProjectLimitsApiParams) admin.ListProjectLimitsApiRequest) *ProjectsApi_ListProjectLimitsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectUsers provides a mock function with given fields: ctx, groupId
func (_m *ProjectsApi) ListProjectUsers(ctx context.Context, groupId string) admin.ListProjectUsersApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectUsers")
	}

	var r0 admin.ListProjectUsersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListProjectUsersApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListProjectUsersApiRequest)
	}

	return r0
}

// ProjectsApi_ListProjectUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectUsers'
type ProjectsApi_ListProjectUsers_Call struct {
	*mock.Call
}

// ListProjectUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *ProjectsApi_Expecter) ListProjectUsers(ctx interface{}, groupId interface{}) *ProjectsApi_ListProjectUsers_Call {
	return &ProjectsApi_ListProjectUsers_Call{Call: _e.mock.On("ListProjectUsers", ctx, groupId)}
}

func (_c *ProjectsApi_ListProjectUsers_Call) Run(run func(ctx context.Context, groupId string)) *ProjectsApi_ListProjectUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProjectsApi_ListProjectUsers_Call) Return(_a0 admin.ListProjectUsersApiRequest) *ProjectsApi_ListProjectUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_ListProjectUsers_Call) RunAndReturn(run func(context.Context, string) admin.ListProjectUsersApiRequest) *ProjectsApi_ListProjectUsers_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectUsersExecute provides a mock function with given fields: r
func (_m *ProjectsApi) ListProjectUsersExecute(r admin.ListProjectUsersApiRequest) (*admin.PaginatedAppUser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectUsersExecute")
	}

	var r0 *admin.PaginatedAppUser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListProjectUsersApiRequest) (*admin.PaginatedAppUser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListProjectUsersApiRequest) *admin.PaginatedAppUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedAppUser)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListProjectUsersApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListProjectUsersApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_ListProjectUsersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectUsersExecute'
type ProjectsApi_ListProjectUsersExecute_Call struct {
	*mock.Call
}

// ListProjectUsersExecute is a helper method to define mock.On call
//   - r admin.ListProjectUsersApiRequest
func (_e *ProjectsApi_Expecter) ListProjectUsersExecute(r interface{}) *ProjectsApi_ListProjectUsersExecute_Call {
	return &ProjectsApi_ListProjectUsersExecute_Call{Call: _e.mock.On("ListProjectUsersExecute", r)}
}

func (_c *ProjectsApi_ListProjectUsersExecute_Call) Run(run func(r admin.ListProjectUsersApiRequest)) *ProjectsApi_ListProjectUsersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListProjectUsersApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_ListProjectUsersExecute_Call) Return(_a0 *admin.PaginatedAppUser, _a1 *http.Response, _a2 error) *ProjectsApi_ListProjectUsersExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_ListProjectUsersExecute_Call) RunAndReturn(run func(admin.ListProjectUsersApiRequest) (*admin.PaginatedAppUser, *http.Response, error)) *ProjectsApi_ListProjectUsersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectUsersWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) ListProjectUsersWithParams(ctx context.Context, args *admin.ListProjectUsersApiParams) admin.ListProjectUsersApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectUsersWithParams")
	}

	var r0 admin.ListProjectUsersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListProjectUsersApiParams) admin.ListProjectUsersApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListProjectUsersApiRequest)
	}

	return r0
}

// ProjectsApi_ListProjectUsersWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectUsersWithParams'
type ProjectsApi_ListProjectUsersWithParams_Call struct {
	*mock.Call
}

// ListProjectUsersWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListProjectUsersApiParams
func (_e *ProjectsApi_Expecter) ListProjectUsersWithParams(ctx interface{}, args interface{}) *ProjectsApi_ListProjectUsersWithParams_Call {
	return &ProjectsApi_ListProjectUsersWithParams_Call{Call: _e.mock.On("ListProjectUsersWithParams", ctx, args)}
}

func (_c *ProjectsApi_ListProjectUsersWithParams_Call) Run(run func(ctx context.Context, args *admin.ListProjectUsersApiParams)) *ProjectsApi_ListProjectUsersWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListProjectUsersApiParams))
	})
	return _c
}

func (_c *ProjectsApi_ListProjectUsersWithParams_Call) Return(_a0 admin.ListProjectUsersApiRequest) *ProjectsApi_ListProjectUsersWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_ListProjectUsersWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListProjectUsersApiParams) admin.ListProjectUsersApiRequest) *ProjectsApi_ListProjectUsersWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjects provides a mock function with given fields: ctx
func (_m *ProjectsApi) ListProjects(ctx context.Context) admin.ListProjectsApiRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListProjects")
	}

	var r0 admin.ListProjectsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context) admin.ListProjectsApiRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(admin.ListProjectsApiRequest)
	}

	return r0
}

// ProjectsApi_ListProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjects'
type ProjectsApi_ListProjects_Call struct {
	*mock.Call
}

// ListProjects is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ProjectsApi_Expecter) ListProjects(ctx interface{}) *ProjectsApi_ListProjects_Call {
	return &ProjectsApi_ListProjects_Call{Call: _e.mock.On("ListProjects", ctx)}
}

func (_c *ProjectsApi_ListProjects_Call) Run(run func(ctx context.Context)) *ProjectsApi_ListProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ProjectsApi_ListProjects_Call) Return(_a0 admin.ListProjectsApiRequest) *ProjectsApi_ListProjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_ListProjects_Call) RunAndReturn(run func(context.Context) admin.ListProjectsApiRequest) *ProjectsApi_ListProjects_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectsExecute provides a mock function with given fields: r
func (_m *ProjectsApi) ListProjectsExecute(r admin.ListProjectsApiRequest) (*admin.PaginatedAtlasGroup, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectsExecute")
	}

	var r0 *admin.PaginatedAtlasGroup
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListProjectsApiRequest) (*admin.PaginatedAtlasGroup, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListProjectsApiRequest) *admin.PaginatedAtlasGroup); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedAtlasGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListProjectsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListProjectsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_ListProjectsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectsExecute'
type ProjectsApi_ListProjectsExecute_Call struct {
	*mock.Call
}

// ListProjectsExecute is a helper method to define mock.On call
//   - r admin.ListProjectsApiRequest
func (_e *ProjectsApi_Expecter) ListProjectsExecute(r interface{}) *ProjectsApi_ListProjectsExecute_Call {
	return &ProjectsApi_ListProjectsExecute_Call{Call: _e.mock.On("ListProjectsExecute", r)}
}

func (_c *ProjectsApi_ListProjectsExecute_Call) Run(run func(r admin.ListProjectsApiRequest)) *ProjectsApi_ListProjectsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListProjectsApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_ListProjectsExecute_Call) Return(_a0 *admin.PaginatedAtlasGroup, _a1 *http.Response, _a2 error) *ProjectsApi_ListProjectsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_ListProjectsExecute_Call) RunAndReturn(run func(admin.ListProjectsApiRequest) (*admin.PaginatedAtlasGroup, *http.Response, error)) *ProjectsApi_ListProjectsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectsWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) ListProjectsWithParams(ctx context.Context, args *admin.ListProjectsApiParams) admin.ListProjectsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectsWithParams")
	}

	var r0 admin.ListProjectsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListProjectsApiParams) admin.ListProjectsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListProjectsApiRequest)
	}

	return r0
}

// ProjectsApi_ListProjectsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectsWithParams'
type ProjectsApi_ListProjectsWithParams_Call struct {
	*mock.Call
}

// ListProjectsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListProjectsApiParams
func (_e *ProjectsApi_Expecter) ListProjectsWithParams(ctx interface{}, args interface{}) *ProjectsApi_ListProjectsWithParams_Call {
	return &ProjectsApi_ListProjectsWithParams_Call{Call: _e.mock.On("ListProjectsWithParams", ctx, args)}
}

func (_c *ProjectsApi_ListProjectsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListProjectsApiParams)) *ProjectsApi_ListProjectsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListProjectsApiParams))
	})
	return _c
}

func (_c *ProjectsApi_ListProjectsWithParams_Call) Return(_a0 admin.ListProjectsApiRequest) *ProjectsApi_ListProjectsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_ListProjectsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListProjectsApiParams) admin.ListProjectsApiRequest) *ProjectsApi_ListProjectsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveProjectUser provides a mock function with given fields: ctx, groupId, userId
func (_m *ProjectsApi) RemoveProjectUser(ctx context.Context, groupId string, userId string) admin.RemoveProjectUserApiRequest {
	ret := _m.Called(ctx, groupId, userId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProjectUser")
	}

	var r0 admin.RemoveProjectUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.RemoveProjectUserApiRequest); ok {
		r0 = rf(ctx, groupId, userId)
	} else {
		r0 = ret.Get(0).(admin.RemoveProjectUserApiRequest)
	}

	return r0
}

// ProjectsApi_RemoveProjectUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveProjectUser'
type ProjectsApi_RemoveProjectUser_Call struct {
	*mock.Call
}

// RemoveProjectUser is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - userId string
func (_e *ProjectsApi_Expecter) RemoveProjectUser(ctx interface{}, groupId interface{}, userId interface{}) *ProjectsApi_RemoveProjectUser_Call {
	return &ProjectsApi_RemoveProjectUser_Call{Call: _e.mock.On("RemoveProjectUser", ctx, groupId, userId)}
}

func (_c *ProjectsApi_RemoveProjectUser_Call) Run(run func(ctx context.Context, groupId string, userId string)) *ProjectsApi_RemoveProjectUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ProjectsApi_RemoveProjectUser_Call) Return(_a0 admin.RemoveProjectUserApiRequest) *ProjectsApi_RemoveProjectUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_RemoveProjectUser_Call) RunAndReturn(run func(context.Context, string, string) admin.RemoveProjectUserApiRequest) *ProjectsApi_RemoveProjectUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveProjectUserExecute provides a mock function with given fields: r
func (_m *ProjectsApi) RemoveProjectUserExecute(r admin.RemoveProjectUserApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProjectUserExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.RemoveProjectUserApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.RemoveProjectUserApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.RemoveProjectUserApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectsApi_RemoveProjectUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveProjectUserExecute'
type ProjectsApi_RemoveProjectUserExecute_Call struct {
	*mock.Call
}

// RemoveProjectUserExecute is a helper method to define mock.On call
//   - r admin.RemoveProjectUserApiRequest
func (_e *ProjectsApi_Expecter) RemoveProjectUserExecute(r interface{}) *ProjectsApi_RemoveProjectUserExecute_Call {
	return &ProjectsApi_RemoveProjectUserExecute_Call{Call: _e.mock.On("RemoveProjectUserExecute", r)}
}

func (_c *ProjectsApi_RemoveProjectUserExecute_Call) Run(run func(r admin.RemoveProjectUserApiRequest)) *ProjectsApi_RemoveProjectUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.RemoveProjectUserApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_RemoveProjectUserExecute_Call) Return(_a0 *http.Response, _a1 error) *ProjectsApi_RemoveProjectUserExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProjectsApi_RemoveProjectUserExecute_Call) RunAndReturn(run func(admin.RemoveProjectUserApiRequest) (*http.Response, error)) *ProjectsApi_RemoveProjectUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveProjectUserWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) RemoveProjectUserWithParams(ctx context.Context, args *admin.RemoveProjectUserApiParams) admin.RemoveProjectUserApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProjectUserWithParams")
	}

	var r0 admin.RemoveProjectUserApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.RemoveProjectUserApiParams) admin.RemoveProjectUserApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.RemoveProjectUserApiRequest)
	}

	return r0
}

// ProjectsApi_RemoveProjectUserWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveProjectUserWithParams'
type ProjectsApi_RemoveProjectUserWithParams_Call struct {
	*mock.Call
}

// RemoveProjectUserWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.RemoveProjectUserApiParams
func (_e *ProjectsApi_Expecter) RemoveProjectUserWithParams(ctx interface{}, args interface{}) *ProjectsApi_RemoveProjectUserWithParams_Call {
	return &ProjectsApi_RemoveProjectUserWithParams_Call{Call: _e.mock.On("RemoveProjectUserWithParams", ctx, args)}
}

func (_c *ProjectsApi_RemoveProjectUserWithParams_Call) Run(run func(ctx context.Context, args *admin.RemoveProjectUserApiParams)) *ProjectsApi_RemoveProjectUserWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.RemoveProjectUserApiParams))
	})
	return _c
}

func (_c *ProjectsApi_RemoveProjectUserWithParams_Call) Return(_a0 admin.RemoveProjectUserApiRequest) *ProjectsApi_RemoveProjectUserWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_RemoveProjectUserWithParams_Call) RunAndReturn(run func(context.Context, *admin.RemoveProjectUserApiParams) admin.RemoveProjectUserApiRequest) *ProjectsApi_RemoveProjectUserWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ReturnAllIPAddresses provides a mock function with given fields: ctx, groupId
func (_m *ProjectsApi) ReturnAllIPAddresses(ctx context.Context, groupId string) admin.ReturnAllIPAddressesApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ReturnAllIPAddresses")
	}

	var r0 admin.ReturnAllIPAddressesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ReturnAllIPAddressesApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ReturnAllIPAddressesApiRequest)
	}

	return r0
}

// ProjectsApi_ReturnAllIPAddresses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReturnAllIPAddresses'
type ProjectsApi_ReturnAllIPAddresses_Call struct {
	*mock.Call
}

// ReturnAllIPAddresses is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *ProjectsApi_Expecter) ReturnAllIPAddresses(ctx interface{}, groupId interface{}) *ProjectsApi_ReturnAllIPAddresses_Call {
	return &ProjectsApi_ReturnAllIPAddresses_Call{Call: _e.mock.On("ReturnAllIPAddresses", ctx, groupId)}
}

func (_c *ProjectsApi_ReturnAllIPAddresses_Call) Run(run func(ctx context.Context, groupId string)) *ProjectsApi_ReturnAllIPAddresses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProjectsApi_ReturnAllIPAddresses_Call) Return(_a0 admin.ReturnAllIPAddressesApiRequest) *ProjectsApi_ReturnAllIPAddresses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_ReturnAllIPAddresses_Call) RunAndReturn(run func(context.Context, string) admin.ReturnAllIPAddressesApiRequest) *ProjectsApi_ReturnAllIPAddresses_Call {
	_c.Call.Return(run)
	return _c
}

// ReturnAllIPAddressesExecute provides a mock function with given fields: r
func (_m *ProjectsApi) ReturnAllIPAddressesExecute(r admin.ReturnAllIPAddressesApiRequest) (*admin.GroupIPAddresses, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ReturnAllIPAddressesExecute")
	}

	var r0 *admin.GroupIPAddresses
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ReturnAllIPAddressesApiRequest) (*admin.GroupIPAddresses, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ReturnAllIPAddressesApiRequest) *admin.GroupIPAddresses); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupIPAddresses)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ReturnAllIPAddressesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ReturnAllIPAddressesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_ReturnAllIPAddressesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReturnAllIPAddressesExecute'
type ProjectsApi_ReturnAllIPAddressesExecute_Call struct {
	*mock.Call
}

// ReturnAllIPAddressesExecute is a helper method to define mock.On call
//   - r admin.ReturnAllIPAddressesApiRequest
func (_e *ProjectsApi_Expecter) ReturnAllIPAddressesExecute(r interface{}) *ProjectsApi_ReturnAllIPAddressesExecute_Call {
	return &ProjectsApi_ReturnAllIPAddressesExecute_Call{Call: _e.mock.On("ReturnAllIPAddressesExecute", r)}
}

func (_c *ProjectsApi_ReturnAllIPAddressesExecute_Call) Run(run func(r admin.ReturnAllIPAddressesApiRequest)) *ProjectsApi_ReturnAllIPAddressesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ReturnAllIPAddressesApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_ReturnAllIPAddressesExecute_Call) Return(_a0 *admin.GroupIPAddresses, _a1 *http.Response, _a2 error) *ProjectsApi_ReturnAllIPAddressesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_ReturnAllIPAddressesExecute_Call) RunAndReturn(run func(admin.ReturnAllIPAddressesApiRequest) (*admin.GroupIPAddresses, *http.Response, error)) *ProjectsApi_ReturnAllIPAddressesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ReturnAllIPAddressesWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) ReturnAllIPAddressesWithParams(ctx context.Context, args *admin.ReturnAllIPAddressesApiParams) admin.ReturnAllIPAddressesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ReturnAllIPAddressesWithParams")
	}

	var r0 admin.ReturnAllIPAddressesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ReturnAllIPAddressesApiParams) admin.ReturnAllIPAddressesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ReturnAllIPAddressesApiRequest)
	}

	return r0
}

// ProjectsApi_ReturnAllIPAddressesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReturnAllIPAddressesWithParams'
type ProjectsApi_ReturnAllIPAddressesWithParams_Call struct {
	*mock.Call
}

// ReturnAllIPAddressesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ReturnAllIPAddressesApiParams
func (_e *ProjectsApi_Expecter) ReturnAllIPAddressesWithParams(ctx interface{}, args interface{}) *ProjectsApi_ReturnAllIPAddressesWithParams_Call {
	return &ProjectsApi_ReturnAllIPAddressesWithParams_Call{Call: _e.mock.On("ReturnAllIPAddressesWithParams", ctx, args)}
}

func (_c *ProjectsApi_ReturnAllIPAddressesWithParams_Call) Run(run func(ctx context.Context, args *admin.ReturnAllIPAddressesApiParams)) *ProjectsApi_ReturnAllIPAddressesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ReturnAllIPAddressesApiParams))
	})
	return _c
}

func (_c *ProjectsApi_ReturnAllIPAddressesWithParams_Call) Return(_a0 admin.ReturnAllIPAddressesApiRequest) *ProjectsApi_ReturnAllIPAddressesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_ReturnAllIPAddressesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ReturnAllIPAddressesApiParams) admin.ReturnAllIPAddressesApiRequest) *ProjectsApi_ReturnAllIPAddressesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// SetProjectLimit provides a mock function with given fields: ctx, limitName, groupId, dataFederationLimit
func (_m *ProjectsApi) SetProjectLimit(ctx context.Context, limitName string, groupId string, dataFederationLimit *admin.DataFederationLimit) admin.SetProjectLimitApiRequest {
	ret := _m.Called(ctx, limitName, groupId, dataFederationLimit)

	if len(ret) == 0 {
		panic("no return value specified for SetProjectLimit")
	}

	var r0 admin.SetProjectLimitApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.DataFederationLimit) admin.SetProjectLimitApiRequest); ok {
		r0 = rf(ctx, limitName, groupId, dataFederationLimit)
	} else {
		r0 = ret.Get(0).(admin.SetProjectLimitApiRequest)
	}

	return r0
}

// ProjectsApi_SetProjectLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetProjectLimit'
type ProjectsApi_SetProjectLimit_Call struct {
	*mock.Call
}

// SetProjectLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - limitName string
//   - groupId string
//   - dataFederationLimit *admin.DataFederationLimit
func (_e *ProjectsApi_Expecter) SetProjectLimit(ctx interface{}, limitName interface{}, groupId interface{}, dataFederationLimit interface{}) *ProjectsApi_SetProjectLimit_Call {
	return &ProjectsApi_SetProjectLimit_Call{Call: _e.mock.On("SetProjectLimit", ctx, limitName, groupId, dataFederationLimit)}
}

func (_c *ProjectsApi_SetProjectLimit_Call) Run(run func(ctx context.Context, limitName string, groupId string, dataFederationLimit *admin.DataFederationLimit)) *ProjectsApi_SetProjectLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.DataFederationLimit))
	})
	return _c
}

func (_c *ProjectsApi_SetProjectLimit_Call) Return(_a0 admin.SetProjectLimitApiRequest) *ProjectsApi_SetProjectLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_SetProjectLimit_Call) RunAndReturn(run func(context.Context, string, string, *admin.DataFederationLimit) admin.SetProjectLimitApiRequest) *ProjectsApi_SetProjectLimit_Call {
	_c.Call.Return(run)
	return _c
}

// SetProjectLimitExecute provides a mock function with given fields: r
func (_m *ProjectsApi) SetProjectLimitExecute(r admin.SetProjectLimitApiRequest) (*admin.DataFederationLimit, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for SetProjectLimitExecute")
	}

	var r0 *admin.DataFederationLimit
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.SetProjectLimitApiRequest) (*admin.DataFederationLimit, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.SetProjectLimitApiRequest) *admin.DataFederationLimit); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DataFederationLimit)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.SetProjectLimitApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.SetProjectLimitApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_SetProjectLimitExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetProjectLimitExecute'
type ProjectsApi_SetProjectLimitExecute_Call struct {
	*mock.Call
}

// SetProjectLimitExecute is a helper method to define mock.On call
//   - r admin.SetProjectLimitApiRequest
func (_e *ProjectsApi_Expecter) SetProjectLimitExecute(r interface{}) *ProjectsApi_SetProjectLimitExecute_Call {
	return &ProjectsApi_SetProjectLimitExecute_Call{Call: _e.mock.On("SetProjectLimitExecute", r)}
}

func (_c *ProjectsApi_SetProjectLimitExecute_Call) Run(run func(r admin.SetProjectLimitApiRequest)) *ProjectsApi_SetProjectLimitExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.SetProjectLimitApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_SetProjectLimitExecute_Call) Return(_a0 *admin.DataFederationLimit, _a1 *http.Response, _a2 error) *ProjectsApi_SetProjectLimitExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_SetProjectLimitExecute_Call) RunAndReturn(run func(admin.SetProjectLimitApiRequest) (*admin.DataFederationLimit, *http.Response, error)) *ProjectsApi_SetProjectLimitExecute_Call {
	_c.Call.Return(run)
	return _c
}

// SetProjectLimitWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) SetProjectLimitWithParams(ctx context.Context, args *admin.SetProjectLimitApiParams) admin.SetProjectLimitApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for SetProjectLimitWithParams")
	}

	var r0 admin.SetProjectLimitApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.SetProjectLimitApiParams) admin.SetProjectLimitApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.SetProjectLimitApiRequest)
	}

	return r0
}

// ProjectsApi_SetProjectLimitWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetProjectLimitWithParams'
type ProjectsApi_SetProjectLimitWithParams_Call struct {
	*mock.Call
}

// SetProjectLimitWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.SetProjectLimitApiParams
func (_e *ProjectsApi_Expecter) SetProjectLimitWithParams(ctx interface{}, args interface{}) *ProjectsApi_SetProjectLimitWithParams_Call {
	return &ProjectsApi_SetProjectLimitWithParams_Call{Call: _e.mock.On("SetProjectLimitWithParams", ctx, args)}
}

func (_c *ProjectsApi_SetProjectLimitWithParams_Call) Run(run func(ctx context.Context, args *admin.SetProjectLimitApiParams)) *ProjectsApi_SetProjectLimitWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.SetProjectLimitApiParams))
	})
	return _c
}

func (_c *ProjectsApi_SetProjectLimitWithParams_Call) Return(_a0 admin.SetProjectLimitApiRequest) *ProjectsApi_SetProjectLimitWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_SetProjectLimitWithParams_Call) RunAndReturn(run func(context.Context, *admin.SetProjectLimitApiParams) admin.SetProjectLimitApiRequest) *ProjectsApi_SetProjectLimitWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProject provides a mock function with given fields: ctx, groupId, groupUpdate
func (_m *ProjectsApi) UpdateProject(ctx context.Context, groupId string, groupUpdate *admin.GroupUpdate) admin.UpdateProjectApiRequest {
	ret := _m.Called(ctx, groupId, groupUpdate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 admin.UpdateProjectApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.GroupUpdate) admin.UpdateProjectApiRequest); ok {
		r0 = rf(ctx, groupId, groupUpdate)
	} else {
		r0 = ret.Get(0).(admin.UpdateProjectApiRequest)
	}

	return r0
}

// ProjectsApi_UpdateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProject'
type ProjectsApi_UpdateProject_Call struct {
	*mock.Call
}

// UpdateProject is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - groupUpdate *admin.GroupUpdate
func (_e *ProjectsApi_Expecter) UpdateProject(ctx interface{}, groupId interface{}, groupUpdate interface{}) *ProjectsApi_UpdateProject_Call {
	return &ProjectsApi_UpdateProject_Call{Call: _e.mock.On("UpdateProject", ctx, groupId, groupUpdate)}
}

func (_c *ProjectsApi_UpdateProject_Call) Run(run func(ctx context.Context, groupId string, groupUpdate *admin.GroupUpdate)) *ProjectsApi_UpdateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.GroupUpdate))
	})
	return _c
}

func (_c *ProjectsApi_UpdateProject_Call) Return(_a0 admin.UpdateProjectApiRequest) *ProjectsApi_UpdateProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_UpdateProject_Call) RunAndReturn(run func(context.Context, string, *admin.GroupUpdate) admin.UpdateProjectApiRequest) *ProjectsApi_UpdateProject_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectExecute provides a mock function with given fields: r
func (_m *ProjectsApi) UpdateProjectExecute(r admin.UpdateProjectApiRequest) (*admin.Group, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectExecute")
	}

	var r0 *admin.Group
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateProjectApiRequest) (*admin.Group, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateProjectApiRequest) *admin.Group); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateProjectApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateProjectApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_UpdateProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectExecute'
type ProjectsApi_UpdateProjectExecute_Call struct {
	*mock.Call
}

// UpdateProjectExecute is a helper method to define mock.On call
//   - r admin.UpdateProjectApiRequest
func (_e *ProjectsApi_Expecter) UpdateProjectExecute(r interface{}) *ProjectsApi_UpdateProjectExecute_Call {
	return &ProjectsApi_UpdateProjectExecute_Call{Call: _e.mock.On("UpdateProjectExecute", r)}
}

func (_c *ProjectsApi_UpdateProjectExecute_Call) Run(run func(r admin.UpdateProjectApiRequest)) *ProjectsApi_UpdateProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateProjectApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_UpdateProjectExecute_Call) Return(_a0 *admin.Group, _a1 *http.Response, _a2 error) *ProjectsApi_UpdateProjectExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_UpdateProjectExecute_Call) RunAndReturn(run func(admin.UpdateProjectApiRequest) (*admin.Group, *http.Response, error)) *ProjectsApi_UpdateProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectInvitation provides a mock function with given fields: ctx, groupId, groupInvitationRequest
func (_m *ProjectsApi) UpdateProjectInvitation(ctx context.Context, groupId string, groupInvitationRequest *admin.GroupInvitationRequest) admin.UpdateProjectInvitationApiRequest {
	ret := _m.Called(ctx, groupId, groupInvitationRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectInvitation")
	}

	var r0 admin.UpdateProjectInvitationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.GroupInvitationRequest) admin.UpdateProjectInvitationApiRequest); ok {
		r0 = rf(ctx, groupId, groupInvitationRequest)
	} else {
		r0 = ret.Get(0).(admin.UpdateProjectInvitationApiRequest)
	}

	return r0
}

// ProjectsApi_UpdateProjectInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectInvitation'
type ProjectsApi_UpdateProjectInvitation_Call struct {
	*mock.Call
}

// UpdateProjectInvitation is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - groupInvitationRequest *admin.GroupInvitationRequest
func (_e *ProjectsApi_Expecter) UpdateProjectInvitation(ctx interface{}, groupId interface{}, groupInvitationRequest interface{}) *ProjectsApi_UpdateProjectInvitation_Call {
	return &ProjectsApi_UpdateProjectInvitation_Call{Call: _e.mock.On("UpdateProjectInvitation", ctx, groupId, groupInvitationRequest)}
}

func (_c *ProjectsApi_UpdateProjectInvitation_Call) Run(run func(ctx context.Context, groupId string, groupInvitationRequest *admin.GroupInvitationRequest)) *ProjectsApi_UpdateProjectInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.GroupInvitationRequest))
	})
	return _c
}

func (_c *ProjectsApi_UpdateProjectInvitation_Call) Return(_a0 admin.UpdateProjectInvitationApiRequest) *ProjectsApi_UpdateProjectInvitation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_UpdateProjectInvitation_Call) RunAndReturn(run func(context.Context, string, *admin.GroupInvitationRequest) admin.UpdateProjectInvitationApiRequest) *ProjectsApi_UpdateProjectInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectInvitationById provides a mock function with given fields: ctx, groupId, invitationId, groupInvitationUpdateRequest
func (_m *ProjectsApi) UpdateProjectInvitationById(ctx context.Context, groupId string, invitationId string, groupInvitationUpdateRequest *admin.GroupInvitationUpdateRequest) admin.UpdateProjectInvitationByIdApiRequest {
	ret := _m.Called(ctx, groupId, invitationId, groupInvitationUpdateRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectInvitationById")
	}

	var r0 admin.UpdateProjectInvitationByIdApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.GroupInvitationUpdateRequest) admin.UpdateProjectInvitationByIdApiRequest); ok {
		r0 = rf(ctx, groupId, invitationId, groupInvitationUpdateRequest)
	} else {
		r0 = ret.Get(0).(admin.UpdateProjectInvitationByIdApiRequest)
	}

	return r0
}

// ProjectsApi_UpdateProjectInvitationById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectInvitationById'
type ProjectsApi_UpdateProjectInvitationById_Call struct {
	*mock.Call
}

// UpdateProjectInvitationById is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - invitationId string
//   - groupInvitationUpdateRequest *admin.GroupInvitationUpdateRequest
func (_e *ProjectsApi_Expecter) UpdateProjectInvitationById(ctx interface{}, groupId interface{}, invitationId interface{}, groupInvitationUpdateRequest interface{}) *ProjectsApi_UpdateProjectInvitationById_Call {
	return &ProjectsApi_UpdateProjectInvitationById_Call{Call: _e.mock.On("UpdateProjectInvitationById", ctx, groupId, invitationId, groupInvitationUpdateRequest)}
}

func (_c *ProjectsApi_UpdateProjectInvitationById_Call) Run(run func(ctx context.Context, groupId string, invitationId string, groupInvitationUpdateRequest *admin.GroupInvitationUpdateRequest)) *ProjectsApi_UpdateProjectInvitationById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.GroupInvitationUpdateRequest))
	})
	return _c
}

func (_c *ProjectsApi_UpdateProjectInvitationById_Call) Return(_a0 admin.UpdateProjectInvitationByIdApiRequest) *ProjectsApi_UpdateProjectInvitationById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_UpdateProjectInvitationById_Call) RunAndReturn(run func(context.Context, string, string, *admin.GroupInvitationUpdateRequest) admin.UpdateProjectInvitationByIdApiRequest) *ProjectsApi_UpdateProjectInvitationById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectInvitationByIdExecute provides a mock function with given fields: r
func (_m *ProjectsApi) UpdateProjectInvitationByIdExecute(r admin.UpdateProjectInvitationByIdApiRequest) (*admin.GroupInvitation, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectInvitationByIdExecute")
	}

	var r0 *admin.GroupInvitation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateProjectInvitationByIdApiRequest) (*admin.GroupInvitation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateProjectInvitationByIdApiRequest) *admin.GroupInvitation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateProjectInvitationByIdApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateProjectInvitationByIdApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_UpdateProjectInvitationByIdExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectInvitationByIdExecute'
type ProjectsApi_UpdateProjectInvitationByIdExecute_Call struct {
	*mock.Call
}

// UpdateProjectInvitationByIdExecute is a helper method to define mock.On call
//   - r admin.UpdateProjectInvitationByIdApiRequest
func (_e *ProjectsApi_Expecter) UpdateProjectInvitationByIdExecute(r interface{}) *ProjectsApi_UpdateProjectInvitationByIdExecute_Call {
	return &ProjectsApi_UpdateProjectInvitationByIdExecute_Call{Call: _e.mock.On("UpdateProjectInvitationByIdExecute", r)}
}

func (_c *ProjectsApi_UpdateProjectInvitationByIdExecute_Call) Run(run func(r admin.UpdateProjectInvitationByIdApiRequest)) *ProjectsApi_UpdateProjectInvitationByIdExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateProjectInvitationByIdApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_UpdateProjectInvitationByIdExecute_Call) Return(_a0 *admin.GroupInvitation, _a1 *http.Response, _a2 error) *ProjectsApi_UpdateProjectInvitationByIdExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_UpdateProjectInvitationByIdExecute_Call) RunAndReturn(run func(admin.UpdateProjectInvitationByIdApiRequest) (*admin.GroupInvitation, *http.Response, error)) *ProjectsApi_UpdateProjectInvitationByIdExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectInvitationByIdWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) UpdateProjectInvitationByIdWithParams(ctx context.Context, args *admin.UpdateProjectInvitationByIdApiParams) admin.UpdateProjectInvitationByIdApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectInvitationByIdWithParams")
	}

	var r0 admin.UpdateProjectInvitationByIdApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateProjectInvitationByIdApiParams) admin.UpdateProjectInvitationByIdApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateProjectInvitationByIdApiRequest)
	}

	return r0
}

// ProjectsApi_UpdateProjectInvitationByIdWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectInvitationByIdWithParams'
type ProjectsApi_UpdateProjectInvitationByIdWithParams_Call struct {
	*mock.Call
}

// UpdateProjectInvitationByIdWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateProjectInvitationByIdApiParams
func (_e *ProjectsApi_Expecter) UpdateProjectInvitationByIdWithParams(ctx interface{}, args interface{}) *ProjectsApi_UpdateProjectInvitationByIdWithParams_Call {
	return &ProjectsApi_UpdateProjectInvitationByIdWithParams_Call{Call: _e.mock.On("UpdateProjectInvitationByIdWithParams", ctx, args)}
}

func (_c *ProjectsApi_UpdateProjectInvitationByIdWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateProjectInvitationByIdApiParams)) *ProjectsApi_UpdateProjectInvitationByIdWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateProjectInvitationByIdApiParams))
	})
	return _c
}

func (_c *ProjectsApi_UpdateProjectInvitationByIdWithParams_Call) Return(_a0 admin.UpdateProjectInvitationByIdApiRequest) *ProjectsApi_UpdateProjectInvitationByIdWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_UpdateProjectInvitationByIdWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateProjectInvitationByIdApiParams) admin.UpdateProjectInvitationByIdApiRequest) *ProjectsApi_UpdateProjectInvitationByIdWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectInvitationExecute provides a mock function with given fields: r
func (_m *ProjectsApi) UpdateProjectInvitationExecute(r admin.UpdateProjectInvitationApiRequest) (*admin.GroupInvitation, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectInvitationExecute")
	}

	var r0 *admin.GroupInvitation
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateProjectInvitationApiRequest) (*admin.GroupInvitation, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateProjectInvitationApiRequest) *admin.GroupInvitation); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupInvitation)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateProjectInvitationApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateProjectInvitationApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_UpdateProjectInvitationExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectInvitationExecute'
type ProjectsApi_UpdateProjectInvitationExecute_Call struct {
	*mock.Call
}

// UpdateProjectInvitationExecute is a helper method to define mock.On call
//   - r admin.UpdateProjectInvitationApiRequest
func (_e *ProjectsApi_Expecter) UpdateProjectInvitationExecute(r interface{}) *ProjectsApi_UpdateProjectInvitationExecute_Call {
	return &ProjectsApi_UpdateProjectInvitationExecute_Call{Call: _e.mock.On("UpdateProjectInvitationExecute", r)}
}

func (_c *ProjectsApi_UpdateProjectInvitationExecute_Call) Run(run func(r admin.UpdateProjectInvitationApiRequest)) *ProjectsApi_UpdateProjectInvitationExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateProjectInvitationApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_UpdateProjectInvitationExecute_Call) Return(_a0 *admin.GroupInvitation, _a1 *http.Response, _a2 error) *ProjectsApi_UpdateProjectInvitationExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_UpdateProjectInvitationExecute_Call) RunAndReturn(run func(admin.UpdateProjectInvitationApiRequest) (*admin.GroupInvitation, *http.Response, error)) *ProjectsApi_UpdateProjectInvitationExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectInvitationWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) UpdateProjectInvitationWithParams(ctx context.Context, args *admin.UpdateProjectInvitationApiParams) admin.UpdateProjectInvitationApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectInvitationWithParams")
	}

	var r0 admin.UpdateProjectInvitationApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateProjectInvitationApiParams) admin.UpdateProjectInvitationApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateProjectInvitationApiRequest)
	}

	return r0
}

// ProjectsApi_UpdateProjectInvitationWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectInvitationWithParams'
type ProjectsApi_UpdateProjectInvitationWithParams_Call struct {
	*mock.Call
}

// UpdateProjectInvitationWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateProjectInvitationApiParams
func (_e *ProjectsApi_Expecter) UpdateProjectInvitationWithParams(ctx interface{}, args interface{}) *ProjectsApi_UpdateProjectInvitationWithParams_Call {
	return &ProjectsApi_UpdateProjectInvitationWithParams_Call{Call: _e.mock.On("UpdateProjectInvitationWithParams", ctx, args)}
}

func (_c *ProjectsApi_UpdateProjectInvitationWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateProjectInvitationApiParams)) *ProjectsApi_UpdateProjectInvitationWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateProjectInvitationApiParams))
	})
	return _c
}

func (_c *ProjectsApi_UpdateProjectInvitationWithParams_Call) Return(_a0 admin.UpdateProjectInvitationApiRequest) *ProjectsApi_UpdateProjectInvitationWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_UpdateProjectInvitationWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateProjectInvitationApiParams) admin.UpdateProjectInvitationApiRequest) *ProjectsApi_UpdateProjectInvitationWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectRoles provides a mock function with given fields: ctx, groupId, userId, updateGroupRolesForUser
func (_m *ProjectsApi) UpdateProjectRoles(ctx context.Context, groupId string, userId string, updateGroupRolesForUser *admin.UpdateGroupRolesForUser) admin.UpdateProjectRolesApiRequest {
	ret := _m.Called(ctx, groupId, userId, updateGroupRolesForUser)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectRoles")
	}

	var r0 admin.UpdateProjectRolesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.UpdateGroupRolesForUser) admin.UpdateProjectRolesApiRequest); ok {
		r0 = rf(ctx, groupId, userId, updateGroupRolesForUser)
	} else {
		r0 = ret.Get(0).(admin.UpdateProjectRolesApiRequest)
	}

	return r0
}

// ProjectsApi_UpdateProjectRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectRoles'
type ProjectsApi_UpdateProjectRoles_Call struct {
	*mock.Call
}

// UpdateProjectRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - userId string
//   - updateGroupRolesForUser *admin.UpdateGroupRolesForUser
func (_e *ProjectsApi_Expecter) UpdateProjectRoles(ctx interface{}, groupId interface{}, userId interface{}, updateGroupRolesForUser interface{}) *ProjectsApi_UpdateProjectRoles_Call {
	return &ProjectsApi_UpdateProjectRoles_Call{Call: _e.mock.On("UpdateProjectRoles", ctx, groupId, userId, updateGroupRolesForUser)}
}

func (_c *ProjectsApi_UpdateProjectRoles_Call) Run(run func(ctx context.Context, groupId string, userId string, updateGroupRolesForUser *admin.UpdateGroupRolesForUser)) *ProjectsApi_UpdateProjectRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.UpdateGroupRolesForUser))
	})
	return _c
}

func (_c *ProjectsApi_UpdateProjectRoles_Call) Return(_a0 admin.UpdateProjectRolesApiRequest) *ProjectsApi_UpdateProjectRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_UpdateProjectRoles_Call) RunAndReturn(run func(context.Context, string, string, *admin.UpdateGroupRolesForUser) admin.UpdateProjectRolesApiRequest) *ProjectsApi_UpdateProjectRoles_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectRolesExecute provides a mock function with given fields: r
func (_m *ProjectsApi) UpdateProjectRolesExecute(r admin.UpdateProjectRolesApiRequest) (*admin.UpdateGroupRolesForUser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectRolesExecute")
	}

	var r0 *admin.UpdateGroupRolesForUser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateProjectRolesApiRequest) (*admin.UpdateGroupRolesForUser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateProjectRolesApiRequest) *admin.UpdateGroupRolesForUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.UpdateGroupRolesForUser)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateProjectRolesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateProjectRolesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_UpdateProjectRolesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectRolesExecute'
type ProjectsApi_UpdateProjectRolesExecute_Call struct {
	*mock.Call
}

// UpdateProjectRolesExecute is a helper method to define mock.On call
//   - r admin.UpdateProjectRolesApiRequest
func (_e *ProjectsApi_Expecter) UpdateProjectRolesExecute(r interface{}) *ProjectsApi_UpdateProjectRolesExecute_Call {
	return &ProjectsApi_UpdateProjectRolesExecute_Call{Call: _e.mock.On("UpdateProjectRolesExecute", r)}
}

func (_c *ProjectsApi_UpdateProjectRolesExecute_Call) Run(run func(r admin.UpdateProjectRolesApiRequest)) *ProjectsApi_UpdateProjectRolesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateProjectRolesApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_UpdateProjectRolesExecute_Call) Return(_a0 *admin.UpdateGroupRolesForUser, _a1 *http.Response, _a2 error) *ProjectsApi_UpdateProjectRolesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_UpdateProjectRolesExecute_Call) RunAndReturn(run func(admin.UpdateProjectRolesApiRequest) (*admin.UpdateGroupRolesForUser, *http.Response, error)) *ProjectsApi_UpdateProjectRolesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectRolesWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) UpdateProjectRolesWithParams(ctx context.Context, args *admin.UpdateProjectRolesApiParams) admin.UpdateProjectRolesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectRolesWithParams")
	}

	var r0 admin.UpdateProjectRolesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateProjectRolesApiParams) admin.UpdateProjectRolesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateProjectRolesApiRequest)
	}

	return r0
}

// ProjectsApi_UpdateProjectRolesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectRolesWithParams'
type ProjectsApi_UpdateProjectRolesWithParams_Call struct {
	*mock.Call
}

// UpdateProjectRolesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateProjectRolesApiParams
func (_e *ProjectsApi_Expecter) UpdateProjectRolesWithParams(ctx interface{}, args interface{}) *ProjectsApi_UpdateProjectRolesWithParams_Call {
	return &ProjectsApi_UpdateProjectRolesWithParams_Call{Call: _e.mock.On("UpdateProjectRolesWithParams", ctx, args)}
}

func (_c *ProjectsApi_UpdateProjectRolesWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateProjectRolesApiParams)) *ProjectsApi_UpdateProjectRolesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateProjectRolesApiParams))
	})
	return _c
}

func (_c *ProjectsApi_UpdateProjectRolesWithParams_Call) Return(_a0 admin.UpdateProjectRolesApiRequest) *ProjectsApi_UpdateProjectRolesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_UpdateProjectRolesWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateProjectRolesApiParams) admin.UpdateProjectRolesApiRequest) *ProjectsApi_UpdateProjectRolesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectSettings provides a mock function with given fields: ctx, groupId, groupSettings
func (_m *ProjectsApi) UpdateProjectSettings(ctx context.Context, groupId string, groupSettings *admin.GroupSettings) admin.UpdateProjectSettingsApiRequest {
	ret := _m.Called(ctx, groupId, groupSettings)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectSettings")
	}

	var r0 admin.UpdateProjectSettingsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.GroupSettings) admin.UpdateProjectSettingsApiRequest); ok {
		r0 = rf(ctx, groupId, groupSettings)
	} else {
		r0 = ret.Get(0).(admin.UpdateProjectSettingsApiRequest)
	}

	return r0
}

// ProjectsApi_UpdateProjectSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectSettings'
type ProjectsApi_UpdateProjectSettings_Call struct {
	*mock.Call
}

// UpdateProjectSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - groupSettings *admin.GroupSettings
func (_e *ProjectsApi_Expecter) UpdateProjectSettings(ctx interface{}, groupId interface{}, groupSettings interface{}) *ProjectsApi_UpdateProjectSettings_Call {
	return &ProjectsApi_UpdateProjectSettings_Call{Call: _e.mock.On("UpdateProjectSettings", ctx, groupId, groupSettings)}
}

func (_c *ProjectsApi_UpdateProjectSettings_Call) Run(run func(ctx context.Context, groupId string, groupSettings *admin.GroupSettings)) *ProjectsApi_UpdateProjectSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.GroupSettings))
	})
	return _c
}

func (_c *ProjectsApi_UpdateProjectSettings_Call) Return(_a0 admin.UpdateProjectSettingsApiRequest) *ProjectsApi_UpdateProjectSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_UpdateProjectSettings_Call) RunAndReturn(run func(context.Context, string, *admin.GroupSettings) admin.UpdateProjectSettingsApiRequest) *ProjectsApi_UpdateProjectSettings_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectSettingsExecute provides a mock function with given fields: r
func (_m *ProjectsApi) UpdateProjectSettingsExecute(r admin.UpdateProjectSettingsApiRequest) (*admin.GroupSettings, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectSettingsExecute")
	}

	var r0 *admin.GroupSettings
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateProjectSettingsApiRequest) (*admin.GroupSettings, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateProjectSettingsApiRequest) *admin.GroupSettings); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateProjectSettingsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateProjectSettingsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProjectsApi_UpdateProjectSettingsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectSettingsExecute'
type ProjectsApi_UpdateProjectSettingsExecute_Call struct {
	*mock.Call
}

// UpdateProjectSettingsExecute is a helper method to define mock.On call
//   - r admin.UpdateProjectSettingsApiRequest
func (_e *ProjectsApi_Expecter) UpdateProjectSettingsExecute(r interface{}) *ProjectsApi_UpdateProjectSettingsExecute_Call {
	return &ProjectsApi_UpdateProjectSettingsExecute_Call{Call: _e.mock.On("UpdateProjectSettingsExecute", r)}
}

func (_c *ProjectsApi_UpdateProjectSettingsExecute_Call) Run(run func(r admin.UpdateProjectSettingsApiRequest)) *ProjectsApi_UpdateProjectSettingsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateProjectSettingsApiRequest))
	})
	return _c
}

func (_c *ProjectsApi_UpdateProjectSettingsExecute_Call) Return(_a0 *admin.GroupSettings, _a1 *http.Response, _a2 error) *ProjectsApi_UpdateProjectSettingsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ProjectsApi_UpdateProjectSettingsExecute_Call) RunAndReturn(run func(admin.UpdateProjectSettingsApiRequest) (*admin.GroupSettings, *http.Response, error)) *ProjectsApi_UpdateProjectSettingsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectSettingsWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) UpdateProjectSettingsWithParams(ctx context.Context, args *admin.UpdateProjectSettingsApiParams) admin.UpdateProjectSettingsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectSettingsWithParams")
	}

	var r0 admin.UpdateProjectSettingsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateProjectSettingsApiParams) admin.UpdateProjectSettingsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateProjectSettingsApiRequest)
	}

	return r0
}

// ProjectsApi_UpdateProjectSettingsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectSettingsWithParams'
type ProjectsApi_UpdateProjectSettingsWithParams_Call struct {
	*mock.Call
}

// UpdateProjectSettingsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateProjectSettingsApiParams
func (_e *ProjectsApi_Expecter) UpdateProjectSettingsWithParams(ctx interface{}, args interface{}) *ProjectsApi_UpdateProjectSettingsWithParams_Call {
	return &ProjectsApi_UpdateProjectSettingsWithParams_Call{Call: _e.mock.On("UpdateProjectSettingsWithParams", ctx, args)}
}

func (_c *ProjectsApi_UpdateProjectSettingsWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateProjectSettingsApiParams)) *ProjectsApi_UpdateProjectSettingsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateProjectSettingsApiParams))
	})
	return _c
}

func (_c *ProjectsApi_UpdateProjectSettingsWithParams_Call) Return(_a0 admin.UpdateProjectSettingsApiRequest) *ProjectsApi_UpdateProjectSettingsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_UpdateProjectSettingsWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateProjectSettingsApiParams) admin.UpdateProjectSettingsApiRequest) *ProjectsApi_UpdateProjectSettingsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectWithParams provides a mock function with given fields: ctx, args
func (_m *ProjectsApi) UpdateProjectWithParams(ctx context.Context, args *admin.UpdateProjectApiParams) admin.UpdateProjectApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectWithParams")
	}

	var r0 admin.UpdateProjectApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateProjectApiParams) admin.UpdateProjectApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateProjectApiRequest)
	}

	return r0
}

// ProjectsApi_UpdateProjectWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectWithParams'
type ProjectsApi_UpdateProjectWithParams_Call struct {
	*mock.Call
}

// UpdateProjectWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateProjectApiParams
func (_e *ProjectsApi_Expecter) UpdateProjectWithParams(ctx interface{}, args interface{}) *ProjectsApi_UpdateProjectWithParams_Call {
	return &ProjectsApi_UpdateProjectWithParams_Call{Call: _e.mock.On("UpdateProjectWithParams", ctx, args)}
}

func (_c *ProjectsApi_UpdateProjectWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateProjectApiParams)) *ProjectsApi_UpdateProjectWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateProjectApiParams))
	})
	return _c
}

func (_c *ProjectsApi_UpdateProjectWithParams_Call) Return(_a0 admin.UpdateProjectApiRequest) *ProjectsApi_UpdateProjectWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectsApi_UpdateProjectWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateProjectApiParams) admin.UpdateProjectApiRequest) *ProjectsApi_UpdateProjectWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewProjectsApi creates a new instance of ProjectsApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectsApi(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectsApi {
	mock := &ProjectsApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
