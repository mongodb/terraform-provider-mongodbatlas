// Code generated by mockery. DO NOT EDIT.

package mocksvc

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20231115008/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// GroupProjectService is an autogenerated mock type for the GroupProjectService type
type GroupProjectService struct {
	mock.Mock
}

type GroupProjectService_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupProjectService) EXPECT() *GroupProjectService_Expecter {
	return &GroupProjectService_Expecter{mock: &_m.Mock}
}

// AddAllTeamsToProject provides a mock function with given fields: ctx, groupID, teamRole
func (_m *GroupProjectService) AddAllTeamsToProject(ctx context.Context, groupID string, teamRole *[]admin.TeamRole) (*admin.PaginatedTeamRole, *http.Response, error) {
	ret := _m.Called(ctx, groupID, teamRole)

	if len(ret) == 0 {
		panic("no return value specified for AddAllTeamsToProject")
	}

	var r0 *admin.PaginatedTeamRole
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *[]admin.TeamRole) (*admin.PaginatedTeamRole, *http.Response, error)); ok {
		return rf(ctx, groupID, teamRole)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *[]admin.TeamRole) *admin.PaginatedTeamRole); ok {
		r0 = rf(ctx, groupID, teamRole)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedTeamRole)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *[]admin.TeamRole) *http.Response); ok {
		r1 = rf(ctx, groupID, teamRole)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *[]admin.TeamRole) error); ok {
		r2 = rf(ctx, groupID, teamRole)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupProjectService_AddAllTeamsToProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAllTeamsToProject'
type GroupProjectService_AddAllTeamsToProject_Call struct {
	*mock.Call
}

// AddAllTeamsToProject is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID string
//   - teamRole *[]admin.TeamRole
func (_e *GroupProjectService_Expecter) AddAllTeamsToProject(ctx interface{}, groupID interface{}, teamRole interface{}) *GroupProjectService_AddAllTeamsToProject_Call {
	return &GroupProjectService_AddAllTeamsToProject_Call{Call: _e.mock.On("AddAllTeamsToProject", ctx, groupID, teamRole)}
}

func (_c *GroupProjectService_AddAllTeamsToProject_Call) Run(run func(ctx context.Context, groupID string, teamRole *[]admin.TeamRole)) *GroupProjectService_AddAllTeamsToProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*[]admin.TeamRole))
	})
	return _c
}

func (_c *GroupProjectService_AddAllTeamsToProject_Call) Return(_a0 *admin.PaginatedTeamRole, _a1 *http.Response, _a2 error) *GroupProjectService_AddAllTeamsToProject_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupProjectService_AddAllTeamsToProject_Call) RunAndReturn(run func(context.Context, string, *[]admin.TeamRole) (*admin.PaginatedTeamRole, *http.Response, error)) *GroupProjectService_AddAllTeamsToProject_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectLimit provides a mock function with given fields: ctx, limitName, projectID
func (_m *GroupProjectService) DeleteProjectLimit(ctx context.Context, limitName string, projectID string) (map[string]interface{}, *http.Response, error) {
	ret := _m.Called(ctx, limitName, projectID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectLimit")
	}

	var r0 map[string]interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (map[string]interface{}, *http.Response, error)); ok {
		return rf(ctx, limitName, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) map[string]interface{}); ok {
		r0 = rf(ctx, limitName, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) *http.Response); ok {
		r1 = rf(ctx, limitName, projectID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, limitName, projectID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupProjectService_DeleteProjectLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectLimit'
type GroupProjectService_DeleteProjectLimit_Call struct {
	*mock.Call
}

// DeleteProjectLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - limitName string
//   - projectID string
func (_e *GroupProjectService_Expecter) DeleteProjectLimit(ctx interface{}, limitName interface{}, projectID interface{}) *GroupProjectService_DeleteProjectLimit_Call {
	return &GroupProjectService_DeleteProjectLimit_Call{Call: _e.mock.On("DeleteProjectLimit", ctx, limitName, projectID)}
}

func (_c *GroupProjectService_DeleteProjectLimit_Call) Run(run func(ctx context.Context, limitName string, projectID string)) *GroupProjectService_DeleteProjectLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *GroupProjectService_DeleteProjectLimit_Call) Return(_a0 map[string]interface{}, _a1 *http.Response, _a2 error) *GroupProjectService_DeleteProjectLimit_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupProjectService_DeleteProjectLimit_Call) RunAndReturn(run func(context.Context, string, string) (map[string]interface{}, *http.Response, error)) *GroupProjectService_DeleteProjectLimit_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectSettings provides a mock function with given fields: ctx, groupID
func (_m *GroupProjectService) GetProjectSettings(ctx context.Context, groupID string) (*admin.GroupSettings, *http.Response, error) {
	ret := _m.Called(ctx, groupID)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectSettings")
	}

	var r0 *admin.GroupSettings
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*admin.GroupSettings, *http.Response, error)); ok {
		return rf(ctx, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *admin.GroupSettings); ok {
		r0 = rf(ctx, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *http.Response); ok {
		r1 = rf(ctx, groupID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, groupID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupProjectService_GetProjectSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectSettings'
type GroupProjectService_GetProjectSettings_Call struct {
	*mock.Call
}

// GetProjectSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID string
func (_e *GroupProjectService_Expecter) GetProjectSettings(ctx interface{}, groupID interface{}) *GroupProjectService_GetProjectSettings_Call {
	return &GroupProjectService_GetProjectSettings_Call{Call: _e.mock.On("GetProjectSettings", ctx, groupID)}
}

func (_c *GroupProjectService_GetProjectSettings_Call) Run(run func(ctx context.Context, groupID string)) *GroupProjectService_GetProjectSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GroupProjectService_GetProjectSettings_Call) Return(_a0 *admin.GroupSettings, _a1 *http.Response, _a2 error) *GroupProjectService_GetProjectSettings_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupProjectService_GetProjectSettings_Call) RunAndReturn(run func(context.Context, string) (*admin.GroupSettings, *http.Response, error)) *GroupProjectService_GetProjectSettings_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusters provides a mock function with given fields: ctx, groupID
func (_m *GroupProjectService) ListClusters(ctx context.Context, groupID string) (*admin.PaginatedAdvancedClusterDescription, *http.Response, error) {
	ret := _m.Called(ctx, groupID)

	if len(ret) == 0 {
		panic("no return value specified for ListClusters")
	}

	var r0 *admin.PaginatedAdvancedClusterDescription
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*admin.PaginatedAdvancedClusterDescription, *http.Response, error)); ok {
		return rf(ctx, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *admin.PaginatedAdvancedClusterDescription); ok {
		r0 = rf(ctx, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedAdvancedClusterDescription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *http.Response); ok {
		r1 = rf(ctx, groupID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, groupID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupProjectService_ListClusters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusters'
type GroupProjectService_ListClusters_Call struct {
	*mock.Call
}

// ListClusters is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID string
func (_e *GroupProjectService_Expecter) ListClusters(ctx interface{}, groupID interface{}) *GroupProjectService_ListClusters_Call {
	return &GroupProjectService_ListClusters_Call{Call: _e.mock.On("ListClusters", ctx, groupID)}
}

func (_c *GroupProjectService_ListClusters_Call) Run(run func(ctx context.Context, groupID string)) *GroupProjectService_ListClusters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GroupProjectService_ListClusters_Call) Return(_a0 *admin.PaginatedAdvancedClusterDescription, _a1 *http.Response, _a2 error) *GroupProjectService_ListClusters_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupProjectService_ListClusters_Call) RunAndReturn(run func(context.Context, string) (*admin.PaginatedAdvancedClusterDescription, *http.Response, error)) *GroupProjectService_ListClusters_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectLimits provides a mock function with given fields: ctx, groupID
func (_m *GroupProjectService) ListProjectLimits(ctx context.Context, groupID string) ([]admin.DataFederationLimit, *http.Response, error) {
	ret := _m.Called(ctx, groupID)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectLimits")
	}

	var r0 []admin.DataFederationLimit
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]admin.DataFederationLimit, *http.Response, error)); ok {
		return rf(ctx, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []admin.DataFederationLimit); ok {
		r0 = rf(ctx, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.DataFederationLimit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *http.Response); ok {
		r1 = rf(ctx, groupID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, groupID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupProjectService_ListProjectLimits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectLimits'
type GroupProjectService_ListProjectLimits_Call struct {
	*mock.Call
}

// ListProjectLimits is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID string
func (_e *GroupProjectService_Expecter) ListProjectLimits(ctx interface{}, groupID interface{}) *GroupProjectService_ListProjectLimits_Call {
	return &GroupProjectService_ListProjectLimits_Call{Call: _e.mock.On("ListProjectLimits", ctx, groupID)}
}

func (_c *GroupProjectService_ListProjectLimits_Call) Run(run func(ctx context.Context, groupID string)) *GroupProjectService_ListProjectLimits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GroupProjectService_ListProjectLimits_Call) Return(_a0 []admin.DataFederationLimit, _a1 *http.Response, _a2 error) *GroupProjectService_ListProjectLimits_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupProjectService_ListProjectLimits_Call) RunAndReturn(run func(context.Context, string) ([]admin.DataFederationLimit, *http.Response, error)) *GroupProjectService_ListProjectLimits_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectTeams provides a mock function with given fields: ctx, groupID
func (_m *GroupProjectService) ListProjectTeams(ctx context.Context, groupID string) (*admin.PaginatedTeamRole, *http.Response, error) {
	ret := _m.Called(ctx, groupID)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectTeams")
	}

	var r0 *admin.PaginatedTeamRole
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*admin.PaginatedTeamRole, *http.Response, error)); ok {
		return rf(ctx, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *admin.PaginatedTeamRole); ok {
		r0 = rf(ctx, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedTeamRole)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *http.Response); ok {
		r1 = rf(ctx, groupID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, groupID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupProjectService_ListProjectTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectTeams'
type GroupProjectService_ListProjectTeams_Call struct {
	*mock.Call
}

// ListProjectTeams is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID string
func (_e *GroupProjectService_Expecter) ListProjectTeams(ctx interface{}, groupID interface{}) *GroupProjectService_ListProjectTeams_Call {
	return &GroupProjectService_ListProjectTeams_Call{Call: _e.mock.On("ListProjectTeams", ctx, groupID)}
}

func (_c *GroupProjectService_ListProjectTeams_Call) Run(run func(ctx context.Context, groupID string)) *GroupProjectService_ListProjectTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GroupProjectService_ListProjectTeams_Call) Return(_a0 *admin.PaginatedTeamRole, _a1 *http.Response, _a2 error) *GroupProjectService_ListProjectTeams_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupProjectService_ListProjectTeams_Call) RunAndReturn(run func(context.Context, string) (*admin.PaginatedTeamRole, *http.Response, error)) *GroupProjectService_ListProjectTeams_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveProjectTeam provides a mock function with given fields: ctx, groupID, teamID
func (_m *GroupProjectService) RemoveProjectTeam(ctx context.Context, groupID string, teamID string) (*http.Response, error) {
	ret := _m.Called(ctx, groupID, teamID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProjectTeam")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*http.Response, error)); ok {
		return rf(ctx, groupID, teamID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *http.Response); ok {
		r0 = rf(ctx, groupID, teamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, groupID, teamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupProjectService_RemoveProjectTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveProjectTeam'
type GroupProjectService_RemoveProjectTeam_Call struct {
	*mock.Call
}

// RemoveProjectTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID string
//   - teamID string
func (_e *GroupProjectService_Expecter) RemoveProjectTeam(ctx interface{}, groupID interface{}, teamID interface{}) *GroupProjectService_RemoveProjectTeam_Call {
	return &GroupProjectService_RemoveProjectTeam_Call{Call: _e.mock.On("RemoveProjectTeam", ctx, groupID, teamID)}
}

func (_c *GroupProjectService_RemoveProjectTeam_Call) Run(run func(ctx context.Context, groupID string, teamID string)) *GroupProjectService_RemoveProjectTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *GroupProjectService_RemoveProjectTeam_Call) Return(_a0 *http.Response, _a1 error) *GroupProjectService_RemoveProjectTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupProjectService_RemoveProjectTeam_Call) RunAndReturn(run func(context.Context, string, string) (*http.Response, error)) *GroupProjectService_RemoveProjectTeam_Call {
	_c.Call.Return(run)
	return _c
}

// ReturnAllIPAddresses provides a mock function with given fields: ctx, groupID
func (_m *GroupProjectService) ReturnAllIPAddresses(ctx context.Context, groupID string) (*admin.GroupIPAddresses, *http.Response, error) {
	ret := _m.Called(ctx, groupID)

	if len(ret) == 0 {
		panic("no return value specified for ReturnAllIPAddresses")
	}

	var r0 *admin.GroupIPAddresses
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*admin.GroupIPAddresses, *http.Response, error)); ok {
		return rf(ctx, groupID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *admin.GroupIPAddresses); ok {
		r0 = rf(ctx, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.GroupIPAddresses)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *http.Response); ok {
		r1 = rf(ctx, groupID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, groupID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupProjectService_ReturnAllIPAddresses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReturnAllIPAddresses'
type GroupProjectService_ReturnAllIPAddresses_Call struct {
	*mock.Call
}

// ReturnAllIPAddresses is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID string
func (_e *GroupProjectService_Expecter) ReturnAllIPAddresses(ctx interface{}, groupID interface{}) *GroupProjectService_ReturnAllIPAddresses_Call {
	return &GroupProjectService_ReturnAllIPAddresses_Call{Call: _e.mock.On("ReturnAllIPAddresses", ctx, groupID)}
}

func (_c *GroupProjectService_ReturnAllIPAddresses_Call) Run(run func(ctx context.Context, groupID string)) *GroupProjectService_ReturnAllIPAddresses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GroupProjectService_ReturnAllIPAddresses_Call) Return(_a0 *admin.GroupIPAddresses, _a1 *http.Response, _a2 error) *GroupProjectService_ReturnAllIPAddresses_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupProjectService_ReturnAllIPAddresses_Call) RunAndReturn(run func(context.Context, string) (*admin.GroupIPAddresses, *http.Response, error)) *GroupProjectService_ReturnAllIPAddresses_Call {
	_c.Call.Return(run)
	return _c
}

// SetProjectLimit provides a mock function with given fields: ctx, limitName, groupID, dataFederationLimit
func (_m *GroupProjectService) SetProjectLimit(ctx context.Context, limitName string, groupID string, dataFederationLimit *admin.DataFederationLimit) (*admin.DataFederationLimit, *http.Response, error) {
	ret := _m.Called(ctx, limitName, groupID, dataFederationLimit)

	if len(ret) == 0 {
		panic("no return value specified for SetProjectLimit")
	}

	var r0 *admin.DataFederationLimit
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.DataFederationLimit) (*admin.DataFederationLimit, *http.Response, error)); ok {
		return rf(ctx, limitName, groupID, dataFederationLimit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.DataFederationLimit) *admin.DataFederationLimit); ok {
		r0 = rf(ctx, limitName, groupID, dataFederationLimit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.DataFederationLimit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *admin.DataFederationLimit) *http.Response); ok {
		r1 = rf(ctx, limitName, groupID, dataFederationLimit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, *admin.DataFederationLimit) error); ok {
		r2 = rf(ctx, limitName, groupID, dataFederationLimit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupProjectService_SetProjectLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetProjectLimit'
type GroupProjectService_SetProjectLimit_Call struct {
	*mock.Call
}

// SetProjectLimit is a helper method to define mock.On call
//   - ctx context.Context
//   - limitName string
//   - groupID string
//   - dataFederationLimit *admin.DataFederationLimit
func (_e *GroupProjectService_Expecter) SetProjectLimit(ctx interface{}, limitName interface{}, groupID interface{}, dataFederationLimit interface{}) *GroupProjectService_SetProjectLimit_Call {
	return &GroupProjectService_SetProjectLimit_Call{Call: _e.mock.On("SetProjectLimit", ctx, limitName, groupID, dataFederationLimit)}
}

func (_c *GroupProjectService_SetProjectLimit_Call) Run(run func(ctx context.Context, limitName string, groupID string, dataFederationLimit *admin.DataFederationLimit)) *GroupProjectService_SetProjectLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.DataFederationLimit))
	})
	return _c
}

func (_c *GroupProjectService_SetProjectLimit_Call) Return(_a0 *admin.DataFederationLimit, _a1 *http.Response, _a2 error) *GroupProjectService_SetProjectLimit_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupProjectService_SetProjectLimit_Call) RunAndReturn(run func(context.Context, string, string, *admin.DataFederationLimit) (*admin.DataFederationLimit, *http.Response, error)) *GroupProjectService_SetProjectLimit_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProject provides a mock function with given fields: ctx, groupID, groupUpdate
func (_m *GroupProjectService) UpdateProject(ctx context.Context, groupID string, groupUpdate *admin.GroupUpdate) (*admin.Group, *http.Response, error) {
	ret := _m.Called(ctx, groupID, groupUpdate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 *admin.Group
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.GroupUpdate) (*admin.Group, *http.Response, error)); ok {
		return rf(ctx, groupID, groupUpdate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.GroupUpdate) *admin.Group); ok {
		r0 = rf(ctx, groupID, groupUpdate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *admin.GroupUpdate) *http.Response); ok {
		r1 = rf(ctx, groupID, groupUpdate)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *admin.GroupUpdate) error); ok {
		r2 = rf(ctx, groupID, groupUpdate)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupProjectService_UpdateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProject'
type GroupProjectService_UpdateProject_Call struct {
	*mock.Call
}

// UpdateProject is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID string
//   - groupUpdate *admin.GroupUpdate
func (_e *GroupProjectService_Expecter) UpdateProject(ctx interface{}, groupID interface{}, groupUpdate interface{}) *GroupProjectService_UpdateProject_Call {
	return &GroupProjectService_UpdateProject_Call{Call: _e.mock.On("UpdateProject", ctx, groupID, groupUpdate)}
}

func (_c *GroupProjectService_UpdateProject_Call) Run(run func(ctx context.Context, groupID string, groupUpdate *admin.GroupUpdate)) *GroupProjectService_UpdateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.GroupUpdate))
	})
	return _c
}

func (_c *GroupProjectService_UpdateProject_Call) Return(_a0 *admin.Group, _a1 *http.Response, _a2 error) *GroupProjectService_UpdateProject_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupProjectService_UpdateProject_Call) RunAndReturn(run func(context.Context, string, *admin.GroupUpdate) (*admin.Group, *http.Response, error)) *GroupProjectService_UpdateProject_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTeamRoles provides a mock function with given fields: ctx, groupID, teamID, teamRole
func (_m *GroupProjectService) UpdateTeamRoles(ctx context.Context, groupID string, teamID string, teamRole *admin.TeamRole) (*admin.PaginatedTeamRole, *http.Response, error) {
	ret := _m.Called(ctx, groupID, teamID, teamRole)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTeamRoles")
	}

	var r0 *admin.PaginatedTeamRole
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.TeamRole) (*admin.PaginatedTeamRole, *http.Response, error)); ok {
		return rf(ctx, groupID, teamID, teamRole)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.TeamRole) *admin.PaginatedTeamRole); ok {
		r0 = rf(ctx, groupID, teamID, teamRole)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedTeamRole)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *admin.TeamRole) *http.Response); ok {
		r1 = rf(ctx, groupID, teamID, teamRole)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, *admin.TeamRole) error); ok {
		r2 = rf(ctx, groupID, teamID, teamRole)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GroupProjectService_UpdateTeamRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTeamRoles'
type GroupProjectService_UpdateTeamRoles_Call struct {
	*mock.Call
}

// UpdateTeamRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID string
//   - teamID string
//   - teamRole *admin.TeamRole
func (_e *GroupProjectService_Expecter) UpdateTeamRoles(ctx interface{}, groupID interface{}, teamID interface{}, teamRole interface{}) *GroupProjectService_UpdateTeamRoles_Call {
	return &GroupProjectService_UpdateTeamRoles_Call{Call: _e.mock.On("UpdateTeamRoles", ctx, groupID, teamID, teamRole)}
}

func (_c *GroupProjectService_UpdateTeamRoles_Call) Run(run func(ctx context.Context, groupID string, teamID string, teamRole *admin.TeamRole)) *GroupProjectService_UpdateTeamRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.TeamRole))
	})
	return _c
}

func (_c *GroupProjectService_UpdateTeamRoles_Call) Return(_a0 *admin.PaginatedTeamRole, _a1 *http.Response, _a2 error) *GroupProjectService_UpdateTeamRoles_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GroupProjectService_UpdateTeamRoles_Call) RunAndReturn(run func(context.Context, string, string, *admin.TeamRole) (*admin.PaginatedTeamRole, *http.Response, error)) *GroupProjectService_UpdateTeamRoles_Call {
	_c.Call.Return(run)
	return _c
}

// NewGroupProjectService creates a new instance of GroupProjectService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupProjectService(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupProjectService {
	mock := &GroupProjectService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
