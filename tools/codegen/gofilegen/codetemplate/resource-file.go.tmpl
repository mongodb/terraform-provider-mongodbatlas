// Code generated by terraform-provider-mongodbatlas using `make generate-resource`. DO NOT EDIT.

package {{ .PackageName }}

import (
	"context"
	
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/mongodb/terraform-provider-mongodbatlas/internal/common/autogen"
	"github.com/mongodb/terraform-provider-mongodbatlas/internal/common/conversion"
	"github.com/mongodb/terraform-provider-mongodbatlas/internal/config"
)

var _ resource.ResourceWithConfigure = &rs{}
var _ resource.ResourceWithImportState = &rs{}

const apiVersionHeader = "{{ .APIOperations.VersionHeader }}"

func Resource() resource.Resource {
	return &rs{
		RSCommon: config.RSCommon{
			ResourceName: "{{ .ResourceName }}",
		},
	}
}

type rs struct {
	config.RSCommon
}

func (r *rs) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = ResourceSchema(ctx)
	conversion.UpdateSchemaDescription(&resp.Schema)
}

func (r *rs) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan TFModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	pathParams := map[string]string{ {{range .APIOperations.Create.PathParams }}
		"{{ .CamelCaseName }}": plan.{{ .PascalCaseName }}.ValueString(),
	{{- end }}
	}
	callParams := config.APICallParams{
		VersionHeader: apiVersionHeader,
		RelativePath: "{{ .APIOperations.Create.Path }}",
		PathParams: pathParams,
		Method: "{{ .APIOperations.Create.HTTPMethod }}",
	}
	reqHandle := autogen.HandleCreateReq {
		Resp: resp,
		Client: r.Client,
		Plan: &plan,
		CallParams: &callParams,
		{{with .APIOperations.Create.Wait -}}
		Wait: &autogen.WaitReq{
			StateProperty: "{{ .StateProperty }}",
			PendingStates: []string{ {{range .PendingStates }}"{{ . }}", {{- end }} },
			TargetStates: []string{ {{range .TargetStates }}"{{ . }}", {{- end }} },
			TimeoutSeconds: {{ .TimeoutSeconds }},
			MinTimeoutSeconds: {{ .MinTimeoutSeconds }},
			DelaySeconds: {{ .DelaySeconds }},
			CallParams: readAPICallParams(&plan),
		},
		{{ end }}
	}
	autogen.HandleCreate(ctx, reqHandle)
}

func (r *rs) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state TFModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	reqHandle := autogen.HandleReadReq {
		Resp: resp,
		Client: r.Client,
		State: &state,
		CallParams: readAPICallParams(&state),
	}
	autogen.HandleRead(ctx, reqHandle)
}

func (r *rs) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan TFModel
	var state TFModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	// Path params are grabbed from state as they may be computed-only and not present in the plan
	pathParams := map[string]string{ {{range .APIOperations.Update.PathParams }}
		"{{ .CamelCaseName }}": state.{{ .PascalCaseName }}.ValueString(),
	{{- end }}
	}
	callParams := config.APICallParams{
		VersionHeader: apiVersionHeader,
		RelativePath: "{{ .APIOperations.Update.Path }}",
		PathParams: pathParams,
		Method: "{{ .APIOperations.Update.HTTPMethod }}",
	}
	reqHandle := autogen.HandleUpdateReq {
		Resp: resp,
		Client: r.Client,
		Plan: &plan,
		CallParams: &callParams,
		{{with .APIOperations.Update.Wait -}}
		Wait: &autogen.WaitReq{
			StateProperty: "{{ .StateProperty }}",
			PendingStates: []string{ {{range .PendingStates }}"{{ . }}", {{- end }} },
			TargetStates: []string{ {{range .TargetStates }}"{{ . }}", {{- end }} },
			TimeoutSeconds: {{ .TimeoutSeconds }},
			MinTimeoutSeconds: {{ .MinTimeoutSeconds }},
			DelaySeconds: {{ .DelaySeconds }},
			CallParams: readAPICallParams(&state),
		},
		{{ end }}
	}
	autogen.HandleUpdate(ctx, reqHandle)
}

func (r *rs) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state TFModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}
	pathParams := map[string]string{ {{range .APIOperations.Delete.PathParams }}
		"{{ .CamelCaseName }}": state.{{ .PascalCaseName }}.ValueString(),
	{{- end }}
	}
	callParams := config.APICallParams{
		VersionHeader: apiVersionHeader,
		RelativePath: "{{ .APIOperations.Delete.Path }}",
		PathParams: pathParams,
		Method: "{{ .APIOperations.Delete.HTTPMethod }}",
	}
	reqHandle := autogen.HandleDeleteReq {
		Resp: resp,
		Client: r.Client,
		State: &state,
		CallParams: &callParams,
		{{with .APIOperations.Delete.Wait -}}
		Wait: &autogen.WaitReq{
			StateProperty: "{{ .StateProperty }}",
			PendingStates: []string{ {{range .PendingStates }}"{{ . }}", {{- end }} },
			TargetStates: []string{ {{range .TargetStates }}"{{ . }}", {{- end }} },
			TimeoutSeconds: {{ .TimeoutSeconds }},
			MinTimeoutSeconds: {{ .MinTimeoutSeconds }},
			DelaySeconds: {{ .DelaySeconds }},
			CallParams: readAPICallParams(&state),
		},
		{{ end }}
	}
	autogen.HandleDelete(ctx, reqHandle)
}

func (r *rs) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	idAttributes := []string{ {{range .ImportIDAttributes }}"{{ . }}", {{- end }}}
	autogen.HandleImport(ctx, idAttributes, req, resp)
}

func readAPICallParams(state *TFModel) *config.APICallParams {
	pathParams := map[string]string{ {{range .APIOperations.Read.PathParams }}
		"{{ .CamelCaseName }}": state.{{ .PascalCaseName }}.ValueString(),
	{{- end }}
	}
	return &config.APICallParams{
		VersionHeader: apiVersionHeader,
		RelativePath: "{{ .APIOperations.Read.Path }}",
		PathParams: pathParams,
		Method: "{{ .APIOperations.Read.HTTPMethod }}",		
	}
}
