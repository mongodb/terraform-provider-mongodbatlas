// Code generated by terraform-provider-mongodbatlas using `make generate-resource`. DO NOT EDIT.

package testname

import (
	"context"
	"io"
	"net/http"

	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/mongodb/terraform-provider-mongodbatlas/internal/common/conversion"
	"github.com/mongodb/terraform-provider-mongodbatlas/internal/common/validate"
	"github.com/mongodb/terraform-provider-mongodbatlas/internal/config"
)

var _ resource.ResourceWithConfigure = &rs{}
var _ resource.ResourceWithImportState = &rs{}

const apiVersionHeader = "application/vnd.atlas.2024-05-30+json"

func Resource() resource.Resource {
	return &rs{
		RSCommon: config.RSCommon{
			ResourceName: "test_name",
		},
	}
}

type rs struct {
	config.RSCommon
}

func (r *rs) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = ResourceSchema(ctx)
	conversion.UpdateSchemaDescription(&resp.Schema)
}

func (r *rs) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan TFModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var reqBody []byte // TODO handle conversion of TFModel to reqBody

	pathParams := map[string]string{
		"projectId": plan.ProjectId.ValueString(),
	}
	apiResp, err := r.Client.UntypedAPICall(ctx, &config.APICallParams{
		VersionHeader: apiVersionHeader,
		RelativePath:  "/api/v1/testname/{projectId}",
		PathParams:    pathParams,
		Method:        http.MethodPost,
		Body:          reqBody,
	})

	if err != nil {
		resp.Diagnostics.AddError("error during create operation", err.Error())
		return
	}

	_, _ = io.ReadAll(apiResp.Body)
	var newModel TFModel // TODO handle conversion of byte[] body to newModel

	resp.Diagnostics.Append(resp.State.Set(ctx, newModel)...)
}

func (r *rs) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var plan TFModel
	resp.Diagnostics.Append(req.State.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	pathParams := map[string]string{
		"projectId": plan.ProjectId.ValueString(),
		"roleName":  plan.RoleName.ValueString(),
	}
	apiResp, err := r.Client.UntypedAPICall(ctx, &config.APICallParams{
		VersionHeader: apiVersionHeader,
		RelativePath:  "/api/v1/testname/{projectId}/{roleName}",
		PathParams:    pathParams,
		Method:        http.MethodGet,
	})

	if err != nil {
		if validate.StatusNotFound(apiResp) {
			resp.State.RemoveResource(ctx)
			return
		}
		resp.Diagnostics.AddError("error during get operation", err.Error())
		return
	}

	_, _ = io.ReadAll(apiResp.Body)
	var newModel TFModel // TODO handle conversion of byte[] body to newModel

	resp.Diagnostics.Append(resp.State.Set(ctx, newModel)...)
}

func (r *rs) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	// TODO: code generation logic for update will be handled in milestone 2
}

func (r *rs) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state *TFModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	pathParams := map[string]string{
		"projectId": state.ProjectId.ValueString(),
		"roleName":  state.RoleName.ValueString(),
	}
	if _, err := r.Client.UntypedAPICall(ctx, &config.APICallParams{
		VersionHeader: apiVersionHeader,
		RelativePath:  "/api/v1/testname/{projectId}/{roleName}",
		PathParams:    pathParams,
		Method:        http.MethodDelete,
	}); err != nil {
		resp.Diagnostics.AddError("error during delete", err.Error())
		return
	}
}

func (r *rs) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// TODO: code generation logic for import will be handled in milestone 2
}
