// Code generated by terraform-provider-mongodbatlas using `make generate-resource`. DO NOT EDIT.

package testname

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/mongodb/terraform-provider-mongodbatlas/internal/common/autogen/customtypes"
	"github.com/mongodb/terraform-provider-mongodbatlas/internal/common/customplanmodifier"
)

func ResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"string_attr": schema.StringAttribute{
				Required:            true,
				MarkdownDescription: "string description",
				PlanModifiers:       []planmodifier.String{customplanmodifier.CreateOnly()},
			},
			"bool_attr": schema.BoolAttribute{
				Optional:            true,
				MarkdownDescription: "bool description",
				PlanModifiers:       []planmodifier.Bool{customplanmodifier.CreateOnly()},
			},
			"int_attr": schema.Int64Attribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "int description",
				PlanModifiers:       []planmodifier.Int64{customplanmodifier.CreateOnly()},
			},
			"float_attr": schema.Float64Attribute{
				Optional:            true,
				MarkdownDescription: "float description",
				PlanModifiers:       []planmodifier.Float64{customplanmodifier.CreateOnly()},
			},
			"number_attr": schema.NumberAttribute{
				Optional:            true,
				MarkdownDescription: "number description",
				PlanModifiers:       []planmodifier.Number{customplanmodifier.CreateOnly()},
			},
			"simple_list_attr": schema.ListAttribute{
				Optional:            true,
				MarkdownDescription: "simple arr description",
				CustomType:          customtypes.NewListType[types.String](ctx),
				PlanModifiers:       []planmodifier.List{customplanmodifier.CreateOnly()},
				ElementType:         types.StringType,
			},
			"simple_set_attr": schema.SetAttribute{
				Optional:            true,
				MarkdownDescription: "simple set description",
				CustomType:          customtypes.NewSetType[types.Float64](ctx),
				PlanModifiers:       []planmodifier.Set{customplanmodifier.CreateOnly()},
				ElementType:         types.Float64Type,
			},
			"simple_map_attr": schema.MapAttribute{
				Optional:            true,
				MarkdownDescription: "simple map description",
				CustomType:          customtypes.NewMapType[types.Bool](ctx),
				PlanModifiers:       []planmodifier.Map{customplanmodifier.CreateOnly()},
				ElementType:         types.BoolType,
			},
			"nested_single_attr": schema.SingleNestedAttribute{
				Required:            true,
				MarkdownDescription: "nested single attribute",
				CustomType:          customtypes.NewObjectType[TFNestedSingleAttrModel](ctx),
				PlanModifiers:       []planmodifier.Object{customplanmodifier.CreateOnly()},
				Attributes: map[string]schema.Attribute{
					"int_attr": schema.Int64Attribute{
						Required:            true,
						MarkdownDescription: "int attribute",
					},
				},
			},
			"nested_list_attr": schema.ListNestedAttribute{
				Optional:            true,
				MarkdownDescription: "nested list attribute",
				CustomType:          customtypes.NewNestedListType[TFNestedListAttrModel](ctx),
				PlanModifiers:       []planmodifier.List{customplanmodifier.CreateOnly()},
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"int_attr": schema.Int64Attribute{
							Required:            true,
							MarkdownDescription: "int attribute",
						},
					},
				},
			},
			"set_nested_attribute": schema.SetNestedAttribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "set nested attribute",
				CustomType:          customtypes.NewNestedSetType[TFSetNestedAttributeModel](ctx),
				PlanModifiers:       []planmodifier.Set{customplanmodifier.CreateOnly()},
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"int_attr": schema.Int64Attribute{
							Required:            true,
							MarkdownDescription: "int attribute",
						},
					},
				},
			},
			"map_nested_attribute": schema.MapNestedAttribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "map nested attribute",
				CustomType:          customtypes.NewNestedMapType[TFMapNestedAttributeModel](ctx),
				PlanModifiers:       []planmodifier.Map{customplanmodifier.CreateOnly()},
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"int_attr": schema.Int64Attribute{
							Required:            true,
							MarkdownDescription: "int attribute",
						},
					},
				},
			},
		},
	}
}

type TFModel struct {
	StringAttr         types.String                                          `tfsdk:"string_attr"`
	BoolAttr           types.Bool                                            `tfsdk:"bool_attr"`
	IntAttr            types.Int64                                           `tfsdk:"int_attr"`
	FloatAttr          types.Float64                                         `tfsdk:"float_attr"`
	NumberAttr         types.Number                                          `tfsdk:"number_attr"`
	SimpleListAttr     customtypes.ListValue[types.String]                   `tfsdk:"simple_list_attr"`
	SimpleSetAttr      customtypes.SetValue[types.Float64]                   `tfsdk:"simple_set_attr"`
	SimpleMapAttr      customtypes.MapValue[types.Bool]                      `tfsdk:"simple_map_attr"`
	NestedSingleAttr   customtypes.ObjectValue[TFNestedSingleAttrModel]      `tfsdk:"nested_single_attr"`
	NestedListAttr     customtypes.NestedListValue[TFNestedListAttrModel]    `tfsdk:"nested_list_attr"`
	SetNestedAttribute customtypes.NestedSetValue[TFSetNestedAttributeModel] `tfsdk:"set_nested_attribute"`
	MapNestedAttribute customtypes.NestedMapValue[TFMapNestedAttributeModel] `tfsdk:"map_nested_attribute"`
}
type TFNestedSingleAttrModel struct {
	IntAttr types.Int64 `tfsdk:"int_attr"`
}
type TFNestedListAttrModel struct {
	IntAttr types.Int64 `tfsdk:"int_attr"`
}
type TFSetNestedAttributeModel struct {
	IntAttr types.Int64 `tfsdk:"int_attr"`
}
type TFMapNestedAttributeModel struct {
	IntAttr types.Int64 `tfsdk:"int_attr"`
}
