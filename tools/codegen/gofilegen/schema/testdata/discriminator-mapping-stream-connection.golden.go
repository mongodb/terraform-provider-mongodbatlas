// Code generated by terraform-provider-mongodbatlas using `make generate-resource`. DO NOT EDIT.

package testname

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func ResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"type": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Type of the stream connection",
			},
			"type_cluster": schema.SingleNestedAttribute{
				Optional:            true,
				MarkdownDescription: "Use this when you want a cluster stream connection",
				Attributes: map[string]schema.Attribute{
					"cluster_name": schema.StringAttribute{
						Required:            true,
						MarkdownDescription: "Name of the cluster to connect to",
					},
				},
			},
			"type_https": schema.SingleNestedAttribute{
				Optional:            true,
				MarkdownDescription: "Use this when you want a https stream connection",
				Attributes: map[string]schema.Attribute{
					"url": schema.StringAttribute{
						Required:            true,
						MarkdownDescription: "Url of the https stream connection",
					},
				},
			},
		},
	}
}

type TFModel struct {
	Type        types.String `tfsdk:"type"`
	TypeCluster types.Object `tfsdk:"type_cluster" autogen:"discriminator:type=Cluster"`
	TypeHttps   types.Object `tfsdk:"type_https" autogen:"discriminator:type=Https"`
}

func (t *TFModel) DiscriminatorAttr(objJSON map[string]any) string {
	switch objJSON["type"] {
	case "Cluster":
		return "TypeCluster"
	case "Https":
		return "TypeHttps"
	}
	return ""
}

type TFTypeClusterModel struct {
	ClusterName types.String `tfsdk:"cluster_name"`
}
type TFTypeHttpsModel struct {
	Url types.String `tfsdk:"url"`
}
