// Code generated by terraform-provider-mongodbatlas using `make generate-resource`. DO NOT EDIT.

package testname

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/mongodb/terraform-provider-mongodbatlas/internal/common/autogen/customtype"
)

func ResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"nested_object_attr": schema.SingleNestedAttribute{
				Required:            true,
				MarkdownDescription: "nested object attribute",
				CustomType:          customtype.NewObjectType[TFNestedObjectAttrModel](ctx),
				Attributes: map[string]schema.Attribute{
					"string_attr": schema.StringAttribute{
						Optional:            true,
						MarkdownDescription: "string attribute",
					},
					"sub_nested_object_attr": schema.SingleNestedAttribute{
						Required:   true,
						CustomType: customtype.NewObjectType[TFNestedObjectAttrSubNestedObjectAttrModel](ctx),
						Attributes: map[string]schema.Attribute{
							"int_attr": schema.Int64Attribute{
								Required:            true,
								MarkdownDescription: "int attribute",
							},
						},
					},
				},
			},
			"nested_list_attr": schema.ListNestedAttribute{
				Optional:            true,
				MarkdownDescription: "nested list attribute",
				CustomType:          customtype.NewNestedListType[TFNestedListAttrModel](ctx),
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"string_attr": schema.StringAttribute{
							Optional:            true,
							MarkdownDescription: "string attribute",
						},
						"int_attr": schema.Int64Attribute{
							Required:            true,
							MarkdownDescription: "int attribute",
						},
						"double_nested_list_attr": schema.ListNestedAttribute{
							Optional:            true,
							MarkdownDescription: "double nested list attribute",
							CustomType:          customtype.NewNestedListType[TFDoubleNestedListAttrModel](ctx),
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"string_attr": schema.StringAttribute{
										Optional:            true,
										MarkdownDescription: "string attribute",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type TFModel struct {
	NestedObjectAttr customtype.ObjectValue[TFNestedObjectAttrModel]   `tfsdk:"nested_object_attr"`
	NestedListAttr   customtype.NestedListValue[TFNestedListAttrModel] `tfsdk:"nested_list_attr"`
}
type TFNestedObjectAttrModel struct {
	StringAttr          types.String                                                       `tfsdk:"string_attr"`
	SubNestedObjectAttr customtype.ObjectValue[TFNestedObjectAttrSubNestedObjectAttrModel] `tfsdk:"sub_nested_object_attr"`
}
type TFNestedObjectAttrSubNestedObjectAttrModel struct {
	IntAttr types.Int64 `tfsdk:"int_attr"`
}
type TFNestedListAttrModel struct {
	StringAttr           types.String                                            `tfsdk:"string_attr"`
	IntAttr              types.Int64                                             `tfsdk:"int_attr"`
	DoubleNestedListAttr customtype.NestedListValue[TFDoubleNestedListAttrModel] `tfsdk:"double_nested_list_attr"`
}
type TFNestedListAttrDoubleNestedListAttrModel struct {
	StringAttr types.String `tfsdk:"string_attr"`
}
