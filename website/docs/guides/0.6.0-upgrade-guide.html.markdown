---
layout: "mongodbatlas"
page_title: "MongoDB Atlas Provider 0.6.0: Upgrade Guide"
sidebar_current: "docs-mongodbatlas-guides-060-upgrade-guide"
description: |-
    MongoDB Atlas Provider 0.6.0: Upgrade Guide
    
---

# MongoDB Atlas Provider 0.6.0: Upgrade Guide

Besides the bug fixes, improvements and enhancements listed in the  [CHANGELOG](https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/CHANGELOG.md) for 0.6.0 an important change is included that you should be aware of before upgrading to the newest provider.

**0.6.0 contains an automatic state migration**
Provider versions from 0.3.1 to 0.5.1 tracked the state information for the MongoDB Atlas (optional) [advanced_configuration](https://www.terraform.io/docs/providers/mongodbatlas/r/cluster.html#advanced-configuration-options) options so that they could be modified if needed.  In order to correct issues reported in [#210](https://github.com/mongodb/terraform-provider-mongodbatlas/issues/210), a change in how this information is stored in the Terraform state file is required.

Since this information is in the state file whether you modified the advanced_configuration or not the migration is required for all users of the provider who have a MongoDB Atlas cluster managed by the MongoDB Atlas Provider.
The state migration happens automatically the first time the managed cluster(s) data is refreshed.  

## You simply need to perform two actions after upgrading to the 0.6.0 MongoDB Atlas Provider

Step 1: Run `terraform refresh`

This will perform the migration from the previous state version to the new.  `terraform refresh` will, by default, create a backup state file `terraform.tfstate.backup` containing the state before the migration.  If you have a different process/procedure for backing up the state file ensure you follow that before refreshing the state.  Either way err on the side of caution and **ensure you have a backup of the state before the migration.**

Before the refresh the state file contains the following section for advanced_configuration:

    "advanced_configuration": {
              "fail_index_key_too_long": "true",
              "javascript_enabled": "true",
              "minimum_enabled_tls_protocol": "TLS1_2",
              "no_table_scan": "false",
              "oplog_size_mb": "",
              "sample_refresh_interval_bi_connector": "",
              "sample_size_bi_connector": ""
            },

After the refresh the state file contains:

     "advanced_configuration": [
              {
                "fail_index_key_too_long": true,
                "javascript_enabled": true,
                "minimum_enabled_tls_protocol": "TLS1_2",
                "no_table_scan": false,
                "oplog_size_mb": 0,
                "sample_refresh_interval_bi_connector": 0,
                "sample_size_bi_connector": 0
              }
            ],

Step 2: Update Terraform configs that contain modifications of the default advanced_configuration options

If you had previously configured [advanced_configuration](https://www.terraform.io/docs/providers/mongodbatlas/r/cluster.html#advanced-configuration-options) options you'll need to make a simple edit to your Terraform configuration, simply remove the `=` sign from the block:

Change from this:

     advanced_configuration = {
     }

to this for 0.6.0 forward:

    advanced_configuration {
    }

After that you are ready to move forward with this new version!

### Helpful Links

* [Report bugs](https://github.com/mongodb/terraform-provider-mongodbatlas/issues)

* [Request Features](https://feedback.mongodb.com/forums/924145-atlas?category_id=370723)

* [Contact Support](https://docs.atlas.mongodb.com/support/) covered by MongoDB Atlas support plans, Developer and above.
