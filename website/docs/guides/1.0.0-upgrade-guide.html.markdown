---
layout: "mongodbatlas"
page_title: "MongoDB Atlas Provider 1.0.0: Upgrade and Information Guide"
sidebar_current: "docs-mongodbatlas-guides-100-upgrade-guide"
description: |-
MongoDB Atlas Provider 0.1.0: Upgrade and Information Guide
---

# MongoDB Atlas Provider 1.0.0: Upgrade and Information Guide

The Terraform MongoDB Atlas Provider version 1.0.0 has a number of new and exciting features and changes.  
New features include:
* Support for Atlas Search
* Support for Online Archive
* Support for Data Lake
* Support for Triggers
* Re-Architected and Updated Cloud Backup Policy Schedule

1.0.0 also includes general improvements and bug fixes. See the [CHANGELOG](https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/CHANGELOG.md) for more specific information.

In addition, there are a few changes that will require modifications to your TF configuration between earlier versions of the provider and this one.  Below we have outlined guidance for each of the changes.
These configuration impacting changes include:
* The Project IP Whitelist resource and data source are at end of life.  They have been replaced by Project IP Access List.
* Private Endpoint and Private Endpoint Interface Link are at end of life.  They have been replaced by PrivateLink Endpoint and PrivateLink Endpoint Service
* We've upgraded to Terraform's SDK v2, which results in configuration changes for some resources and data sources.  They include: Alert Configuration, Cloud Provider Access Authorization, Cloud Provider Snapshot Restore Job and Encryption at Rest with BYOK.
* Cloud Provider Backup Schedule replaces the now deprecated Cloud Provider Snapshot Backup Policy.  
* Related to the above, in the Cluster resource and data source the parameter `provider_backup_enabled` has been deprecated, use `cloud_backup` instead.

## End of Life and removal of Project IP Whitelist and import with Project IP Access List

To upgrade from v0.9.1 to v1.0.0 with the existing resources `mongodbatlas_project_ip_whitelist`
perform the following steps

1. Remove your existing `mongodbatlas_project_ip_whitelist` resources from terraform state
   **NOTE** before doing any terraform state change please do a backup

```bash
$ terraform state rm mongodbatlas_project_ip_whitelist.test
```

2. Change the version of provider to the v1.0.0

3. Perform an import from your existing `mongodbatlas_project_ip_whitelist` to `mongodbatlas_project_ip_access_list`
```bash
    terraform import mongodbatlas_project_ip_access_list.test <project_id>-<entry>
```

4. Do a terraform plan (no changes detected)

```bash
terraform plan

(...)


No changes. Your infrastructure matches the configuration.

Terraform has compared your real infrastructure against your configuration and found no differences,
so no changes are needed.
```
**NOTE** Doc links for [mongodbatlas_project_ip_access_list](https://registry.terraform.io/providers/mongodb/mongodbatlas/latest/docs/resources/project_ip_access_list)

## End of Life and removal of Private Endpoint and Private Endpoint Interface Link and import with PrivateLink Endpoint and PrivateLink Endpoint Service

To upgrade from v0.9.1 to v1.0.0 with the existing resources `mongodbatlas_private_endpoint` and `mongodbatlas_private_endpoint_interface_link`
perform the following steps

1. Remove your existing `mongodbatlas_private_endpoint` and `mongodbatlas_private_endpoint_interface_link` resources from terraform state
   **NOTE** before doing any terraform state change please do a backup

```bash
$ terraform state rm mongodbatlas_private_endpoint.test
$ terraform state rm mongodbatlas_private_endpoint_interface_link.test
```

2. Change the version of provider to the v1.0.0

3. Perform an import from your existing `mongodbatlas_private_endpoint` to `mongodbatlas_privatelink_endpoint` and from `mongodbatlas_private_endpoint_interface_link` to `mongodbatlas_privatelink_endpoint_service`
```bash
    terraform import mongodbatlas_privatelink_endpoint.test <project_id>-<private_link_id>-<provider_name>-<region>
    terraform import mongodbatlas_privatelink_endpoint_service.test <project_id>--<private_link_id>--<endpoint_service_id>--<provider_name>
```

4. Do a terraform plan (no changes detected)

```bash
terraform plan

(...)


No changes. Your infrastructure matches the configuration.

Terraform has compared your real infrastructure against your configuration and found no differences,
so no changes are needed.
```
**NOTE** Doc links for [mongodbatlas_privatelink_endpoint](https://registry.terraform.io/providers/mongodb/mongodbatlas/latest/docs/resources/privatelink_endpoint)
**NOTE** Doc links for [mongodbatlas_privatelink_endpoint_service](https://registry.terraform.io/providers/mongodb/mongodbatlas/latest/docs/resources/privatelink_endpoint_service)

## Migration to Terraform SDK v2

- Due to the migration to Terraform SDK v2 various resources and datasource(s) have been impacted and will require a change within your configuration. These resources and datasources used the now unsupported TypeMap object. In SDK v2 these must be TypeSet or TypeList with MaxItems set to 1. The following is the list of resources and datasources impacted by the migration.

### Alert Configuration
- Fields Affected:
    - metric_threshold (deprecated), use metric_threshold_config instead
    - threshold (deprecated), use threshold_confing instead

Old usage:
```terraform
metric_threshold = {
  metric_name = "ASSERT_REGULAR"
  operator    = "LESS_THAN"
  threshold   = 1.0
  units       = "RAW"
  mode        = "AVERAGE"
}

threshold = {
    operator    = "LESS_THAN"
    threshold   = 72
    units       = "HOURS"
  }

```

New usage:
```terraform
metric_threshold_config {
  metric_name = "ASSERT_REGULAR"
  operator    = "LESS_THAN"
  threshold   = 1.0
  units       = "RAW"
  mode        = "AVERAGE"
}

threshold_config {
    operator    = "LESS_THAN"
    threshold   = 72
    units       = "HOURS"
  }

```

### Cloud Provider Access Authorization
- Fields Affected:
    - aws (deprecated), use aws_config instead

Old usage:
```terraform
aws = {
  iam_assumed_role_arn = aws_iam_role.test_role.arn
}
```

New usage:
```terraform
aws_config {
  iam_assumed_role_arn = aws_iam_role.test_role.arn
}
```

### Cloud Provider Snapshot Restore Job
- Fields Affected:
    - delivery_type (deprecated), use delivery_type_config instead

Old usage:
```terraform
delivery_type  = {
  point_in_time       = true
  target_cluster_name = mongodbatlas_cluster.target_cluster.name
  target_project_id   = ""
}
```

New usage:
```terraform
delivery_type_config   {
  point_in_time       = true
  target_cluster_name = mongodbatlas_cluster.target_cluster.name
  target_project_id   = ""
}
```

### Encryption at rest
- Fields Affected:
    - aws_kms (deprecated), use aws_kms instead
    - azure_key_vault (deprecated), use azure_key_vault instead
    - google_cloud_kms (deprecated), use google_cloud_kms instead

Old usage:
```terraform

aws_kms = {
  enabled                = true
  access_key_id          = ""
  secret_access_key      = ""
  customer_master_key_id = ""
  region                 = ""
}

azure_key_vault = {
  enabled             = true
  client_id           = ""
  azure_environment   = ""
  subscription_id     = ""
  resource_group_name = ""
  key_vault_name  	  = ""
  key_identifier  	  = ""
  secret  			  = ""
  tenant_id  		  = ""
}

google_cloud_kms = {
  enabled                 = true
  service_account_key     = ""
  key_version_resource_id = ""
}
```

New usage:
```terraform
aws_kms_config {
  enabled                = true
  access_key_id          = ""
  secret_access_key      = ""
  customer_master_key_id = ""
  region                 = ""
}

azure_key_vault_config {
  enabled             = true
  client_id           = ""
  azure_environment   = ""
  subscription_id     = ""
  resource_group_name = ""
  key_vault_name  	  = ""
  key_identifier  	  = ""
  secret  			  = ""
  tenant_id  		  = ""
}

google_cloud_kms_config {
  enabled                 = true
  service_account_key     = ""
  key_version_resource_id = ""
}
```
## Migration from Cloud Provider Snapshot Backup Policy to Cloud Provider Backup Schedule

To upgrade from v0.9.1 to v1.0.0 with the existing resources `mongodbatlas_cloud_provider_snapshot_backup_policy`
perform the following steps

**IMPORTANT** In resource `mongodbatlas_cluster` the parameter `provider_backup_enabled` has been deprecated, use `cloud_backup` instead.

Thanks to user feedback we redesigned the `mongodbatlas_cloud_provider_snapshot_backup_policy` to be significantly better and more in line with what one would expect from a Terraform resource. This required a significant re-architecture of the resource as well as some work on the Atlas API and the resulting resource is quite a bit different, and we believe, much better. Below is an example of both the previous resource configuration, `mongodbatlas_cloud_provider_snapshot_backup_policy`, and the new resource configuration, `mongodbatlas_cloud_backup_schedule`:

`mongodbatlas_cloud_provider_snapshot_backup_policy` Example - Previous Resource - Deprecated

```hcl
resource "mongodbatlas_cloud_provider_snapshot_backup_policy" "test" {
  project_id   = mongodbatlas_cluster.my_cluster.project_id
  cluster_name = mongodbatlas_cluster.my_cluster.name

  reference_hour_of_day    = 3
  reference_minute_of_hour = 45
  restore_window_days      = 4

  //Keep all 4 default policies but modify the units and values
  //Could also just reflect the policy defaults here for later management
  policies {
    id = mongodbatlas_cluster.my_cluster.snapshot_backup_policy.0.policies.0.id

    policy_item {
      id                 = mongodbatlas_cluster.my_cluster.snapshot_backup_policy.0.policies.0.policy_item.0.id
      frequency_interval = 1
      frequency_type     = "hourly"
      retention_unit     = "days"
      retention_value    = 1
    }

    policy_item {
      id                 = mongodbatlas_cluster.my_cluster.snapshot_backup_policy.0.policies.0.policy_item.1.id
      frequency_interval = 1
      frequency_type     = "daily"
      retention_unit     = "days"
      retention_value    = 2
    }

    policy_item {
      id                 = mongodbatlas_cluster.my_cluster.snapshot_backup_policy.0.policies.0.policy_item.2.id
      frequency_interval = 4
      frequency_type     = "weekly"
      retention_unit     = "weeks"
      retention_value    = 3
    }

    policy_item {
      id                 = mongodbatlas_cluster.my_cluster.snapshot_backup_policy.0.policies.0.policy_item.3.id
      frequency_interval = 5
      frequency_type     = "monthly"
      retention_unit     = "months"
      retention_value    = 4
    }
  }
}
```

`mongodbatlas_cloud_backup_schedule` Example - New Resource

```hcl
resource "mongodbatlas_cloud_backup_schedule" "test" {
  project_id   = mongodbatlas_cluster.my_cluster.project_id
  cluster_name = mongodbatlas_cluster.my_cluster.name

  reference_hour_of_day    = 3
  reference_minute_of_hour = 45
  restore_window_days      = 4
  
  // This will now add the desired policy items to the existing mongodbatlas_cloud_backup_schedule resource
  policy_item_hourly {
    frequency_interval = 1
    retention_unit     = "days"
    retention_value    = 1
  }
  policy_item_daily {
    frequency_interval = 1
    retention_unit     = "days"
    retention_value    = 2
  }
  policy_item_weekly {
    frequency_interval = 4
    retention_unit     = "weeks"
    retention_value    = 3
  }
  policy_item_monthly {
    frequency_interval = 5
    retention_unit     = "months"
    retention_value    = 4
  }

}
```

1. Remove your existing `mongodbatlas_cloud_provider_snapshot_backup_policy` resources from terraform state
   **NOTE** before doing any terraform state change please do a backup

```bash
$ terraform state rm mongodbatlas_cloud_provider_snapshot_backup_policy.test
```

2. Change the version of provider to the v1.0.0

3. In order to import the new resource, you must first change your Terraform configuration file, replacing `mongodbatlas_cloud_provider_snapshot_backup_policy` with `mongodbatlas_cloud_backup_schedule`. See the example shared above or find more information in the [mongodbatlas_cloud_backup_schedule](https://registry.terraform.io/providers/mongodb/mongodbatlas/latest/docs/resources/cloud_backup_schedule)

4. Perform an import of your existing `mongodbatlas_cloud_provider_snapshot_backup_policy` to `mongodbatlas_cloud_backup_schedule`
```bash
    terraform import mongodbatlas_cloud_backup_schedule.test <project_id>-<cluster_name>
```

5. Do a terraform plan (no changes detected)

```bash
terraform plan

(...)


No changes. Your infrastructure matches the configuration.

Terraform has compared your real infrastructure against your configuration and found no differences,
so no changes are needed.
```


**NOTE** Doc links for [mongodbatlas_cloud_backup_schedule](https://registry.terraform.io/providers/mongodb/mongodbatlas/latest/docs/resources/cloud_backup_schedule)

### Helpful Links

* [Report bugs](https://github.com/mongodb/terraform-provider-mongodbatlas/issues)

* [Request Features](https://feedback.mongodb.com/forums/924145-atlas?category_id=370723)

* [Contact Support](https://docs.atlas.mongodb.com/support/) covered by MongoDB Atlas support plans, Developer and above.